# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T21:52:44+00:00

from __future__ import annotations

from datetime import date as date_aliased
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import (
    AnyUrl,
    BaseModel,
    ConfigDict,
    EmailStr,
    Field,
    RootModel,
    conint,
    constr,
)


class Actor(BaseModel):
    avatar_url: AnyUrl
    display_login: Optional[str] = None
    gravatar_id: str
    id: int
    login: str
    url: AnyUrl


class ProjectCard(BaseModel):
    column_name: str
    id: int
    previous_column_name: Optional[str] = None
    project_id: int
    project_url: AnyUrl
    url: AnyUrl


class ApiOverview(BaseModel):
    dependabot: Optional[List[str]] = Field(
        None, examples=[['192.168.7.15/32', '192.168.7.16/32']]
    )
    installed_version: Optional[str] = Field(None, examples=['2.21.0'])
    packages: Optional[List[str]] = Field(
        None, examples=[['13.65.0.0/16', '157.55.204.33/32', '2a01:111:f403:f90c::/62']]
    )
    verifiable_password_authentication: bool = Field(..., examples=[True])


class Actions(Enum):
    read = 'read'
    write = 'write'


class Administration(Enum):
    read = 'read'
    write = 'write'


class Checks(Enum):
    read = 'read'
    write = 'write'


class ContentReferences(Enum):
    read = 'read'
    write = 'write'


class Contents(Enum):
    read = 'read'
    write = 'write'


class Deployments(Enum):
    read = 'read'
    write = 'write'


class Environments(Enum):
    read = 'read'
    write = 'write'


class Issues(Enum):
    read = 'read'
    write = 'write'


class Members(Enum):
    read = 'read'
    write = 'write'


class Metadata(Enum):
    read = 'read'
    write = 'write'


class OrganizationAdministration(Enum):
    read = 'read'
    write = 'write'


class OrganizationHooks(Enum):
    read = 'read'
    write = 'write'


class OrganizationPackages(Enum):
    read = 'read'
    write = 'write'


class OrganizationPlan(Enum):
    read = 'read'


class OrganizationProjects(Enum):
    read = 'read'
    write = 'write'
    admin = 'admin'


class OrganizationSecrets(Enum):
    read = 'read'
    write = 'write'


class OrganizationSelfHostedRunners(Enum):
    read = 'read'
    write = 'write'


class OrganizationUserBlocking(Enum):
    read = 'read'
    write = 'write'


class Packages(Enum):
    read = 'read'
    write = 'write'


class Pages(Enum):
    read = 'read'
    write = 'write'


class PullRequests(Enum):
    read = 'read'
    write = 'write'


class RepositoryHooks(Enum):
    read = 'read'
    write = 'write'


class RepositoryProjects(Enum):
    read = 'read'
    write = 'write'
    admin = 'admin'


class SecretScanningAlerts(Enum):
    read = 'read'
    write = 'write'


class Secrets(Enum):
    read = 'read'
    write = 'write'


class SecurityEvents(Enum):
    read = 'read'
    write = 'write'


class SingleFile(Enum):
    read = 'read'
    write = 'write'


class Statuses(Enum):
    read = 'read'
    write = 'write'


class TeamDiscussions(Enum):
    read = 'read'
    write = 'write'


class VulnerabilityAlerts(Enum):
    read = 'read'


class Workflows(Enum):
    write = 'write'


class AppPermissions(BaseModel):
    actions: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.',
    )
    administration: Optional[Administration] = Field(
        None,
        description='The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.',
    )
    checks: Optional[Checks] = Field(
        None,
        description='The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.',
    )
    content_references: Optional[ContentReferences] = Field(
        None,
        description='The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.',
    )
    contents: Optional[Contents] = Field(
        None,
        description='The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.',
    )
    deployments: Optional[Deployments] = Field(
        None,
        description='The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.',
    )
    environments: Optional[Environments] = Field(
        None,
        description='The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.',
    )
    issues: Optional[Issues] = Field(
        None,
        description='The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.',
    )
    members: Optional[Members] = Field(
        None,
        description='The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.',
    )
    metadata: Optional[Metadata] = Field(
        None,
        description='The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.',
    )
    organization_administration: Optional[OrganizationAdministration] = Field(
        None,
        description='The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.',
    )
    organization_hooks: Optional[OrganizationHooks] = Field(
        None,
        description='The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.',
    )
    organization_packages: Optional[OrganizationPackages] = Field(
        None,
        description='The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.',
    )
    organization_plan: Optional[OrganizationPlan] = Field(
        None,
        description="The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.",
    )
    organization_projects: Optional[OrganizationProjects] = Field(
        None,
        description='The level of permission to grant the access token to manage organization projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.',
    )
    organization_secrets: Optional[OrganizationSecrets] = Field(
        None,
        description='The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.',
    )
    organization_self_hosted_runners: Optional[OrganizationSelfHostedRunners] = Field(
        None,
        description='The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.',
    )
    organization_user_blocking: Optional[OrganizationUserBlocking] = Field(
        None,
        description='The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.',
    )
    packages: Optional[Packages] = Field(
        None,
        description='The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.',
    )
    pages: Optional[Pages] = Field(
        None,
        description='The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.',
    )
    pull_requests: Optional[PullRequests] = Field(
        None,
        description='The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.',
    )
    repository_hooks: Optional[RepositoryHooks] = Field(
        None,
        description='The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.',
    )
    repository_projects: Optional[RepositoryProjects] = Field(
        None,
        description='The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.',
    )
    secret_scanning_alerts: Optional[SecretScanningAlerts] = Field(
        None,
        description='The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.',
    )
    secrets: Optional[Secrets] = Field(
        None,
        description='The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.',
    )
    security_events: Optional[SecurityEvents] = Field(
        None,
        description='The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.',
    )
    single_file: Optional[SingleFile] = Field(
        None,
        description='The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.',
    )
    statuses: Optional[Statuses] = Field(
        None,
        description='The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.',
    )
    team_discussions: Optional[TeamDiscussions] = Field(
        None,
        description='The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.',
    )
    vulnerability_alerts: Optional[VulnerabilityAlerts] = Field(
        None,
        description='The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of: `read`.',
    )
    workflows: Optional[Workflows] = Field(
        None,
        description='The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.',
    )


class App(BaseModel):
    client_id: str
    name: str
    url: AnyUrl


class AuthorAssociation(Enum):
    COLLABORATOR = 'COLLABORATOR'
    CONTRIBUTOR = 'CONTRIBUTOR'
    FIRST_TIMER = 'FIRST_TIMER'
    FIRST_TIME_CONTRIBUTOR = 'FIRST_TIME_CONTRIBUTOR'
    MANNEQUIN = 'MANNEQUIN'
    MEMBER = 'MEMBER'
    NONE = 'NONE'
    OWNER = 'OWNER'


class Files(BaseModel):
    filename: Optional[str] = None
    language: Optional[str] = None
    raw_url: Optional[str] = None
    size: Optional[int] = None
    type: Optional[str] = None


class BasicError(BaseModel):
    documentation_url: Optional[str] = None
    message: Optional[str] = None
    status: Optional[str] = None
    url: Optional[str] = None


class Blob(BaseModel):
    content: str
    encoding: str
    highlighted_content: Optional[str] = None
    node_id: str
    sha: str
    size: int
    url: AnyUrl


class AllowDeletions(BaseModel):
    enabled: Optional[bool] = None


class AllowForcePushes(BaseModel):
    enabled: Optional[bool] = None


class RequiredConversationResolution(BaseModel):
    enabled: Optional[bool] = None


class RequiredLinearHistory(BaseModel):
    enabled: Optional[bool] = None


class RequiredSignatures(BaseModel):
    enabled: bool = Field(..., examples=[True])
    url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures'
        ],
    )


class RequiredStatusChecks(BaseModel):
    contexts: List[str]
    contexts_url: Optional[str] = None
    enforcement_level: Optional[str] = None
    strict: Optional[bool] = None
    url: Optional[str] = None


class Owner(BaseModel):
    avatar_url: Optional[str] = None
    description: Optional[str] = None
    events_url: Optional[str] = None
    followers_url: Optional[str] = Field(
        None,
        examples=['"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"'],
    )
    following_url: Optional[str] = Field(
        None,
        examples=[
            '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"'
        ],
    )
    gists_url: Optional[str] = Field(
        None,
        examples=[
            '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"'
        ],
    )
    gravatar_id: Optional[str] = Field(None, examples=['""'])
    hooks_url: Optional[str] = None
    html_url: Optional[str] = Field(
        None, examples=['"https://github.com/testorg-ea8ec76d71c3af4b"']
    )
    id: Optional[int] = None
    issues_url: Optional[str] = None
    login: Optional[str] = None
    members_url: Optional[str] = None
    node_id: Optional[str] = None
    organizations_url: Optional[str] = Field(
        None, examples=['"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"']
    )
    public_members_url: Optional[str] = None
    received_events_url: Optional[str] = Field(
        None,
        examples=[
            '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"'
        ],
    )
    repos_url: Optional[str] = None
    site_admin: Optional[bool] = Field(None, examples=[False])
    starred_url: Optional[str] = Field(
        None,
        examples=[
            '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"'
        ],
    )
    subscriptions_url: Optional[str] = Field(
        None,
        examples=[
            '"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"'
        ],
    )
    type: Optional[str] = Field(None, examples=['"Organization"'])
    url: Optional[str] = None


class Permissions(BaseModel):
    contents: Optional[str] = None
    issues: Optional[str] = None
    metadata: Optional[str] = None
    single_file: Optional[str] = None


class App2(BaseModel):
    created_at: Optional[str] = None
    description: Optional[str] = None
    events: Optional[List[str]] = None
    external_url: Optional[str] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    name: Optional[str] = None
    node_id: Optional[str] = None
    owner: Optional[Owner] = None
    permissions: Optional[Permissions] = None
    slug: Optional[str] = None
    updated_at: Optional[str] = None


class Team(BaseModel):
    description: Optional[str] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    members_url: Optional[str] = None
    name: Optional[str] = None
    node_id: Optional[str] = None
    parent: Optional[str] = None
    permission: Optional[str] = None
    privacy: Optional[str] = None
    repositories_url: Optional[str] = None
    slug: Optional[str] = None
    url: Optional[str] = None


class User(BaseModel):
    avatar_url: Optional[str] = None
    events_url: Optional[str] = None
    followers_url: Optional[str] = None
    following_url: Optional[str] = None
    gists_url: Optional[str] = None
    gravatar_id: Optional[str] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    login: Optional[str] = None
    node_id: Optional[str] = None
    organizations_url: Optional[str] = None
    received_events_url: Optional[str] = None
    repos_url: Optional[str] = None
    site_admin: Optional[bool] = None
    starred_url: Optional[str] = None
    subscriptions_url: Optional[str] = None
    type: Optional[str] = None
    url: Optional[str] = None


class BranchRestrictionPolicy(BaseModel):
    apps: List[App2]
    apps_url: AnyUrl
    teams: List[Team]
    teams_url: AnyUrl
    url: AnyUrl
    users: List[User]
    users_url: AnyUrl


class Commit(BaseModel):
    sha: str
    url: str


class BranchShort(BaseModel):
    commit: Commit
    name: str
    protected: bool


class FieldLinks(BaseModel):
    html: str
    self: AnyUrl


class CheckAnnotation(BaseModel):
    annotation_level: str = Field(..., examples=['warning'])
    blob_href: str
    end_column: int = Field(..., examples=[10])
    end_line: int = Field(..., examples=[2])
    message: str = Field(..., examples=["Check your spelling for 'banaas'."])
    path: str = Field(..., examples=['README.md'])
    raw_details: str = Field(..., examples=["Do you mean 'bananas' or 'banana'?"])
    start_column: int = Field(..., examples=[5])
    start_line: int = Field(..., examples=[2])
    title: str = Field(..., examples=['Spell Checker'])


class CheckSuite(BaseModel):
    id: int


class Conclusion(Enum):
    success = 'success'
    failure = 'failure'
    neutral = 'neutral'
    cancelled = 'cancelled'
    skipped = 'skipped'
    timed_out = 'timed_out'
    action_required = 'action_required'


class Output(BaseModel):
    annotations_count: int
    annotations_url: AnyUrl
    summary: str
    text: str
    title: str


class Status(Enum):
    queued = 'queued'
    in_progress = 'in_progress'
    completed = 'completed'


class AutoTriggerCheck(BaseModel):
    app_id: int
    setting: bool


class Preferences(BaseModel):
    auto_trigger_checks: Optional[List[AutoTriggerCheck]] = None


class CodeFrequencyStat(RootModel[List[int]]):
    root: List[int] = Field(
        ..., description='Code Frequency Stat', title='Code Frequency Stat'
    )


class CodeOfConduct(BaseModel):
    body: Optional[str] = Field(
        None,
        examples=[
            "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        ],
    )
    html_url: AnyUrl
    key: str = Field(..., examples=['contributor_covenant'])
    name: str = Field(..., examples=['Contributor Covenant'])
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/codes_of_conduct/contributor_covenant']
    )


class CodeOfConductSimple(BaseModel):
    html_url: AnyUrl = Field(
        ..., examples=['https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md']
    )
    key: str = Field(..., examples=['citizen_code_of_conduct'])
    name: str = Field(..., examples=['Citizen Code of Conduct'])
    url: AnyUrl = Field(
        ...,
        examples=['https://api.github.com/repos/github/docs/community/code_of_conduct'],
    )


class Permissions1(BaseModel):
    admin: bool
    maintain: Optional[bool] = None
    pull: bool
    push: bool
    triage: Optional[bool] = None


class Collaborator(BaseModel):
    avatar_url: AnyUrl = Field(
        ..., examples=['https://github.com/images/error/octocat_happy.gif']
    )
    email: Optional[str] = None
    events_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/events{/privacy}']
    )
    followers_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/followers']
    )
    following_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/following{/other_user}']
    )
    gists_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/gists{/gist_id}']
    )
    gravatar_id: str = Field(..., examples=['41d064eb2195891e12d0413f63227ea7'])
    html_url: AnyUrl = Field(..., examples=['https://github.com/octocat'])
    id: int = Field(..., examples=[1])
    login: str = Field(..., examples=['octocat'])
    name: Optional[str] = None
    node_id: str = Field(..., examples=['MDQ6VXNlcjE='])
    organizations_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/orgs']
    )
    permissions: Optional[Permissions1] = None
    received_events_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/received_events']
    )
    repos_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/repos']
    )
    site_admin: bool
    starred_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/starred{/owner}{/repo}']
    )
    subscriptions_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/subscriptions']
    )
    type: str = Field(..., examples=['User'])
    url: AnyUrl = Field(..., examples=['https://api.github.com/users/octocat'])


class Tree(BaseModel):
    sha: str = Field(..., examples=['827efc6d56897b048c772eb4087f854f46256132'])
    url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132'
        ],
    )


class File(BaseModel):
    additions: Optional[int] = None
    blob_url: Optional[str] = None
    changes: Optional[int] = None
    contents_url: Optional[str] = Field(
        None,
        examples=[
            '"https://api.github.com/repos/owner-3d68404b07d25daeb2d4a6bf/AAA_Public_Repo/contents/geometry.js?ref=c3956841a7cb7e8ba4a6fd923568d86958f01573"'
        ],
    )
    deletions: Optional[int] = None
    filename: Optional[str] = None
    patch: Optional[str] = None
    previous_filename: Optional[str] = Field(
        None, examples=['"subdir/before_name.txt"']
    )
    raw_url: Optional[str] = None
    sha: Optional[str] = Field(
        None, examples=['"1e8e60ce9733d5283f7836fa602b6365a66b2567"']
    )
    status: Optional[str] = None


class Parent(BaseModel):
    html_url: Optional[AnyUrl] = Field(
        None,
        examples=[
            'https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd'
        ],
    )
    sha: str = Field(..., examples=['7638417db6d59f3c431d3e1f261cc637155684cd'])
    url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd'
        ],
    )


class Stats(BaseModel):
    additions: Optional[int] = None
    deletions: Optional[int] = None
    total: Optional[int] = None


class CommitActivity(BaseModel):
    days: List[int] = Field(..., examples=[[0, 3, 26, 20, 39, 1, 0]])
    total: int = Field(..., examples=[89])
    week: int = Field(..., examples=[1336280400])


class Status2(Enum):
    diverged = 'diverged'
    ahead = 'ahead'
    behind = 'behind'
    identical = 'identical'


class Author(BaseModel):
    date: datetime
    email: str
    name: str


class Tree1(BaseModel):
    sha: str
    url: AnyUrl


class Parent1(BaseModel):
    html_url: Optional[str] = None
    sha: Optional[str] = None
    url: Optional[str] = None


class Progres(BaseModel):
    key: str
    status: str


class ConfigurationStatus(BaseModel):
    progress: Optional[List[Progres]] = None
    status: Optional[str] = None


class FieldLinks1(BaseModel):
    git: AnyUrl
    html: AnyUrl
    self: AnyUrl


class ContentDirectoryItem(BaseModel):
    field_links: FieldLinks1 = Field(..., alias='_links')
    content: Optional[str] = None
    download_url: AnyUrl
    git_url: AnyUrl
    html_url: AnyUrl
    name: str
    path: str
    sha: str
    size: int
    type: str
    url: AnyUrl


class ContentDirectory(RootModel[List[ContentDirectoryItem]]):
    root: List[ContentDirectoryItem] = Field(
        ..., description='A list of directory items', title='Content Directory'
    )


class ContentFile(BaseModel):
    field_links: FieldLinks1 = Field(..., alias='_links')
    content: str
    download_url: AnyUrl
    encoding: str
    git_url: AnyUrl
    html_url: AnyUrl
    name: str
    path: str
    sha: str
    size: int
    submodule_git_url: Optional[str] = Field(
        None, examples=['"git://example.com/defunkt/dotjs.git"']
    )
    target: Optional[str] = Field(None, examples=['"actual/actual.md"'])
    type: str
    url: AnyUrl


class ContentReferenceAttachment(BaseModel):
    body: constr(max_length=262144) = Field(
        ...,
        description='The body of the attachment',
        examples=['Body of the attachment'],
    )
    id: int = Field(..., description='The ID of the attachment', examples=[21])
    node_id: Optional[str] = Field(
        None,
        description='The node_id of the content attachment',
        examples=['MDE3OkNvbnRlbnRBdHRhY2htZW50MjE='],
    )
    title: constr(max_length=1024) = Field(
        ...,
        description='The title of the attachment',
        examples=['Title of the attachment'],
    )


class ContentSubmodule(BaseModel):
    field_links: FieldLinks1 = Field(..., alias='_links')
    download_url: AnyUrl
    git_url: AnyUrl
    html_url: AnyUrl
    name: str
    path: str
    sha: str
    size: int
    submodule_git_url: AnyUrl
    type: str
    url: AnyUrl


class ContentSymlink(BaseModel):
    field_links: FieldLinks1 = Field(..., alias='_links')
    download_url: AnyUrl
    git_url: AnyUrl
    html_url: AnyUrl
    name: str
    path: str
    sha: str
    size: int
    target: str
    type: str
    url: AnyUrl


class Entry(BaseModel):
    field_links: FieldLinks1 = Field(..., alias='_links')
    content: Optional[str] = None
    download_url: AnyUrl
    git_url: AnyUrl
    html_url: AnyUrl
    name: str
    path: str
    sha: str
    size: int
    type: str
    url: AnyUrl


class ContentTree(BaseModel):
    field_links: FieldLinks1 = Field(..., alias='_links')
    download_url: AnyUrl
    entries: Optional[List[Entry]] = None
    git_url: AnyUrl
    html_url: AnyUrl
    name: str
    path: str
    sha: str
    size: int
    type: str
    url: AnyUrl


class Contributor(BaseModel):
    avatar_url: Optional[AnyUrl] = None
    contributions: int
    email: Optional[str] = None
    events_url: Optional[str] = None
    followers_url: Optional[AnyUrl] = None
    following_url: Optional[str] = None
    gists_url: Optional[str] = None
    gravatar_id: Optional[str] = None
    html_url: Optional[AnyUrl] = None
    id: Optional[int] = None
    login: Optional[str] = None
    name: Optional[str] = None
    node_id: Optional[str] = None
    organizations_url: Optional[AnyUrl] = None
    received_events_url: Optional[AnyUrl] = None
    repos_url: Optional[AnyUrl] = None
    site_admin: Optional[bool] = None
    starred_url: Optional[str] = None
    subscriptions_url: Optional[AnyUrl] = None
    type: str
    url: Optional[AnyUrl] = None


class Week(BaseModel):
    a: Optional[int] = None
    c: Optional[int] = None
    d: Optional[int] = None
    w: Optional[int] = None


class Milestone(BaseModel):
    title: str


class DeployKey(BaseModel):
    created_at: str
    id: int
    key: str
    read_only: bool
    title: str
    url: str
    verified: bool


class State(Enum):
    error = 'error'
    failure = 'failure'
    inactive = 'inactive'
    pending = 'pending'
    success = 'success'
    queued = 'queued'
    in_progress = 'in_progress'


class Status3(Enum):
    added = 'added'
    removed = 'removed'
    modified = 'modified'
    renamed = 'renamed'
    copied = 'copied'
    changed = 'changed'
    unchanged = 'unchanged'


class DiffEntry(BaseModel):
    additions: int = Field(..., examples=[103])
    blob_url: AnyUrl = Field(
        ...,
        examples=[
            'https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt'
        ],
    )
    changes: int = Field(..., examples=[124])
    contents_url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e'
        ],
    )
    deletions: int = Field(..., examples=[21])
    filename: str = Field(..., examples=['file1.txt'])
    patch: Optional[str] = Field(
        None,
        examples=['@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test'],
    )
    previous_filename: Optional[str] = Field(None, examples=['file.txt'])
    raw_url: AnyUrl = Field(
        ...,
        examples=[
            'https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt'
        ],
    )
    sha: str = Field(..., examples=['bbcd538c8e72b8c175046e27cc8f907076331401'])
    status: Status3 = Field(..., examples=['added'])


class Email(BaseModel):
    email: EmailStr = Field(..., examples=['octocat@github.com'])
    primary: bool = Field(..., examples=[True])
    verified: bool = Field(..., examples=[True])
    visibility: str = Field(..., examples=['public'])


class Enterprise(BaseModel):
    avatar_url: AnyUrl
    created_at: datetime = Field(..., examples=['2019-01-26T19:01:12Z'])
    description: Optional[str] = Field(
        None, description='A short description of the enterprise.'
    )
    html_url: AnyUrl = Field(
        ..., examples=['https://github.com/enterprises/octo-business']
    )
    id: int = Field(
        ..., description='Unique identifier of the enterprise', examples=[42]
    )
    name: str = Field(
        ..., description='The name of the enterprise.', examples=['Octo Business']
    )
    node_id: str = Field(..., examples=['MDEwOlJlcG9zaXRvcnkxMjk2MjY5'])
    slug: str = Field(
        ...,
        description='The slug url identifier for the enterprise.',
        examples=['octo-business'],
    )
    updated_at: datetime = Field(..., examples=['2019-01-26T19:14:43Z'])
    website_url: Optional[AnyUrl] = Field(
        None, description="The enterprise's website URL."
    )


class EnterpriseCommentOverview(BaseModel):
    total_commit_comments: int
    total_gist_comments: int
    total_issue_comments: int
    total_pull_request_comments: int


class EnterpriseGistOverview(BaseModel):
    private_gists: int
    public_gists: int
    total_gists: int


class EnterpriseHookOverview(BaseModel):
    active_hooks: int
    inactive_hooks: int
    total_hooks: int


class EnterpriseIssueOverview(BaseModel):
    closed_issues: int
    open_issues: int
    total_issues: int


class EnterpriseMilestoneOverview(BaseModel):
    closed_milestones: int
    open_milestones: int
    total_milestones: int


class EnterpriseOrganizationOverview(BaseModel):
    disabled_orgs: int
    total_orgs: int
    total_team_members: int
    total_teams: int


class EnterprisePageOverview(BaseModel):
    total_pages: int


class EnterprisePullRequestOverview(BaseModel):
    mergeable_pulls: int
    merged_pulls: int
    total_pulls: int
    unmergeable_pulls: int


class EnterpriseRepositoryOverview(BaseModel):
    fork_repos: int
    org_repos: int
    root_repos: int
    total_pushes: int
    total_repos: int
    total_wikis: int


class Avatar(BaseModel):
    enabled: Optional[bool] = None
    uri: Optional[str] = None


class Cas(BaseModel):
    url: Optional[str] = None


class Collectd(BaseModel):
    enabled: Optional[bool] = None
    encryption: Optional[str] = None
    password: Optional[str] = None
    port: Optional[int] = None
    server: Optional[str] = None
    username: Optional[str] = None


class Customer(BaseModel):
    email: Optional[str] = None
    name: Optional[str] = None
    public_key_data: Optional[str] = None
    secret_key_data: Optional[str] = None
    uuid: Optional[str] = None


class GithubOauth(BaseModel):
    client_id: Optional[str] = None
    client_secret: Optional[str] = None
    organization_name: Optional[str] = None
    organization_team: Optional[str] = None


class GithubSsl(BaseModel):
    cert: Optional[str] = None
    enabled: Optional[bool] = None
    key: Optional[str] = None


class Profile(BaseModel):
    key: Optional[str] = None
    mail: Optional[str] = None
    name: Optional[str] = None
    uid: Optional[str] = None


class Reconciliation(BaseModel):
    org: Optional[str] = None
    user: Optional[str] = None


class Ldap(BaseModel):
    admin_group: Optional[str] = None
    base: Optional[List] = None
    bind_dn: Optional[str] = None
    host: Optional[str] = None
    method: Optional[str] = None
    password: Optional[str] = None
    port: Optional[int] = None
    posix_support: Optional[bool] = None
    profile: Optional[Profile] = None
    reconciliation: Optional[Reconciliation] = None
    recursive_group_search: Optional[bool] = None
    search_strategy: Optional[str] = None
    sync_enabled: Optional[bool] = None
    team_sync_interval: Optional[int] = None
    uid: Optional[str] = None
    user_groups: Optional[List] = None
    user_sync_emails: Optional[bool] = None
    user_sync_interval: Optional[int] = None
    user_sync_keys: Optional[bool] = None
    virtual_attribute_enabled: Optional[bool] = None


class License(BaseModel):
    cluster_support: Optional[bool] = None
    evaluation: Optional[bool] = None
    expire_at: Optional[str] = None
    perpetual: Optional[bool] = None
    seats: Optional[int] = None
    ssh_allowed: Optional[bool] = None
    support_key: Optional[str] = None
    unlimited_seating: Optional[bool] = None


class Mapping(BaseModel):
    basemap: Optional[str] = None
    enabled: Optional[bool] = None
    tileserver: Optional[str] = None
    token: Optional[str] = None


class Ntp(BaseModel):
    primary_server: Optional[str] = None
    secondary_server: Optional[str] = None


class Pages1(BaseModel):
    enabled: Optional[bool] = None


class Saml(BaseModel):
    certificate: Optional[str] = None
    certificate_path: Optional[str] = None
    disable_admin_demote: Optional[bool] = None
    idp_initiated_sso: Optional[bool] = None
    issuer: Optional[str] = None
    sso_url: Optional[str] = None


class Smtp(BaseModel):
    address: Optional[str] = None
    authentication: Optional[str] = None
    discard_to_noreply_address: Optional[bool] = Field(
        None, alias='discard-to-noreply-address'
    )
    domain: Optional[str] = None
    enable_starttls_auto: Optional[bool] = None
    enabled: Optional[bool] = None
    noreply_address: Optional[str] = None
    password: Optional[str] = None
    port: Optional[str] = None
    support_address: Optional[str] = None
    support_address_type: Optional[str] = None
    user_name: Optional[str] = None
    username: Optional[str] = None


class Snmp(BaseModel):
    community: Optional[str] = None
    enabled: Optional[bool] = None


class Syslog(BaseModel):
    enabled: Optional[bool] = None
    protocol_name: Optional[str] = None
    server: Optional[str] = None


class Enterprise1(BaseModel):
    admin_password: Optional[str] = None
    assets: Optional[str] = None
    auth_mode: Optional[str] = None
    avatar: Optional[Avatar] = None
    cas: Optional[Cas] = None
    collectd: Optional[Collectd] = None
    configuration_id: Optional[int] = None
    configuration_run_count: Optional[int] = None
    customer: Optional[Customer] = None
    expire_sessions: Optional[bool] = None
    github_hostname: Optional[str] = None
    github_oauth: Optional[GithubOauth] = None
    github_ssl: Optional[GithubSsl] = None
    http_proxy: Optional[str] = None
    identicons_host: Optional[str] = None
    ldap: Optional[Ldap] = None
    license: Optional[License] = None
    load_balancer: Optional[str] = None
    mapping: Optional[Mapping] = None
    ntp: Optional[Ntp] = None
    pages: Optional[Pages1] = None
    private_mode: Optional[bool] = None
    public_pages: Optional[bool] = None
    saml: Optional[Saml] = None
    signup_enabled: Optional[bool] = None
    smtp: Optional[Smtp] = None
    snmp: Optional[Snmp] = None
    subdomain_isolation: Optional[bool] = None
    syslog: Optional[Syslog] = None
    timezone: Optional[str] = None


class EnterpriseSettings(BaseModel):
    enterprise: Optional[Enterprise1] = None
    run_list: Optional[List[str]] = None


class EnterpriseUserOverview(BaseModel):
    admin_users: int
    suspended_users: int
    total_users: int


class Page(BaseModel):
    action: Optional[str] = None
    html_url: Optional[str] = None
    page_name: Optional[str] = None
    sha: Optional[str] = None
    summary: Optional[str] = None
    title: Optional[str] = None


class Repo(BaseModel):
    id: int
    name: str
    url: AnyUrl


class Author1(BaseModel):
    date: Optional[str] = None
    email: Optional[str] = None
    name: Optional[str] = None


class Committer(BaseModel):
    date: Optional[str] = None
    email: Optional[str] = None
    name: Optional[str] = None


class Tree2(BaseModel):
    sha: Optional[str] = None
    url: Optional[str] = None


class Verification(BaseModel):
    payload: Optional[str] = None
    reason: Optional[str] = None
    signature: Optional[str] = None
    verified: Optional[bool] = None


class Commit3(BaseModel):
    author: Optional[Author1] = None
    committer: Optional[Committer] = None
    html_url: Optional[str] = None
    message: Optional[str] = None
    node_id: Optional[str] = None
    parents: Optional[List[Parent1]] = None
    sha: Optional[str] = None
    tree: Optional[Tree2] = None
    url: Optional[str] = None
    verification: Optional[Verification] = None


class FieldLinks8(BaseModel):
    git: Optional[str] = None
    html: Optional[str] = None
    self: Optional[str] = None


class Content(BaseModel):
    field_links: Optional[FieldLinks8] = Field(None, alias='_links')
    download_url: Optional[str] = None
    git_url: Optional[str] = None
    html_url: Optional[str] = None
    name: Optional[str] = None
    path: Optional[str] = None
    sha: Optional[str] = None
    size: Optional[int] = None
    type: Optional[str] = None
    url: Optional[str] = None


class FileCommit(BaseModel):
    commit: Commit3
    content: Content


class ChangeStatus(BaseModel):
    additions: Optional[int] = None
    deletions: Optional[int] = None
    total: Optional[int] = None


class Files1(BaseModel):
    content: Optional[str] = None
    filename: Optional[str] = None
    language: Optional[str] = None
    raw_url: Optional[str] = None
    size: Optional[int] = None
    truncated: Optional[bool] = None
    type: Optional[str] = None


class Files2(BaseModel):
    filename: Optional[str] = None
    language: Optional[str] = None
    raw_url: Optional[str] = None
    size: Optional[int] = None
    type: Optional[str] = None


class Author2(BaseModel):
    date: datetime = Field(
        ...,
        description='Timestamp of the commit',
        examples=['2014-08-09T08:02:04+12:00'],
    )
    email: str = Field(
        ...,
        description='Git email address of the user',
        examples=['monalisa.octocat@example.com'],
    )
    name: str = Field(
        ..., description='Name of the git user', examples=['Monalisa Octocat']
    )


class Committer1(BaseModel):
    date: datetime = Field(
        ...,
        description='Timestamp of the commit',
        examples=['2014-08-09T08:02:04+12:00'],
    )
    email: str = Field(
        ...,
        description='Git email address of the user',
        examples=['monalisa.octocat@example.com'],
    )
    name: str = Field(
        ..., description='Name of the git user', examples=['Monalisa Octocat']
    )


class Parent3(BaseModel):
    html_url: AnyUrl
    sha: str = Field(
        ...,
        description='SHA for the commit',
        examples=['7638417db6d59f3c431d3e1f261cc637155684cd'],
    )
    url: AnyUrl


class Tree3(BaseModel):
    sha: str = Field(
        ...,
        description='SHA for the commit',
        examples=['7638417db6d59f3c431d3e1f261cc637155684cd'],
    )
    url: AnyUrl


class Verification2(BaseModel):
    payload: str
    reason: str
    signature: str
    verified: bool


class GitCommit(BaseModel):
    author: Author2 = Field(..., description='Identifying information for the git-user')
    committer: Committer1 = Field(
        ..., description='Identifying information for the git-user'
    )
    html_url: AnyUrl
    message: str = Field(
        ...,
        description='Message describing the purpose of the commit',
        examples=['Fix #42'],
    )
    node_id: str
    parents: List[Parent3]
    sha: str = Field(
        ...,
        description='SHA for the commit',
        examples=['7638417db6d59f3c431d3e1f261cc637155684cd'],
    )
    tree: Tree3
    url: AnyUrl
    verification: Verification2


class Object(BaseModel):
    sha: constr(min_length=40, max_length=40) = Field(
        ...,
        description='SHA for the reference',
        examples=['7638417db6d59f3c431d3e1f261cc637155684cd'],
    )
    type: str
    url: AnyUrl


class GitRef(BaseModel):
    node_id: str
    object: Object
    ref: str
    url: AnyUrl


class Object1(BaseModel):
    sha: str
    type: str
    url: AnyUrl


class Tagger(BaseModel):
    date: str
    email: str
    name: str


class TreeItem(BaseModel):
    mode: Optional[str] = Field(None, examples=['040000'])
    path: Optional[str] = Field(None, examples=['test/file.rb'])
    sha: Optional[str] = Field(
        None, examples=['23f6827669e43831def8a7ad935069c8bd418261']
    )
    size: Optional[int] = Field(None, examples=[12])
    type: Optional[str] = Field(None, examples=['tree'])
    url: Optional[str] = Field(
        None,
        examples=[
            'https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261'
        ],
    )


class GitTree(BaseModel):
    sha: str
    tree: List[TreeItem] = Field(
        ...,
        description='Objects specifying a tree structure',
        examples=[
            [
                {
                    'mode': '100644',
                    'path': 'file.rb',
                    'properties': {
                        'mode': {'type': 'string'},
                        'path': {'type': 'string'},
                        'sha': {'type': 'string'},
                        'size': {'type': 'integer'},
                        'type': {'type': 'string'},
                        'url': {'type': 'string'},
                    },
                    'required': ['path', 'mode', 'type', 'sha', 'url', 'size'],
                    'sha': '44b4fc6d56897b048c772eb4087f854f46256132',
                    'size': 30,
                    'type': 'blob',
                    'url': 'https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132',
                }
            ]
        ],
    )
    truncated: bool
    url: AnyUrl


class GitignoreTemplate(BaseModel):
    name: str = Field(..., examples=['C'])
    source: str = Field(
        ...,
        examples=[
            '# Object files\n*.o\n\n# Libraries\n*.lib\n*.a\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n'
        ],
    )


class Config(BaseModel):
    content_type: Optional[str] = None
    insecure_ssl: Optional[str] = None
    secret: Optional[str] = None
    url: Optional[str] = None


class GlobalHook(BaseModel):
    active: Optional[bool] = None
    config: Optional[Config] = None
    created_at: Optional[str] = None
    events: Optional[List[str]] = None
    id: Optional[int] = None
    name: Optional[str] = None
    ping_url: Optional[str] = None
    type: Optional[str] = None
    updated_at: Optional[str] = None
    url: Optional[str] = None


class Config1(BaseModel):
    content_type: Optional[str] = None
    insecure_ssl: Optional[str] = None
    url: Optional[str] = None


class GlobalHook2(BaseModel):
    active: Optional[bool] = None
    config: Optional[Config1] = None
    created_at: Optional[str] = None
    events: Optional[List[str]] = None
    id: Optional[int] = None
    name: Optional[str] = None
    ping_url: Optional[str] = None
    type: Optional[str] = None
    updated_at: Optional[str] = None
    url: Optional[str] = None


class Email1(BaseModel):
    email: Optional[str] = None
    verified: Optional[bool] = None


class Subkey(BaseModel):
    can_certify: Optional[bool] = None
    can_encrypt_comms: Optional[bool] = None
    can_encrypt_storage: Optional[bool] = None
    can_sign: Optional[bool] = None
    created_at: Optional[str] = None
    emails: Optional[List] = None
    expires_at: Optional[str] = None
    id: Optional[int] = None
    key_id: Optional[str] = None
    primary_key_id: Optional[int] = None
    public_key: Optional[str] = None
    raw_key: Optional[str] = None
    subkeys: Optional[List] = None


class GpgKey(BaseModel):
    can_certify: bool = Field(..., examples=[True])
    can_encrypt_comms: bool
    can_encrypt_storage: bool
    can_sign: bool = Field(..., examples=[True])
    created_at: datetime = Field(..., examples=['2016-03-24T11:31:04-06:00'])
    emails: List[Email1] = Field(
        ...,
        examples=[[{'email': 'mastahyeti@users.noreply.github.com', 'verified': True}]],
    )
    expires_at: datetime
    id: int = Field(..., examples=[3])
    key_id: str = Field(..., examples=['3262EFF25BA0D270'])
    primary_key_id: int
    public_key: str = Field(..., examples=['xsBNBFayYZ...'])
    raw_key: str
    subkeys: List[Subkey] = Field(
        ...,
        examples=[
            [
                {
                    'can_certify': False,
                    'can_encrypt_comms': True,
                    'can_encrypt_storage': True,
                    'can_sign': False,
                    'created_at': '2016-03-24T11:31:04-06:00',
                    'emails': [],
                    'expires_at': None,
                    'id': 4,
                    'key_id': '4A595D4C72EE49C7',
                    'primary_key_id': 3,
                    'public_key': 'zsBNBFayYZ...',
                    'subkeys': [],
                }
            ]
        ],
    )


class HookResponse(BaseModel):
    code: int
    message: str
    status: str


class Context(BaseModel):
    message: str
    octicon: str


class Hovercard(BaseModel):
    contexts: List[Context]


class Permissions3(BaseModel):
    checks: Optional[str] = None
    contents: Optional[str] = None
    deployments: Optional[str] = None
    issues: Optional[str] = Field(None, examples=['"read"'])
    metadata: Optional[str] = None
    organization_administration: Optional[str] = Field(None, examples=['"read"'])
    pull_requests: Optional[str] = None
    statuses: Optional[str] = None


class RepositorySelection(Enum):
    all = 'all'
    selected = 'selected'


class Permissions4(BaseModel):
    checks: Optional[str] = None
    contents: Optional[str] = None
    deployments: Optional[str] = None
    issues: Optional[str] = None
    metadata: Optional[str] = None


class Labels(BaseModel):
    color: Optional[str] = None
    default: Optional[bool] = None
    description: Optional[str] = None
    id: Optional[int] = None
    name: Optional[str] = None
    node_id: Optional[str] = None
    url: Optional[AnyUrl] = None


class PullRequest(BaseModel):
    diff_url: AnyUrl
    html_url: AnyUrl
    merged_at: Optional[datetime] = None
    patch_url: AnyUrl
    url: AnyUrl


class IssueEventDismissedReview(BaseModel):
    dismissal_commit_id: Optional[str] = None
    dismissal_message: str
    review_id: int
    state: str


class IssueEventLabel(BaseModel):
    color: str
    name: str


class IssueEventMilestone(BaseModel):
    title: str


class IssueEventProjectCard(BaseModel):
    column_name: str
    id: int
    previous_column_name: Optional[str] = None
    project_id: int
    project_url: AnyUrl
    url: AnyUrl


class IssueEventRename(BaseModel):
    from_: str = Field(..., alias='from')
    to: str


class Label(BaseModel):
    color: Optional[str] = None
    default: Optional[bool] = None
    description: Optional[str] = None
    id: Optional[int] = None
    name: Optional[str] = None
    node_id: Optional[str] = None
    url: Optional[str] = None


class Key(BaseModel):
    created_at: datetime
    id: int
    key: str
    read_only: bool
    title: str
    url: str
    verified: bool


class KeySimple(BaseModel):
    id: int
    key: str


class LabelModel(BaseModel):
    color: str = Field(
        ...,
        description='6-character hex code, without the leading #, identifying the color',
        examples=['FFFFFF'],
    )
    default: bool = Field(..., examples=[True])
    description: str = Field(..., examples=["Something isn't working"])
    id: int = Field(..., examples=[208045946])
    name: str = Field(..., description='The name of the label.', examples=['bug'])
    node_id: str = Field(..., examples=['MDU6TGFiZWwyMDgwNDU5NDY='])
    url: AnyUrl = Field(
        ...,
        description='URL for the label',
        examples=['https://api.github.com/repositories/42/labels/bug'],
    )


class Label1(BaseModel):
    color: str
    name: str


class Language(RootModel[Optional[Dict[str, int]]]):
    root: Optional[Dict[str, int]] = None


class LdapMappingTeam(BaseModel):
    description: Optional[str] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    ldap_dn: Optional[str] = None
    members_url: Optional[str] = None
    name: Optional[str] = None
    node_id: Optional[str] = None
    parent: Optional[Any] = None
    permission: Optional[str] = None
    privacy: Optional[str] = None
    repositories_url: Optional[str] = None
    slug: Optional[str] = None
    url: Optional[str] = None


class Plan(BaseModel):
    collaborators: int
    name: str
    private_repos: int
    space: int


class LdapMappingUser(BaseModel):
    avatar_url: AnyUrl = Field(
        ..., examples=['https://github.com/images/error/octocat_happy.gif']
    )
    bio: str = Field(..., examples=['There once was...'])
    blog: str = Field(..., examples=['https://github.com/blog'])
    business_plus: Optional[bool] = None
    collaborators: int = Field(..., examples=[8])
    company: str = Field(..., examples=['GitHub'])
    created_at: datetime = Field(..., examples=['2008-01-14T04:33:35Z'])
    disk_usage: int = Field(..., examples=[10000])
    email: EmailStr = Field(..., examples=['octocat@github.com'])
    events_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/events{/privacy}']
    )
    followers: int = Field(..., examples=[20])
    followers_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/followers']
    )
    following: int = Field(..., examples=[0])
    following_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/following{/other_user}']
    )
    gists_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/gists{/gist_id}']
    )
    gravatar_id: str = Field(..., examples=['41d064eb2195891e12d0413f63227ea7'])
    hireable: bool
    html_url: AnyUrl = Field(..., examples=['https://github.com/octocat'])
    id: int = Field(..., examples=[1])
    ldap_dn: Optional[str] = None
    location: str = Field(..., examples=['San Francisco'])
    login: str = Field(..., examples=['octocat'])
    name: str = Field(..., examples=['monalisa octocat'])
    node_id: str = Field(..., examples=['MDQ6VXNlcjE='])
    organizations_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/orgs']
    )
    owned_private_repos: int = Field(..., examples=[100])
    plan: Optional[Plan] = None
    private_gists: int = Field(..., examples=[81])
    public_gists: int = Field(..., examples=[1])
    public_repos: int = Field(..., examples=[2])
    received_events_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/received_events']
    )
    repos_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/repos']
    )
    site_admin: bool
    starred_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/starred{/owner}{/repo}']
    )
    subscriptions_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/subscriptions']
    )
    suspended_at: Optional[datetime] = None
    total_private_repos: int = Field(..., examples=[100])
    twitter_username: Optional[str] = Field(None, examples=['monalisa'])
    two_factor_authentication: bool = Field(..., examples=[True])
    type: str = Field(..., examples=['User'])
    updated_at: datetime = Field(..., examples=['2008-01-14T04:33:35Z'])
    url: AnyUrl = Field(..., examples=['https://api.github.com/users/octocat'])


class License1(BaseModel):
    body: str = Field(
        ...,
        examples=[
            '\n\nThe MIT License (MIT)\n\nCopyright (c) [year] [fullname]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n'
        ],
    )
    conditions: List[str] = Field(..., examples=[['include-copyright']])
    description: str = Field(
        ...,
        examples=[
            'A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty.'
        ],
    )
    featured: bool = Field(..., examples=[True])
    html_url: AnyUrl = Field(..., examples=['http://choosealicense.com/licenses/mit/'])
    implementation: str = Field(
        ...,
        examples=[
            'Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders.'
        ],
    )
    key: str = Field(..., examples=['mit'])
    limitations: List[str] = Field(..., examples=[['no-liability']])
    name: str = Field(..., examples=['MIT License'])
    node_id: str = Field(..., examples=['MDc6TGljZW5zZW1pdA=='])
    permissions: List[str] = Field(
        ...,
        examples=[
            [
                'commercial-use',
                'modifications',
                'distribution',
                'sublicense',
                'private-use',
            ]
        ],
    )
    spdx_id: str = Field(..., examples=['MIT'])
    url: AnyUrl = Field(..., examples=['https://api.github.com/licenses/mit'])


class FieldLinks9(BaseModel):
    git: AnyUrl
    html: AnyUrl
    self: AnyUrl


class LicenseInfo(BaseModel):
    days_until_expiration: Optional[int] = None
    expire_at: Optional[str] = None
    kind: Optional[str] = None
    seats: Optional[Union[str, int]] = None
    seats_available: Optional[Union[str, int]] = None
    seats_used: Optional[int] = None


class LicenseSimple(BaseModel):
    html_url: Optional[AnyUrl] = None
    key: str = Field(..., examples=['mit'])
    name: str = Field(..., examples=['MIT License'])
    node_id: str = Field(..., examples=['MDc6TGljZW5zZW1pdA=='])
    spdx_id: str = Field(..., examples=['MIT'])
    url: AnyUrl = Field(..., examples=['https://api.github.com/licenses/mit'])


class Link(BaseModel):
    href: str


class LinkWithType(BaseModel):
    href: str
    type: str


class ConnectionService(BaseModel):
    name: str
    number: int


class MaintenanceStatus(BaseModel):
    connection_services: Optional[List[ConnectionService]] = None
    scheduled_time: Optional[str] = None
    status: Optional[str] = None


class State1(Enum):
    open = 'open'
    closed = 'closed'


class License2(BaseModel):
    key: Optional[str] = None
    name: Optional[str] = None
    node_id: Optional[str] = None
    spdx_id: Optional[str] = None
    url: Optional[str] = None


class Permissions5(BaseModel):
    admin: Optional[bool] = None
    maintain: Optional[bool] = None
    pull: Optional[bool] = None
    push: Optional[bool] = None
    triage: Optional[bool] = None


class App3(BaseModel):
    client_id: str
    name: str
    url: AnyUrl


class NullableGitUser(BaseModel):
    date: Optional[str] = Field(None, examples=['"2007-10-29T02:42:39.000-07:00"'])
    email: Optional[str] = Field(None, examples=['"chris@ozmm.org"'])
    name: Optional[str] = Field(None, examples=['"Chris Wanstrath"'])


class Permissions6(BaseModel):
    checks: Optional[str] = None
    contents: Optional[str] = None
    deployments: Optional[str] = None
    issues: Optional[str] = None
    metadata: Optional[str] = None


class NullableLicenseSimple(BaseModel):
    html_url: Optional[AnyUrl] = None
    key: str = Field(..., examples=['mit'])
    name: str = Field(..., examples=['MIT License'])
    node_id: str = Field(..., examples=['MDc6TGljZW5zZW1pdA=='])
    spdx_id: str = Field(..., examples=['MIT'])
    url: AnyUrl = Field(..., examples=['https://api.github.com/licenses/mit'])


class Permissions7(BaseModel):
    admin: bool
    maintain: Optional[bool] = None
    pull: bool
    push: bool
    triage: Optional[bool] = None


class Owner1(BaseModel):
    avatar_url: Optional[str] = None
    events_url: Optional[str] = None
    followers_url: Optional[str] = None
    following_url: Optional[str] = None
    gists_url: Optional[str] = None
    gravatar_id: Optional[str] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    login: Optional[str] = None
    node_id: Optional[str] = None
    organizations_url: Optional[str] = None
    received_events_url: Optional[str] = None
    repos_url: Optional[str] = None
    site_admin: Optional[bool] = None
    starred_url: Optional[str] = None
    subscriptions_url: Optional[str] = None
    type: Optional[str] = None
    url: Optional[str] = None


class Permissions8(BaseModel):
    admin: Optional[bool] = None
    maintain: Optional[bool] = None
    pull: Optional[bool] = None
    push: Optional[bool] = None
    triage: Optional[bool] = None


class TemplateRepository(BaseModel):
    allow_merge_commit: Optional[bool] = None
    allow_rebase_merge: Optional[bool] = None
    allow_squash_merge: Optional[bool] = None
    anonymous_access_enabled: Optional[bool] = None
    archive_url: Optional[str] = None
    archived: Optional[bool] = None
    assignees_url: Optional[str] = None
    blobs_url: Optional[str] = None
    branches_url: Optional[str] = None
    clone_url: Optional[str] = None
    collaborators_url: Optional[str] = None
    comments_url: Optional[str] = None
    commits_url: Optional[str] = None
    compare_url: Optional[str] = None
    contents_url: Optional[str] = None
    contributors_url: Optional[str] = None
    created_at: Optional[str] = None
    default_branch: Optional[str] = None
    delete_branch_on_merge: Optional[bool] = None
    deployments_url: Optional[str] = None
    description: Optional[str] = None
    disabled: Optional[bool] = None
    downloads_url: Optional[str] = None
    events_url: Optional[str] = None
    fork: Optional[bool] = None
    forks_count: Optional[int] = None
    forks_url: Optional[str] = None
    full_name: Optional[str] = None
    git_commits_url: Optional[str] = None
    git_refs_url: Optional[str] = None
    git_tags_url: Optional[str] = None
    git_url: Optional[str] = None
    has_downloads: Optional[bool] = None
    has_issues: Optional[bool] = None
    has_pages: Optional[bool] = None
    has_projects: Optional[bool] = None
    has_wiki: Optional[bool] = None
    homepage: Optional[str] = None
    hooks_url: Optional[str] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    is_template: Optional[bool] = None
    issue_comment_url: Optional[str] = None
    issue_events_url: Optional[str] = None
    issues_url: Optional[str] = None
    keys_url: Optional[str] = None
    labels_url: Optional[str] = None
    language: Optional[str] = None
    languages_url: Optional[str] = None
    merges_url: Optional[str] = None
    milestones_url: Optional[str] = None
    mirror_url: Optional[str] = None
    name: Optional[str] = None
    network_count: Optional[int] = None
    node_id: Optional[str] = None
    notifications_url: Optional[str] = None
    open_issues_count: Optional[int] = None
    owner: Optional[Owner1] = None
    permissions: Optional[Permissions8] = None
    private: Optional[bool] = None
    pulls_url: Optional[str] = None
    pushed_at: Optional[str] = None
    releases_url: Optional[str] = None
    size: Optional[int] = None
    ssh_url: Optional[str] = None
    stargazers_count: Optional[int] = None
    stargazers_url: Optional[str] = None
    statuses_url: Optional[str] = None
    subscribers_count: Optional[int] = None
    subscribers_url: Optional[str] = None
    subscription_url: Optional[str] = None
    svn_url: Optional[str] = None
    tags_url: Optional[str] = None
    teams_url: Optional[str] = None
    topics: Optional[List[str]] = None
    trees_url: Optional[str] = None
    updated_at: Optional[str] = None
    url: Optional[str] = None
    visibility: Optional[str] = None
    watchers_count: Optional[int] = None


class NullableSimpleUser(BaseModel):
    avatar_url: AnyUrl = Field(
        ..., examples=['https://github.com/images/error/octocat_happy.gif']
    )
    email: Optional[str] = None
    events_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/events{/privacy}']
    )
    followers_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/followers']
    )
    following_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/following{/other_user}']
    )
    gists_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/gists{/gist_id}']
    )
    gravatar_id: str = Field(..., examples=['41d064eb2195891e12d0413f63227ea7'])
    html_url: AnyUrl = Field(..., examples=['https://github.com/octocat'])
    id: int = Field(..., examples=[1])
    login: str = Field(..., examples=['octocat'])
    name: Optional[str] = None
    node_id: str = Field(..., examples=['MDQ6VXNlcjE='])
    organizations_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/orgs']
    )
    received_events_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/received_events']
    )
    repos_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/repos']
    )
    site_admin: bool
    starred_at: Optional[str] = Field(None, examples=['"2020-07-09T00:17:55Z"'])
    starred_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/starred{/owner}{/repo}']
    )
    subscriptions_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/subscriptions']
    )
    type: str = Field(..., examples=['User'])
    url: AnyUrl = Field(..., examples=['https://api.github.com/users/octocat'])


class NullableTeamSimple(BaseModel):
    description: str = Field(
        ..., description='Description of the team', examples=['A great team.']
    )
    html_url: AnyUrl = Field(..., examples=['https://github.com/orgs/rails/teams/core'])
    id: int = Field(..., description='Unique identifier of the team', examples=[1])
    ldap_dn: Optional[str] = Field(
        None,
        description='Distinguished Name (DN) that team maps to within LDAP environment',
        examples=['uid=example,ou=users,dc=github,dc=com'],
    )
    members_url: str = Field(
        ..., examples=['https://api.github.com/organizations/1/team/1/members{/member}']
    )
    name: str = Field(..., description='Name of the team', examples=['Justice League'])
    node_id: str = Field(..., examples=['MDQ6VGVhbTE='])
    permission: str = Field(
        ...,
        description='Permission that the team will have for its repositories',
        examples=['admin'],
    )
    privacy: Optional[str] = Field(
        None,
        description='The level of privacy this team should have',
        examples=['closed'],
    )
    repositories_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/organizations/1/team/1/repos']
    )
    slug: str = Field(..., examples=['justice-league'])
    url: AnyUrl = Field(
        ...,
        description='URL for the team',
        examples=['https://api.github.com/organizations/1/team/1'],
    )


class Config3(BaseModel):
    content_type: Optional[str] = Field(None, examples=['"form"'])
    insecure_ssl: Optional[str] = Field(None, examples=['"0"'])
    secret: Optional[str] = Field(None, examples=['"********"'])
    url: Optional[str] = Field(None, examples=['"http://example.com/2"'])


class OrgHook(BaseModel):
    active: bool = Field(..., examples=[True])
    config: Config3
    created_at: datetime = Field(..., examples=['2011-09-06T17:26:27Z'])
    events: List[str] = Field(..., examples=[['push', 'pull_request']])
    id: int = Field(..., examples=[1])
    name: str = Field(..., examples=['web'])
    ping_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/orgs/octocat/hooks/1/pings']
    )
    type: str
    updated_at: datetime = Field(..., examples=['2011-09-06T20:39:23Z'])
    url: AnyUrl = Field(..., examples=['https://api.github.com/orgs/octocat/hooks/1'])


class Permissions9(BaseModel):
    can_create_repository: bool


class Role(Enum):
    admin = 'admin'
    member = 'member'
    billing_manager = 'billing_manager'


class State3(Enum):
    active = 'active'
    pending = 'pending'


class OrgPreReceiveHook(BaseModel):
    allow_downstream_configuration: Optional[bool] = None
    configuration_url: Optional[str] = None
    enforcement: Optional[str] = None
    id: Optional[int] = None
    name: Optional[str] = None


class Plan1(BaseModel):
    filled_seats: Optional[int] = None
    name: str
    private_repos: int
    seats: Optional[int] = None
    space: int


class OrganizationFull(BaseModel):
    avatar_url: str = Field(
        ..., examples=['https://github.com/images/error/octocat_happy.gif']
    )
    billing_email: Optional[EmailStr] = Field(None, examples=['org@example.com'])
    blog: Optional[AnyUrl] = Field(None, examples=['https://github.com/blog'])
    collaborators: Optional[int] = Field(None, examples=[8])
    company: Optional[str] = Field(None, examples=['GitHub'])
    created_at: datetime = Field(..., examples=['2008-01-14T04:33:35Z'])
    default_repository_permission: Optional[str] = None
    description: str = Field(..., examples=['A great organization'])
    disk_usage: Optional[int] = Field(None, examples=[10000])
    email: Optional[EmailStr] = Field(None, examples=['octocat@github.com'])
    events_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/orgs/github/events']
    )
    followers: int = Field(..., examples=[20])
    following: int = Field(..., examples=[0])
    has_organization_projects: bool = Field(..., examples=[True])
    has_repository_projects: bool = Field(..., examples=[True])
    hooks_url: str = Field(..., examples=['https://api.github.com/orgs/github/hooks'])
    html_url: AnyUrl = Field(..., examples=['https://github.com/octocat'])
    id: int = Field(..., examples=[1])
    issues_url: str = Field(..., examples=['https://api.github.com/orgs/github/issues'])
    location: Optional[str] = Field(None, examples=['San Francisco'])
    login: str = Field(..., examples=['github'])
    members_allowed_repository_creation_type: Optional[str] = Field(
        None, examples=['all']
    )
    members_can_create_internal_repositories: Optional[bool] = Field(
        None, examples=[True]
    )
    members_can_create_pages: Optional[bool] = Field(None, examples=[True])
    members_can_create_private_pages: Optional[bool] = Field(None, examples=[True])
    members_can_create_private_repositories: Optional[bool] = Field(
        None, examples=[True]
    )
    members_can_create_public_pages: Optional[bool] = Field(None, examples=[True])
    members_can_create_public_repositories: Optional[bool] = Field(
        None, examples=[True]
    )
    members_can_create_repositories: Optional[bool] = Field(None, examples=[True])
    members_url: str = Field(
        ..., examples=['https://api.github.com/orgs/github/members{/member}']
    )
    name: Optional[str] = Field(None, examples=['github'])
    node_id: str = Field(..., examples=['MDEyOk9yZ2FuaXphdGlvbjE='])
    owned_private_repos: Optional[int] = Field(None, examples=[100])
    plan: Optional[Plan1] = None
    private_gists: Optional[int] = Field(None, examples=[81])
    public_gists: int = Field(..., examples=[1])
    public_members_url: str = Field(
        ..., examples=['https://api.github.com/orgs/github/public_members{/member}']
    )
    public_repos: int = Field(..., examples=[2])
    repos_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/orgs/github/repos']
    )
    total_private_repos: Optional[int] = Field(None, examples=[100])
    two_factor_requirement_enabled: Optional[bool] = Field(None, examples=[True])
    type: str = Field(..., examples=['Organization'])
    updated_at: datetime
    url: AnyUrl = Field(..., examples=['https://api.github.com/orgs/github'])


class OrganizationSimple(BaseModel):
    avatar_url: str = Field(
        ..., examples=['https://github.com/images/error/octocat_happy.gif']
    )
    description: str = Field(..., examples=['A great organization'])
    events_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/orgs/github/events']
    )
    hooks_url: str = Field(..., examples=['https://api.github.com/orgs/github/hooks'])
    id: int = Field(..., examples=[1])
    issues_url: str = Field(..., examples=['https://api.github.com/orgs/github/issues'])
    login: str = Field(..., examples=['github'])
    members_url: str = Field(
        ..., examples=['https://api.github.com/orgs/github/members{/member}']
    )
    node_id: str = Field(..., examples=['MDEyOk9yZ2FuaXphdGlvbjE='])
    public_members_url: str = Field(
        ..., examples=['https://api.github.com/orgs/github/public_members{/member}']
    )
    repos_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/orgs/github/repos']
    )
    url: AnyUrl = Field(..., examples=['https://api.github.com/orgs/github'])


class Status4(Enum):
    built = 'built'
    building = 'building'
    errored = 'errored'


class Error(BaseModel):
    message: str


class PageBuild(BaseModel):
    commit: str
    created_at: datetime
    duration: int
    error: Error
    pusher: NullableSimpleUser
    status: str
    updated_at: datetime
    url: AnyUrl


class PageBuildStatus(BaseModel):
    status: str = Field(..., examples=['queued'])
    url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/github/hello-world/pages/builds/latest'
        ],
    )


class State4(Enum):
    new = 'new'
    authorization_created = 'authorization_created'
    authorization_pending = 'authorization_pending'
    authorized = 'authorized'
    authorization_revoked = 'authorization_revoked'
    issued = 'issued'
    uploaded = 'uploaded'
    approved = 'approved'
    errored = 'errored'
    bad_authz = 'bad_authz'
    destroy_pending = 'destroy_pending'
    dns_changed = 'dns_changed'


class PagesHttpsCertificate(BaseModel):
    description: str = Field(..., examples=['Certificate is approved'])
    domains: List = Field(
        ...,
        description='Array of the domain set and its alternate name (if it is configured)',
        examples=[['example.com', 'www.example.com']],
    )
    expires_at: Optional[date_aliased] = None
    state: State4 = Field(..., examples=['approved'])


class PagesSourceHash(BaseModel):
    branch: str
    path: str


class ParticipationStats(BaseModel):
    all: List[int]
    owner: List[int]


class Download(BaseModel):
    downloaded_at: Optional[str] = None
    message: Optional[str] = None
    state: Optional[str] = None
    url: Optional[str] = None


class PreReceiveEnvironment(BaseModel):
    created_at: Optional[str] = None
    default_environment: Optional[bool] = None
    download: Optional[Download] = None
    hooks_count: Optional[int] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    image_url: Optional[str] = None
    name: Optional[str] = None
    url: Optional[str] = None


class PreReceiveEnvironmentDownloadStatus(BaseModel):
    downloaded_at: Optional[str] = None
    message: Optional[str] = None
    state: Optional[str] = None
    url: Optional[str] = None


class Environment(BaseModel):
    created_at: Optional[str] = None
    default_environment: Optional[bool] = None
    download: Optional[Download] = None
    hooks_count: Optional[int] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    image_url: Optional[str] = None
    name: Optional[str] = None
    url: Optional[str] = None


class ScriptRepository(BaseModel):
    full_name: Optional[str] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    url: Optional[str] = None


class PreReceiveHook(BaseModel):
    allow_downstream_configuration: Optional[bool] = None
    enforcement: Optional[str] = None
    environment: Optional[Environment] = None
    id: Optional[int] = None
    name: Optional[str] = None
    script: Optional[str] = None
    script_repository: Optional[ScriptRepository] = None


class Plan2(BaseModel):
    collaborators: int
    name: str
    private_repos: int
    space: int


class PrivateUser(BaseModel):
    avatar_url: AnyUrl = Field(
        ..., examples=['https://github.com/images/error/octocat_happy.gif']
    )
    bio: str = Field(..., examples=['There once was...'])
    blog: str = Field(..., examples=['https://github.com/blog'])
    business_plus: Optional[bool] = None
    collaborators: int = Field(..., examples=[8])
    company: str = Field(..., examples=['GitHub'])
    created_at: datetime = Field(..., examples=['2008-01-14T04:33:35Z'])
    disk_usage: int = Field(..., examples=[10000])
    email: EmailStr = Field(..., examples=['octocat@github.com'])
    events_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/events{/privacy}']
    )
    followers: int = Field(..., examples=[20])
    followers_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/followers']
    )
    following: int = Field(..., examples=[0])
    following_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/following{/other_user}']
    )
    gists_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/gists{/gist_id}']
    )
    gravatar_id: str = Field(..., examples=['41d064eb2195891e12d0413f63227ea7'])
    hireable: bool
    html_url: AnyUrl = Field(..., examples=['https://github.com/octocat'])
    id: int = Field(..., examples=[1])
    ldap_dn: Optional[str] = None
    location: str = Field(..., examples=['San Francisco'])
    login: str = Field(..., examples=['octocat'])
    name: str = Field(..., examples=['monalisa octocat'])
    node_id: str = Field(..., examples=['MDQ6VXNlcjE='])
    organizations_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/orgs']
    )
    owned_private_repos: int = Field(..., examples=[100])
    plan: Optional[Plan2] = None
    private_gists: int = Field(..., examples=[81])
    public_gists: int = Field(..., examples=[1])
    public_repos: int = Field(..., examples=[2])
    received_events_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/received_events']
    )
    repos_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/repos']
    )
    site_admin: bool
    starred_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/starred{/owner}{/repo}']
    )
    subscriptions_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/subscriptions']
    )
    suspended_at: Optional[datetime] = None
    total_private_repos: int = Field(..., examples=[100])
    two_factor_authentication: bool = Field(..., examples=[True])
    type: str = Field(..., examples=['User'])
    updated_at: datetime = Field(..., examples=['2008-01-14T04:33:35Z'])
    url: AnyUrl = Field(..., examples=['https://api.github.com/users/octocat'])


class OrganizationPermission(Enum):
    read = 'read'
    write = 'write'
    admin = 'admin'
    none = 'none'


class Project(BaseModel):
    body: str = Field(
        ...,
        description='Body of the project',
        examples=['This project represents the sprint of the first week in January'],
    )
    columns_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/projects/1002604/columns']
    )
    created_at: datetime = Field(..., examples=['2011-04-10T20:09:31Z'])
    creator: NullableSimpleUser
    html_url: AnyUrl = Field(
        ..., examples=['https://github.com/api-playground/projects-test/projects/12']
    )
    id: int = Field(..., examples=[1002604])
    name: str = Field(
        ..., description='Name of the project', examples=['Week One Sprint']
    )
    node_id: str = Field(..., examples=['MDc6UHJvamVjdDEwMDI2MDQ='])
    number: int = Field(..., examples=[1])
    organization_permission: Optional[OrganizationPermission] = Field(
        None,
        description='The baseline permission that all organization members have on this project. Only present if owner is an organization.',
    )
    owner_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/api-playground/projects-test']
    )
    private: Optional[bool] = Field(
        None,
        description='Whether or not this project can be seen by everyone. Only present if owner is an organization.',
    )
    state: str = Field(
        ...,
        description="State of the project; either 'open' or 'closed'",
        examples=['open'],
    )
    updated_at: datetime = Field(..., examples=['2014-03-03T18:58:10Z'])
    url: AnyUrl = Field(..., examples=['https://api.github.com/projects/1002604'])


class ProjectCard3(BaseModel):
    archived: Optional[bool] = Field(
        None, description='Whether or not the card is archived', examples=[False]
    )
    column_name: Optional[str] = None
    column_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/projects/columns/367']
    )
    content_url: Optional[AnyUrl] = Field(
        None,
        examples=['https://api.github.com/repos/api-playground/projects-test/issues/3'],
    )
    created_at: datetime = Field(..., examples=['2016-09-05T14:21:06Z'])
    creator: NullableSimpleUser
    id: int = Field(..., description="The project card's ID", examples=[42])
    node_id: str = Field(..., examples=['MDExOlByb2plY3RDYXJkMTQ3OA=='])
    note: str = Field(..., examples=['Add payload for delete Project column'])
    project_id: Optional[str] = None
    project_url: AnyUrl = Field(..., examples=['https://api.github.com/projects/120'])
    updated_at: datetime = Field(..., examples=['2016-09-05T14:20:22Z'])
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/projects/columns/cards/1478']
    )


class ProjectColumn(BaseModel):
    cards_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/projects/columns/367/cards']
    )
    created_at: datetime = Field(..., examples=['2016-09-05T14:18:44Z'])
    id: int = Field(
        ..., description='The unique identifier of the project column', examples=[42]
    )
    name: str = Field(
        ..., description='Name of the project column', examples=['Remaining tasks']
    )
    node_id: str = Field(..., examples=['MDEzOlByb2plY3RDb2x1bW4zNjc='])
    project_url: AnyUrl = Field(..., examples=['https://api.github.com/projects/120'])
    updated_at: datetime = Field(..., examples=['2016-09-05T14:22:28Z'])
    url: AnyUrl = Field(..., examples=['https://api.github.com/projects/columns/367'])


class AllowDeletions1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: bool


class AllowForcePushes1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: bool


class EnforceAdmins(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: bool
    url: AnyUrl


class RequiredConversationResolution1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: Optional[bool] = None


class RequiredLinearHistory1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: bool


class ProtectedBranchAdminEnforced(BaseModel):
    enabled: bool = Field(..., examples=[True])
    url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins'
        ],
    )


class PublicKeyFull(BaseModel):
    created_at: datetime
    id: int
    key: str
    last_used: datetime
    read_only: bool
    repository_id: int
    title: str
    url: str
    user_id: int
    verified: bool


class PublicUser(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    avatar_url: AnyUrl
    bio: str
    blog: str
    collaborators: Optional[int] = Field(None, examples=[3])
    company: str
    created_at: datetime
    disk_usage: Optional[int] = Field(None, examples=[1])
    email: EmailStr
    events_url: str
    followers: int
    followers_url: AnyUrl
    following: int
    following_url: str
    gists_url: str
    gravatar_id: str
    hireable: bool
    html_url: AnyUrl
    id: int
    location: str
    login: str
    name: str
    node_id: str
    organizations_url: AnyUrl
    owned_private_repos: Optional[int] = Field(None, examples=[2])
    plan: Optional[Plan2] = None
    private_gists: Optional[int] = Field(None, examples=[1])
    public_gists: int
    public_repos: int
    received_events_url: AnyUrl
    repos_url: AnyUrl
    site_admin: bool
    starred_url: str
    subscriptions_url: AnyUrl
    suspended_at: Optional[datetime] = None
    total_private_repos: Optional[int] = Field(None, examples=[2])
    type: str
    updated_at: datetime
    url: AnyUrl


class FieldLinks10(BaseModel):
    comments: Link
    commits: Link
    html: Link
    issue: Link
    review_comment: Link
    review_comments: Link
    self: Link
    statuses: Link


class Owner2(BaseModel):
    avatar_url: AnyUrl
    events_url: str
    followers_url: AnyUrl
    following_url: str
    gists_url: str
    gravatar_id: str
    html_url: AnyUrl
    id: int
    login: str
    node_id: str
    organizations_url: AnyUrl
    received_events_url: AnyUrl
    repos_url: AnyUrl
    site_admin: bool
    starred_url: str
    subscriptions_url: AnyUrl
    type: str
    url: AnyUrl


class Permissions10(BaseModel):
    admin: bool
    maintain: Optional[bool] = None
    pull: bool
    push: bool
    triage: Optional[bool] = None


class Repo1(BaseModel):
    allow_forking: Optional[bool] = None
    allow_merge_commit: Optional[bool] = None
    allow_rebase_merge: Optional[bool] = None
    allow_squash_merge: Optional[bool] = None
    anonymous_access_enabled: Optional[bool] = None
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: datetime
    default_branch: str
    deployments_url: AnyUrl
    description: str
    disabled: bool
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    homepage: AnyUrl
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: str
    languages_url: AnyUrl
    license: NullableLicenseSimple
    master_branch: Optional[str] = None
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: AnyUrl
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    owner: Owner2
    permissions: Optional[Permissions10] = None
    private: bool
    pulls_url: str
    pushed_at: datetime
    releases_url: str
    size: int
    ssh_url: str
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: Optional[List[str]] = None
    trees_url: str
    updated_at: datetime
    url: AnyUrl
    watchers: int
    watchers_count: int


class User1(BaseModel):
    avatar_url: AnyUrl
    events_url: str
    followers_url: AnyUrl
    following_url: str
    gists_url: str
    gravatar_id: str
    html_url: AnyUrl
    id: int
    login: str
    node_id: str
    organizations_url: AnyUrl
    received_events_url: AnyUrl
    repos_url: AnyUrl
    site_admin: bool
    starred_url: str
    subscriptions_url: AnyUrl
    type: str
    url: AnyUrl


class Base(BaseModel):
    label: str
    ref: str
    repo: Repo1
    sha: str
    user: User1


class License3(BaseModel):
    key: str
    name: str
    node_id: str
    spdx_id: str
    url: AnyUrl


class Repo2(BaseModel):
    allow_forking: Optional[bool] = None
    allow_merge_commit: Optional[bool] = None
    allow_rebase_merge: Optional[bool] = None
    allow_squash_merge: Optional[bool] = None
    anonymous_access_enabled: Optional[bool] = None
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: datetime
    default_branch: str
    deployments_url: AnyUrl
    description: str
    disabled: bool
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    homepage: AnyUrl
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: str
    languages_url: AnyUrl
    license: License3
    master_branch: Optional[str] = None
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: AnyUrl
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    owner: Owner2
    permissions: Optional[Permissions10] = None
    private: bool
    pulls_url: str
    pushed_at: datetime
    releases_url: str
    size: int
    ssh_url: str
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: Optional[List[str]] = None
    trees_url: str
    updated_at: datetime
    url: AnyUrl
    watchers: int
    watchers_count: int


class Head(BaseModel):
    label: str
    ref: str
    repo: Repo2
    sha: str
    user: User1


class Label2(BaseModel):
    color: Optional[str] = None
    default: Optional[bool] = None
    description: Optional[str] = None
    id: Optional[int] = None
    name: Optional[str] = None
    node_id: Optional[str] = None
    url: Optional[str] = None


class State5(Enum):
    open = 'open'
    closed = 'closed'


class PullRequestMergeResult(BaseModel):
    merged: bool
    message: str
    sha: str


class Repo3(BaseModel):
    id: int
    name: str
    url: str


class Base1(BaseModel):
    ref: str
    repo: Repo3
    sha: str


class Head1(BaseModel):
    ref: str
    repo: Repo3
    sha: str


class PullRequestMinimal(BaseModel):
    base: Base1
    head: Head1
    id: int
    number: int
    url: str


class Html(BaseModel):
    href: str


class PullRequest4(BaseModel):
    href: str


class FieldLinks11(BaseModel):
    html: Html
    pull_request: PullRequest4


class PullRequestReview(BaseModel):
    field_links: FieldLinks11 = Field(..., alias='_links')
    author_association: AuthorAssociation
    body: str = Field(
        ..., description='The text of the review.', examples=['This looks great.']
    )
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    commit_id: str = Field(
        ...,
        description='A commit SHA for the review.',
        examples=['54bb654c9e6025347f57900a4a5c2313a96b8035'],
    )
    html_url: AnyUrl = Field(
        ...,
        examples=[
            'https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80'
        ],
    )
    id: int = Field(..., description='Unique identifier of the review', examples=[42])
    node_id: str = Field(..., examples=['MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA='])
    pull_request_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World/pulls/12']
    )
    state: str = Field(..., examples=['CHANGES_REQUESTED'])
    submitted_at: Optional[datetime] = None
    user: NullableSimpleUser


class Html1(BaseModel):
    href: AnyUrl = Field(
        ...,
        examples=['https://github.com/octocat/Hello-World/pull/1#discussion-diff-1'],
    )


class PullRequest5(BaseModel):
    href: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World/pulls/1']
    )


class Self(BaseModel):
    href: AnyUrl = Field(
        ...,
        examples=['https://api.github.com/repos/octocat/Hello-World/pulls/comments/1'],
    )


class FieldLinks12(BaseModel):
    html: Html1
    pull_request: PullRequest5
    self: Self


class Side(Enum):
    LEFT = 'LEFT'
    RIGHT = 'RIGHT'


class StartSide(Enum):
    LEFT = 'LEFT'
    RIGHT = 'RIGHT'


class FieldLinks13(BaseModel):
    comments: Link
    commits: Link
    html: Link
    issue: Link
    review_comment: Link
    review_comments: Link
    self: Link
    statuses: Link


class RateLimit(BaseModel):
    limit: int
    remaining: int
    reset: int
    used: int


class Resources(BaseModel):
    code_scanning_upload: Optional[RateLimit] = None
    core: RateLimit
    graphql: Optional[RateLimit] = None
    integration_manifest: Optional[RateLimit] = None
    search: RateLimit
    source_import: Optional[RateLimit] = None


class RateLimitOverview(BaseModel):
    rate: RateLimit
    resources: Resources


class Content1(Enum):
    field_1 = '+1'
    field_1_1 = '-1'
    laugh = 'laugh'
    confused = 'confused'
    heart = 'heart'
    hooray = 'hooray'
    rocket = 'rocket'
    eyes = 'eyes'


class Reaction(BaseModel):
    content: Content1 = Field(
        ..., description='The reaction to use', examples=['heart']
    )
    created_at: datetime = Field(..., examples=['2016-05-20T20:09:31Z'])
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=['MDg6UmVhY3Rpb24x'])
    user: NullableSimpleUser


class ReactionRollup(BaseModel):
    field_1: int = Field(..., alias='+1')
    field_1_1: int = Field(..., alias='-1')
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: AnyUrl


class State6(Enum):
    uploaded = 'uploaded'
    open = 'open'


class ReleaseAsset(BaseModel):
    browser_download_url: AnyUrl
    content_type: str
    created_at: datetime
    download_count: int
    id: int
    label: str
    name: str = Field(
        ..., description='The file name of the asset.', examples=['Team Environment']
    )
    node_id: str
    size: int
    state: State6 = Field(..., description='State of the release asset.')
    updated_at: datetime
    uploader: NullableSimpleUser
    url: AnyUrl


class ProjectCard4(BaseModel):
    column_name: str
    id: int
    previous_column_name: Optional[str] = None
    project_id: int
    project_url: AnyUrl
    url: AnyUrl


class Rename(BaseModel):
    from_: str = Field(..., alias='from')
    to: str


class Owner4(BaseModel):
    avatar_url: Optional[str] = None
    events_url: Optional[str] = None
    followers_url: Optional[str] = None
    following_url: Optional[str] = None
    gists_url: Optional[str] = None
    gravatar_id: Optional[str] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    login: Optional[str] = None
    node_id: Optional[str] = None
    organizations_url: Optional[str] = None
    received_events_url: Optional[str] = None
    repos_url: Optional[str] = None
    site_admin: Optional[bool] = None
    starred_url: Optional[str] = None
    subscriptions_url: Optional[str] = None
    type: Optional[str] = None
    url: Optional[str] = None


class Permissions14(BaseModel):
    admin: Optional[bool] = None
    maintain: Optional[bool] = None
    pull: Optional[bool] = None
    push: Optional[bool] = None
    triage: Optional[bool] = None


class TemplateRepository1(BaseModel):
    allow_merge_commit: Optional[bool] = None
    allow_rebase_merge: Optional[bool] = None
    allow_squash_merge: Optional[bool] = None
    anonymous_access_enabled: Optional[bool] = None
    archive_url: Optional[str] = None
    archived: Optional[bool] = None
    assignees_url: Optional[str] = None
    blobs_url: Optional[str] = None
    branches_url: Optional[str] = None
    clone_url: Optional[str] = None
    collaborators_url: Optional[str] = None
    comments_url: Optional[str] = None
    commits_url: Optional[str] = None
    compare_url: Optional[str] = None
    contents_url: Optional[str] = None
    contributors_url: Optional[str] = None
    created_at: Optional[str] = None
    default_branch: Optional[str] = None
    delete_branch_on_merge: Optional[bool] = None
    deployments_url: Optional[str] = None
    description: Optional[str] = None
    disabled: Optional[bool] = None
    downloads_url: Optional[str] = None
    events_url: Optional[str] = None
    fork: Optional[bool] = None
    forks_count: Optional[int] = None
    forks_url: Optional[str] = None
    full_name: Optional[str] = None
    git_commits_url: Optional[str] = None
    git_refs_url: Optional[str] = None
    git_tags_url: Optional[str] = None
    git_url: Optional[str] = None
    has_downloads: Optional[bool] = None
    has_issues: Optional[bool] = None
    has_pages: Optional[bool] = None
    has_projects: Optional[bool] = None
    has_wiki: Optional[bool] = None
    homepage: Optional[str] = None
    hooks_url: Optional[str] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    is_template: Optional[bool] = None
    issue_comment_url: Optional[str] = None
    issue_events_url: Optional[str] = None
    issues_url: Optional[str] = None
    keys_url: Optional[str] = None
    labels_url: Optional[str] = None
    language: Optional[str] = None
    languages_url: Optional[str] = None
    merges_url: Optional[str] = None
    milestones_url: Optional[str] = None
    mirror_url: Optional[str] = None
    name: Optional[str] = None
    network_count: Optional[int] = None
    node_id: Optional[str] = None
    notifications_url: Optional[str] = None
    open_issues_count: Optional[int] = None
    owner: Optional[Owner4] = None
    permissions: Optional[Permissions14] = None
    private: Optional[bool] = None
    pulls_url: Optional[str] = None
    pushed_at: Optional[str] = None
    releases_url: Optional[str] = None
    size: Optional[int] = None
    ssh_url: Optional[str] = None
    stargazers_count: Optional[int] = None
    stargazers_url: Optional[str] = None
    statuses_url: Optional[str] = None
    subscribers_count: Optional[int] = None
    subscribers_url: Optional[str] = None
    subscription_url: Optional[str] = None
    svn_url: Optional[str] = None
    tags_url: Optional[str] = None
    teams_url: Optional[str] = None
    topics: Optional[List[str]] = None
    trees_url: Optional[str] = None
    updated_at: Optional[str] = None
    url: Optional[str] = None
    visibility: Optional[str] = None
    watchers_count: Optional[int] = None


class RepositoryCollaboratorPermission(BaseModel):
    permission: str
    user: NullableSimpleUser


class Permissions15(Enum):
    read = 'read'
    write = 'write'
    admin = 'admin'
    triage = 'triage'
    maintain = 'maintain'


class RepositoryPreReceiveHook(BaseModel):
    configuration_url: Optional[str] = None
    enforcement: Optional[str] = None
    id: Optional[int] = None
    name: Optional[str] = None


class RepositorySubscription(BaseModel):
    created_at: datetime = Field(..., examples=['2012-10-06T21:34:12Z'])
    ignored: bool = Field(
        ...,
        description='Determines if all notifications should be blocked from this repository.',
    )
    reason: str
    repository_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/example']
    )
    subscribed: bool = Field(
        ...,
        description='Determines if notifications should be received from this repository.',
        examples=[True],
    )
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/example/subscription']
    )


class FieldLinks14(BaseModel):
    html: Link
    pull_request: Link
    self: Link


class ReviewComment(BaseModel):
    field_links: FieldLinks14 = Field(..., alias='_links')
    author_association: AuthorAssociation
    body: str = Field(..., examples=['Great stuff'])
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    commit_id: str = Field(..., examples=['6dcb09b5b57875f334f61aebed695e2e4193db5e'])
    created_at: datetime = Field(..., examples=['2011-04-14T16:00:49Z'])
    diff_hunk: str = Field(
        ..., examples=['@@ -16,33 +16,40 @@ public class Connection : IConnection...']
    )
    html_url: AnyUrl = Field(
        ...,
        examples=['https://github.com/octocat/Hello-World/pull/1#discussion-diff-1'],
    )
    id: int = Field(..., examples=[10])
    in_reply_to_id: Optional[int] = Field(None, examples=[8])
    line: Optional[int] = Field(
        None,
        description='The line of the blob to which the comment applies. The last line of the range for a multi-line comment',
        examples=[2],
    )
    node_id: str = Field(..., examples=['MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw'])
    original_commit_id: str = Field(
        ..., examples=['9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840']
    )
    original_line: Optional[int] = Field(
        None,
        description='The original line of the blob to which the comment applies. The last line of the range for a multi-line comment',
        examples=[2],
    )
    original_position: int = Field(..., examples=[4])
    original_start_line: Optional[int] = Field(
        None,
        description='The original first line of the range for a multi-line comment.',
        examples=[2],
    )
    path: str = Field(..., examples=['file1.txt'])
    position: int = Field(..., examples=[1])
    pull_request_review_id: int = Field(..., examples=[42])
    pull_request_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World/pulls/1']
    )
    reactions: Optional[ReactionRollup] = None
    side: Optional[Side] = Field(
        'RIGHT',
        description='The side of the first line of the range for a multi-line comment.',
    )
    start_line: Optional[int] = Field(
        None,
        description='The first line of the range for a multi-line comment.',
        examples=[2],
    )
    start_side: Optional[StartSide] = Field(
        'RIGHT',
        description='The side of the first line of the range for a multi-line comment.',
    )
    updated_at: datetime = Field(..., examples=['2011-04-14T16:00:49Z'])
    url: AnyUrl = Field(
        ...,
        examples=['https://api.github.com/repos/octocat/Hello-World/pulls/comments/1'],
    )
    user: NullableSimpleUser


class DismissedReview(BaseModel):
    dismissal_commit_id: Optional[str] = None
    dismissal_message: str
    review_id: int
    state: str


class ScimError(BaseModel):
    detail: Optional[str] = None
    documentation_url: Optional[str] = None
    message: Optional[str] = None
    schemas: Optional[List[str]] = None
    scimType: Optional[str] = None
    status: Optional[int] = None


class Match(BaseModel):
    indices: Optional[List[int]] = None
    text: Optional[str] = None


class SearchResultTextMatch(BaseModel):
    fragment: Optional[str] = None
    matches: Optional[List[Match]] = None
    object_type: Optional[str] = None
    object_url: Optional[str] = None
    property: Optional[str] = None


class SearchResultTextMatches(RootModel[List[SearchResultTextMatch]]):
    root: List[SearchResultTextMatch] = Field(..., title='Search Result Text Matches')


class ShortBlob(BaseModel):
    sha: str
    url: str


class Commit4(BaseModel):
    sha: str
    url: AnyUrl


class Author3(BaseModel):
    email: str
    name: str


class Committer2(BaseModel):
    email: str
    name: str


class SimpleCommit(BaseModel):
    author: Author3
    committer: Committer2
    id: str
    message: str
    timestamp: datetime
    tree_id: str


class SimpleCommitStatus(BaseModel):
    avatar_url: AnyUrl
    context: str
    created_at: datetime
    description: str
    id: int
    node_id: str
    required: Optional[bool] = None
    state: str
    target_url: AnyUrl
    updated_at: datetime
    url: AnyUrl


class SimpleUser(BaseModel):
    avatar_url: AnyUrl = Field(
        ..., examples=['https://github.com/images/error/octocat_happy.gif']
    )
    email: Optional[str] = None
    events_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/events{/privacy}']
    )
    followers_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/followers']
    )
    following_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/following{/other_user}']
    )
    gists_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/gists{/gist_id}']
    )
    gravatar_id: str = Field(..., examples=['41d064eb2195891e12d0413f63227ea7'])
    html_url: AnyUrl = Field(..., examples=['https://github.com/octocat'])
    id: int = Field(..., examples=[1])
    login: str = Field(..., examples=['octocat'])
    name: Optional[str] = None
    node_id: str = Field(..., examples=['MDQ6VXNlcjE='])
    organizations_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/orgs']
    )
    received_events_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/received_events']
    )
    repos_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/repos']
    )
    site_admin: bool
    starred_at: Optional[str] = Field(None, examples=['"2020-07-09T00:17:55Z"'])
    starred_url: str = Field(
        ..., examples=['https://api.github.com/users/octocat/starred{/owner}{/repo}']
    )
    subscriptions_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/subscriptions']
    )
    type: str = Field(..., examples=['User'])
    url: AnyUrl = Field(..., examples=['https://api.github.com/users/octocat'])


class SshKey(BaseModel):
    key: Optional[str] = None
    pretty_print: Optional[str] = Field(None, alias='pretty-print')


class Stargazer(BaseModel):
    starred_at: datetime
    user: NullableSimpleUser


class Status5(BaseModel):
    avatar_url: str
    context: str
    created_at: str
    creator: NullableSimpleUser
    description: str
    id: int
    node_id: str
    state: str
    target_url: str
    updated_at: str
    url: str


class StatusCheckPolicy(BaseModel):
    contexts: List[str] = Field(..., examples=[['continuous-integration/travis-ci']])
    contexts_url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts'
        ],
    )
    strict: bool = Field(..., examples=[True])
    url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks'
        ],
    )


class Tag(BaseModel):
    commit: Commit4
    name: str = Field(..., examples=['v0.1'])
    node_id: str
    tarball_url: AnyUrl = Field(
        ..., examples=['https://github.com/octocat/Hello-World/tarball/v0.1']
    )
    zipball_url: AnyUrl = Field(
        ..., examples=['https://github.com/octocat/Hello-World/zipball/v0.1']
    )


class Permissions16(BaseModel):
    admin: bool
    maintain: bool
    pull: bool
    push: bool
    triage: bool


class TeamModel(BaseModel):
    description: str
    html_url: AnyUrl = Field(..., examples=['https://github.com/orgs/rails/teams/core'])
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NullableTeamSimple
    permission: str
    permissions: Optional[Permissions16] = None
    privacy: Optional[str] = None
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl


class TeamDiscussion(BaseModel):
    author: NullableSimpleUser
    body: str = Field(
        ...,
        description='The main text of the discussion.',
        examples=['Please suggest improvements to our workflow in comments.'],
    )
    body_html: str = Field(
        ..., examples=['<p>Hi! This is an area for us to collaborate as a team</p>']
    )
    body_version: str = Field(
        ...,
        description='The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.',
        examples=['0307116bbf7ced493b8d8a346c650b71'],
    )
    comments_count: int = Field(..., examples=[0])
    comments_url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/organizations/1/team/2343027/discussions/1/comments'
        ],
    )
    created_at: datetime = Field(..., examples=['2018-01-25T18:56:31Z'])
    html_url: AnyUrl = Field(
        ...,
        examples=['https://github.com/orgs/github/teams/justice-league/discussions/1'],
    )
    last_edited_at: datetime
    node_id: str = Field(..., examples=['MDE0OlRlYW1EaXNjdXNzaW9uMQ=='])
    number: int = Field(
        ...,
        description='The unique sequence number of a team discussion.',
        examples=[42],
    )
    pinned: bool = Field(
        ...,
        description='Whether or not this discussion should be pinned for easy retrieval.',
        examples=[True],
    )
    private: bool = Field(
        ...,
        description='Whether or not this discussion should be restricted to team members and organization administrators.',
        examples=[True],
    )
    reactions: Optional[ReactionRollup] = None
    team_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/organizations/1/team/2343027']
    )
    title: str = Field(
        ...,
        description='The title of the discussion.',
        examples=['How can we improve our workflow?'],
    )
    updated_at: datetime = Field(..., examples=['2018-01-25T18:56:31Z'])
    url: AnyUrl = Field(
        ...,
        examples=['https://api.github.com/organizations/1/team/2343027/discussions/1'],
    )


class TeamDiscussionComment(BaseModel):
    author: NullableSimpleUser
    body: str = Field(
        ...,
        description='The main text of the comment.',
        examples=['I agree with this suggestion.'],
    )
    body_html: str = Field(..., examples=['<p>Do you like apples?</p>'])
    body_version: str = Field(
        ...,
        description='The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.',
        examples=['0307116bbf7ced493b8d8a346c650b71'],
    )
    created_at: datetime = Field(..., examples=['2018-01-15T23:53:58Z'])
    discussion_url: AnyUrl = Field(
        ...,
        examples=['https://api.github.com/organizations/1/team/2403582/discussions/1'],
    )
    html_url: AnyUrl = Field(
        ...,
        examples=[
            'https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1'
        ],
    )
    last_edited_at: datetime
    node_id: str = Field(..., examples=['MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE='])
    number: int = Field(
        ...,
        description='The unique sequence number of a team discussion comment.',
        examples=[42],
    )
    reactions: Optional[ReactionRollup] = None
    updated_at: datetime = Field(..., examples=['2018-01-15T23:53:58Z'])
    url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1'
        ],
    )


class Privacy(Enum):
    closed = 'closed'
    secret = 'secret'


class TeamFull(BaseModel):
    created_at: datetime = Field(..., examples=['2017-07-14T16:53:42Z'])
    description: str = Field(..., examples=['A great team.'])
    html_url: AnyUrl = Field(..., examples=['https://github.com/orgs/rails/teams/core'])
    id: int = Field(..., description='Unique identifier of the team', examples=[42])
    ldap_dn: Optional[str] = Field(
        None,
        description='Distinguished Name (DN) that team maps to within LDAP environment',
        examples=['uid=example,ou=users,dc=github,dc=com'],
    )
    members_count: int = Field(..., examples=[3])
    members_url: str = Field(
        ..., examples=['https://api.github.com/organizations/1/team/1/members{/member}']
    )
    name: str = Field(..., description='Name of the team', examples=['Developers'])
    node_id: str = Field(..., examples=['MDQ6VGVhbTE='])
    organization: OrganizationFull
    parent: Optional[NullableTeamSimple] = None
    permission: str = Field(
        ...,
        description='Permission that the team will have for its repositories',
        examples=['push'],
    )
    privacy: Optional[Privacy] = Field(
        None,
        description='The level of privacy this team should have',
        examples=['closed'],
    )
    repos_count: int = Field(..., examples=[10])
    repositories_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/organizations/1/team/1/repos']
    )
    slug: str = Field(..., examples=['justice-league'])
    updated_at: datetime = Field(..., examples=['2017-08-17T12:37:15Z'])
    url: AnyUrl = Field(
        ...,
        description='URL for the team',
        examples=['https://api.github.com/organizations/1/team/1'],
    )


class Role1(Enum):
    member = 'member'
    maintainer = 'maintainer'


class State7(Enum):
    active = 'active'
    pending = 'pending'


class TeamMembership(BaseModel):
    role: Role1 = Field(
        ..., description='The role of the user in the team.', examples=['member']
    )
    state: State7 = Field(
        ..., description="The state of the user's membership in the team."
    )
    url: AnyUrl


class Permissions17(BaseModel):
    admin: bool
    read: bool
    write: bool


class TeamProject(BaseModel):
    body: str
    columns_url: str
    created_at: str
    creator: SimpleUser
    html_url: str
    id: int
    name: str
    node_id: str
    number: int
    organization_permission: Optional[str] = Field(
        None,
        description='The organization permission for this project. Only present when owner is an organization.',
    )
    owner_url: str
    permissions: Permissions17
    private: Optional[bool] = Field(
        None,
        description='Whether the project is private or not. Only present when owner is an organization.',
    )
    state: str
    updated_at: str
    url: str


class Permissions18(BaseModel):
    admin: bool
    maintain: Optional[bool] = None
    pull: bool
    push: bool
    triage: Optional[bool] = None


class TeamSimple(BaseModel):
    description: str = Field(
        ..., description='Description of the team', examples=['A great team.']
    )
    html_url: AnyUrl = Field(..., examples=['https://github.com/orgs/rails/teams/core'])
    id: int = Field(..., description='Unique identifier of the team', examples=[1])
    ldap_dn: Optional[str] = Field(
        None,
        description='Distinguished Name (DN) that team maps to within LDAP environment',
        examples=['uid=example,ou=users,dc=github,dc=com'],
    )
    members_url: str = Field(
        ..., examples=['https://api.github.com/organizations/1/team/1/members{/member}']
    )
    name: str = Field(..., description='Name of the team', examples=['Justice League'])
    node_id: str = Field(..., examples=['MDQ6VGVhbTE='])
    permission: str = Field(
        ...,
        description='Permission that the team will have for its repositories',
        examples=['admin'],
    )
    privacy: Optional[str] = Field(
        None,
        description='The level of privacy this team should have',
        examples=['closed'],
    )
    repositories_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/organizations/1/team/1/repos']
    )
    slug: str = Field(..., examples=['justice-league'])
    url: AnyUrl = Field(
        ...,
        description='URL for the team',
        examples=['https://api.github.com/organizations/1/team/1'],
    )


class Subject(BaseModel):
    latest_comment_url: str
    title: str
    type: str
    url: str


class ThreadSubscription(BaseModel):
    created_at: datetime = Field(..., examples=['2012-10-06T21:34:12Z'])
    ignored: bool
    reason: str
    repository_url: Optional[AnyUrl] = Field(
        None, examples=['https://api.github.com/repos/1']
    )
    subscribed: bool = Field(..., examples=[True])
    thread_url: Optional[AnyUrl] = Field(
        None, examples=['https://api.github.com/notifications/threads/1']
    )
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/notifications/threads/1/subscription']
    )


class Author4(BaseModel):
    date: datetime = Field(
        ...,
        description='Timestamp of the commit',
        examples=['2014-08-09T08:02:04+12:00'],
    )
    email: str = Field(
        ...,
        description='Git email address of the user',
        examples=['monalisa.octocat@example.com'],
    )
    name: str = Field(
        ..., description='Name of the git user', examples=['Monalisa Octocat']
    )


class Committer3(BaseModel):
    date: datetime = Field(
        ...,
        description='Timestamp of the commit',
        examples=['2014-08-09T08:02:04+12:00'],
    )
    email: str = Field(
        ...,
        description='Git email address of the user',
        examples=['monalisa.octocat@example.com'],
    )
    name: str = Field(
        ..., description='Name of the git user', examples=['Monalisa Octocat']
    )


class TimelineCommittedEvent(BaseModel):
    author: Author4 = Field(..., description='Identifying information for the git-user')
    committer: Committer3 = Field(
        ..., description='Identifying information for the git-user'
    )
    event: Optional[str] = None
    html_url: AnyUrl
    message: str = Field(
        ...,
        description='Message describing the purpose of the commit',
        examples=['Fix #42'],
    )
    node_id: str
    parents: List[Parent3]
    sha: str = Field(
        ...,
        description='SHA for the commit',
        examples=['7638417db6d59f3c431d3e1f261cc637155684cd'],
    )
    tree: Tree3
    url: AnyUrl
    verification: Verification2


class Html2(BaseModel):
    href: str


class PullRequest6(BaseModel):
    href: str


class FieldLinks15(BaseModel):
    html: Html2
    pull_request: PullRequest6


class TimelineReviewedEvent(BaseModel):
    field_links: FieldLinks15 = Field(..., alias='_links')
    author_association: AuthorAssociation
    body: str = Field(
        ..., description='The text of the review.', examples=['This looks great.']
    )
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    commit_id: str = Field(
        ...,
        description='A commit SHA for the review.',
        examples=['54bb654c9e6025347f57900a4a5c2313a96b8035'],
    )
    event: str
    html_url: AnyUrl = Field(
        ...,
        examples=[
            'https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80'
        ],
    )
    id: int = Field(..., description='Unique identifier of the review', examples=[42])
    node_id: str = Field(..., examples=['MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA='])
    pull_request_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World/pulls/12']
    )
    state: str = Field(..., examples=['CHANGES_REQUESTED'])
    submitted_at: Optional[datetime] = None
    user: SimpleUser


class Topic(BaseModel):
    names: List[str]


class TopicRelation(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    relation_type: Optional[str] = None
    topic_id: Optional[int] = None


class Alias(BaseModel):
    topic_relation: Optional[TopicRelation] = None


class RelatedItem(BaseModel):
    topic_relation: Optional[TopicRelation] = None


class TopicSearchResultItem(BaseModel):
    aliases: Optional[List[Alias]] = None
    created_at: datetime
    created_by: str
    curated: bool
    description: str
    display_name: str
    featured: bool
    logo_url: Optional[AnyUrl] = None
    name: str
    related: Optional[List[RelatedItem]] = None
    released: str
    repository_count: Optional[int] = None
    score: float
    short_description: str
    text_matches: Optional[SearchResultTextMatches] = None
    updated_at: datetime


class Label4(BaseModel):
    color: str
    name: str


class UserSearchResultItem(BaseModel):
    avatar_url: AnyUrl
    bio: Optional[str] = None
    blog: Optional[str] = None
    company: Optional[str] = None
    created_at: Optional[datetime] = None
    email: Optional[EmailStr] = None
    events_url: str
    followers: Optional[int] = None
    followers_url: AnyUrl
    following: Optional[int] = None
    following_url: str
    gists_url: str
    gravatar_id: str
    hireable: Optional[bool] = None
    html_url: AnyUrl
    id: int
    location: Optional[str] = None
    login: str
    name: Optional[str] = None
    node_id: str
    organizations_url: AnyUrl
    public_gists: Optional[int] = None
    public_repos: Optional[int] = None
    received_events_url: AnyUrl
    repos_url: AnyUrl
    score: float
    site_admin: bool
    starred_url: str
    subscriptions_url: AnyUrl
    suspended_at: Optional[datetime] = None
    text_matches: Optional[SearchResultTextMatches] = None
    type: str
    updated_at: Optional[datetime] = None
    url: AnyUrl


class Error1(BaseModel):
    code: str
    field: Optional[str] = None
    index: Optional[int] = None
    message: Optional[str] = None
    resource: Optional[str] = None
    value: Optional[Union[str, int, List[str]]] = None


class ValidationError(BaseModel):
    documentation_url: str
    errors: Optional[List[Error1]] = None
    message: str


class ValidationErrorSimple(BaseModel):
    documentation_url: str
    errors: Optional[List[str]] = None
    message: str


class WebhookConfigContentType(RootModel[str]):
    root: str = Field(
        ...,
        description='The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.',
        examples=['"json"'],
    )


class WebhookConfigInsecureSsl(RootModel[Union[str, float]]):
    root: Union[str, float]


class WebhookConfigSecret(RootModel[str]):
    root: str = Field(
        ...,
        description='If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads/#delivery-headers).',
        examples=['"********"'],
    )


class WebhookConfigUrl(RootModel[AnyUrl]):
    root: AnyUrl = Field(
        ...,
        description='The URL to which the payloads will be delivered.',
        examples=['https://example.com/webhook'],
    )


class FieldDatamodelCodeGeneratorRootSpecialGetResponse(BaseModel):
    authorizations_url: str
    code_search_url: str
    commit_search_url: str
    current_user_authorizations_html_url: str
    current_user_repositories_url: str
    current_user_url: str
    emails_url: str
    emojis_url: str
    events_url: str
    feeds_url: str
    followers_url: str
    following_url: str
    gists_url: str
    hub_url: str
    issue_search_url: str
    issues_url: str
    keys_url: str
    label_search_url: str
    notifications_url: str
    organization_repositories_url: str
    organization_teams_url: str
    organization_url: str
    public_gists_url: str
    rate_limit_url: str
    repository_search_url: str
    repository_url: str
    starred_gists_url: str
    starred_url: str
    topic_search_url: Optional[str] = None
    user_organizations_url: str
    user_repositories_url: str
    user_search_url: str
    user_url: str


class AdminHooksGetResponse(RootModel[List[GlobalHook]]):
    root: List[GlobalHook]


class Config4(BaseModel):
    content_type: Optional[str] = Field(
        None,
        description='The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.',
    )
    insecure_ssl: Optional[str] = Field(
        None,
        description='Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**',
    )
    secret: Optional[str] = Field(
        None,
        description='If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads/#delivery-headers) header.',
    )
    url: str = Field(
        ..., description='The URL to which the payloads will be delivered.'
    )


class AdminHooksPostRequest(BaseModel):
    active: Optional[bool] = Field(
        True,
        description='Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.',
    )
    config: Config4 = Field(
        ..., description='Key/value pairs to provide settings for this webhook.'
    )
    events: Optional[List[str]] = Field(
        None,
        description='The [events](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`.',
    )
    name: str = Field(..., description='Must be passed as "web".')


class AdminHooksHookIdPatchRequest(BaseModel):
    active: Optional[bool] = Field(
        True,
        description='Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.',
    )
    config: Optional[Config4] = Field(
        None, description='Key/value pairs to provide settings for this webhook.'
    )
    events: Optional[List[str]] = Field(
        None,
        description='The [events](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`.',
    )


class Direction(Enum):
    asc = 'asc'
    desc = 'desc'


class Sort(Enum):
    created = 'created'
    updated = 'updated'
    accessed = 'accessed'


class AdminKeysGetResponse(RootModel[List[PublicKeyFull]]):
    root: List[PublicKeyFull]


class AdminLdapTeamsTeamIdMappingPatchRequest(BaseModel):
    ldap_dn: Optional[str] = Field(
        None,
        description='The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team.',
    )


class AdminLdapTeamsTeamIdSyncPostResponse(BaseModel):
    status: Optional[str] = None


class AdminLdapUsersUsernameMappingPatchRequest(BaseModel):
    ldap_dn: Optional[str] = Field(
        None,
        description='The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team.',
    )


class AdminLdapUsersUsernameSyncPostResponse(BaseModel):
    status: Optional[str] = None


class AdminOrganizationsPostRequest(BaseModel):
    admin: str = Field(
        ..., description='The login of the user who will manage this organization.'
    )
    login: str = Field(..., description="The organization's username.")
    profile_name: Optional[str] = Field(
        None, description="The organization's display name."
    )


class AdminOrganizationsOrgPatchRequest(BaseModel):
    login: str = Field(..., description="The organization's new name.")


class AdminOrganizationsOrgPatchResponse(BaseModel):
    message: Optional[str] = None
    url: Optional[str] = None


class Sort2(Enum):
    created = 'created'
    updated = 'updated'
    name = 'name'


class AdminPreReceiveEnvironmentsGetResponse(RootModel[List[PreReceiveEnvironment]]):
    root: List[PreReceiveEnvironment]


class AdminPreReceiveEnvironmentsPostRequest(BaseModel):
    image_url: str = Field(
        ..., description='URL from which to download a tarball of this environment.'
    )
    name: str = Field(..., description="The new pre-receive environment's name.")


class Error2(BaseModel):
    code: Optional[str] = None
    message: Optional[str] = None
    resource: Optional[str] = None


class AdminPreReceiveEnvironmentsPreReceiveEnvironmentIdDeleteResponse(BaseModel):
    errors: Optional[List[Error2]] = None
    message: Optional[str] = None


class AdminPreReceiveEnvironmentsPreReceiveEnvironmentIdPatchRequest(BaseModel):
    image_url: Optional[str] = Field(
        None, description='URL from which to download a tarball of this environment.'
    )
    name: Optional[str] = Field(
        None, description="This pre-receive environment's new name."
    )


class AdminPreReceiveEnvironmentsPreReceiveEnvironmentIdPatchResponse(BaseModel):
    errors: Optional[List[Error2]] = None
    message: Optional[str] = None


class AdminPreReceiveEnvironmentsPreReceiveEnvironmentIdDownloadsPostResponse(
    BaseModel
):
    errors: Optional[List[Error2]] = None
    message: Optional[str] = None


class AdminPreReceiveHooksGetResponse(RootModel[List[PreReceiveHook]]):
    root: List[PreReceiveHook]


class AdminPreReceiveHooksPostRequest(BaseModel):
    allow_downstream_configuration: Optional[bool] = Field(
        None,
        description='Whether enforcement can be overridden at the org or repo level. default: `false`',
    )
    enforcement: Optional[str] = Field(
        None, description='The state of enforcement for this hook. default: `disabled`'
    )
    environment: Dict[str, Any] = Field(
        ..., description='The pre-receive environment where the script is executed.'
    )
    name: str = Field(..., description='The name of the hook.')
    script: str = Field(..., description='The script that the hook runs.')
    script_repository: Dict[str, Any] = Field(
        ..., description='The GitHub repository where the script is kept.'
    )


class AdminPreReceiveHooksPreReceiveHookIdPatchRequest(BaseModel):
    allow_downstream_configuration: Optional[bool] = Field(
        None,
        description='Whether enforcement can be overridden at the org or repo level.',
    )
    enforcement: Optional[str] = Field(
        None, description='The state of enforcement for this hook.'
    )
    environment: Optional[Dict[str, Any]] = Field(
        None, description='The pre-receive environment where the script is executed.'
    )
    name: Optional[str] = Field(None, description='The name of the hook.')
    script: Optional[str] = Field(None, description='The script that the hook runs.')
    script_repository: Optional[Dict[str, Any]] = Field(
        None, description='The GitHub repository where the script is kept.'
    )


class AdminUsersPostRequest(BaseModel):
    email: Optional[str] = Field(
        None,
        description="**Required for built-in authentication.** The user's email address. This parameter can be omitted when using CAS, LDAP, or SAML. For details on built-in and centrally-managed authentication, see the [GitHub authentication guide](https://help.github.com/enterprise/2.21/admin/guides/user-management/authenticating-users-for-your-github-enterprise-server-instance/).",
    )
    login: str = Field(..., description="The user's username.")


class AdminUsersUsernamePatchRequest(BaseModel):
    login: str = Field(..., description="The user's new username.")


class AdminUsersUsernamePatchResponse(BaseModel):
    message: Optional[str] = None
    url: Optional[str] = None


class AdminUsersUsernameAuthorizationsPostRequest(BaseModel):
    scopes: Optional[List[str]] = Field(
        None,
        description='A list of [scopes](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).',
    )


class AppManifestsCodeConversionsPostRequest(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class AppInstallationsInstallationIdGetResponse(BaseModel):
    documentation_url: str
    message: str


class AppInstallationsInstallationIdAccessTokensPostRequest(BaseModel):
    permissions: Optional[AppPermissions] = None
    repositories: Optional[List[str]] = Field(
        None,
        description='List of repository names that the token should have access to',
    )
    repository_ids: Optional[List[int]] = Field(
        None,
        description='List of repository IDs that the token should have access to',
        examples=[[1]],
    )


class AppInstallationsInstallationIdAccessTokensPostResponse(BaseModel):
    documentation_url: str
    message: str


class ApplicationsClientIdGrantDeleteRequest(BaseModel):
    access_token: Optional[str] = Field(
        None,
        description='The OAuth access token used to authenticate to the GitHub API.',
    )


class ApplicationsClientIdTokenDeleteRequest(BaseModel):
    access_token: str = Field(
        ...,
        description='The OAuth access token used to authenticate to the GitHub API.',
    )


class ApplicationsClientIdTokenPatchRequest(BaseModel):
    access_token: str = Field(
        ..., description='The access_token of the OAuth application.'
    )


class ApplicationsClientIdTokenPostRequest(BaseModel):
    access_token: str = Field(
        ..., description='The access_token of the OAuth application.'
    )


class AppsAppSlugGetResponse(BaseModel):
    documentation_url: str
    message: str


class AuthorizationsPostRequest(BaseModel):
    client_id: Optional[constr(max_length=20)] = Field(
        None, description='The OAuth app client key for which to create the token.'
    )
    client_secret: Optional[constr(max_length=40)] = Field(
        None, description='The OAuth app client secret for which to create the token.'
    )
    fingerprint: Optional[str] = Field(
        None,
        description='A unique string to distinguish an authorization from others created for the same client ID and user.',
    )
    note: Optional[str] = Field(
        None,
        description='A note to remind you what the OAuth token is for.',
        examples=['Update all gems'],
    )
    note_url: Optional[str] = Field(
        None, description='A URL to remind you what app the OAuth token is for.'
    )
    scopes: Optional[List[str]] = Field(
        None,
        description='A list of scopes that this authorization is in.',
        examples=[['public_repo', 'user']],
    )


class AuthorizationsClientsClientIdPutRequest(BaseModel):
    client_secret: constr(max_length=40) = Field(
        ..., description='The OAuth app client secret for which to create the token.'
    )
    fingerprint: Optional[str] = Field(
        None,
        description='A unique string to distinguish an authorization from others created for the same client ID and user.',
    )
    note: Optional[str] = Field(
        None,
        description='A note to remind you what the OAuth token is for.',
        examples=['Update all gems'],
    )
    note_url: Optional[str] = Field(
        None, description='A URL to remind you what app the OAuth token is for.'
    )
    scopes: Optional[List[str]] = Field(
        None,
        description='A list of scopes that this authorization is in.',
        examples=[['public_repo', 'user']],
    )


class AuthorizationsClientsClientIdFingerprintPutRequest(BaseModel):
    client_secret: constr(max_length=40) = Field(
        ..., description='The OAuth app client secret for which to create the token.'
    )
    note: Optional[str] = Field(
        None,
        description='A note to remind you what the OAuth token is for.',
        examples=['Update all gems'],
    )
    note_url: Optional[str] = Field(
        None, description='A URL to remind you what app the OAuth token is for.'
    )
    scopes: Optional[List[str]] = Field(
        None,
        description='A list of scopes that this authorization is in.',
        examples=[['public_repo', 'user']],
    )


class AuthorizationsAuthorizationIdPatchRequest(BaseModel):
    add_scopes: Optional[List[str]] = Field(
        None, description='A list of scopes to add to this authorization.'
    )
    fingerprint: Optional[str] = Field(
        None,
        description='A unique string to distinguish an authorization from others created for the same client ID and user.',
    )
    note: Optional[str] = Field(
        None,
        description='A note to remind you what the OAuth token is for.',
        examples=['Update all gems'],
    )
    note_url: Optional[str] = Field(
        None, description='A URL to remind you what app the OAuth token is for.'
    )
    remove_scopes: Optional[List[str]] = Field(
        None, description='A list of scopes to remove from this authorization.'
    )
    scopes: Optional[List[str]] = Field(
        None,
        description='A list of scopes that this authorization is in.',
        examples=[['public_repo', 'user']],
    )


class CodesOfConductGetResponse(RootModel[List[CodeOfConduct]]):
    root: List[CodeOfConduct]


class EmojisGetResponse(RootModel[Optional[Dict[str, str]]]):
    root: Optional[Dict[str, str]] = None


class EventsGetResponse1(BaseModel):
    code: Optional[str] = None
    documentation_url: Optional[str] = None
    message: Optional[str] = None


class Files3(BaseModel):
    content: str = Field(..., description='Content of the file')


class Public(Enum):
    true = 'true'
    false = 'false'


class GistsPostRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='Description of the gist', examples=['Example Ruby script']
    )
    files: Dict[str, Files3] = Field(
        ...,
        description='Names and content for the files that make up the gist',
        examples=[{'hello.rb': {'content': 'puts "Hello, World!"'}}],
    )
    public: Optional[Union[bool, Public]] = None


class Block(BaseModel):
    created_at: Optional[str] = None
    html_url: Optional[str] = None
    reason: Optional[str] = None


class GistsGistIdGetResponse(BaseModel):
    block: Optional[Block] = None
    documentation_url: Optional[str] = None
    message: Optional[str] = None


class Files4(BaseModel):
    content: str = Field(..., description='The new content of the file')
    filename: Optional[str] = Field(None, description='The new filename for the file')


class Files5(BaseModel):
    content: Optional[str] = Field(None, description='The new content of the file')
    filename: str = Field(..., description='The new filename for the file')


class Files6(BaseModel):
    content: Optional[str] = Field(None, description='The new content of the file')
    filename: Optional[str] = Field(None, description='The new filename for the file')


class GistsGistIdPatchRequest1(BaseModel):
    description: str = Field(
        ..., description='Description of the gist', examples=['Example Ruby script']
    )
    files: Optional[Dict[str, Union[Files4, Files5, Files6]]] = Field(
        None,
        description='Names of files to be updated',
        examples=[{'hello.rb': {'content': 'blah', 'filename': 'goodbye.rb'}}],
    )


class Files7(BaseModel):
    content: str = Field(..., description='The new content of the file')
    filename: Optional[str] = Field(None, description='The new filename for the file')


class Files8(BaseModel):
    content: Optional[str] = Field(None, description='The new content of the file')
    filename: str = Field(..., description='The new filename for the file')


class Files9(BaseModel):
    content: Optional[str] = Field(None, description='The new content of the file')
    filename: Optional[str] = Field(None, description='The new filename for the file')


class GistsGistIdPatchRequest2(BaseModel):
    description: Optional[str] = Field(
        None, description='Description of the gist', examples=['Example Ruby script']
    )
    files: Dict[str, Union[Files7, Files8, Files9]] = Field(
        ...,
        description='Names of files to be updated',
        examples=[{'hello.rb': {'content': 'blah', 'filename': 'goodbye.rb'}}],
    )


class GistsGistIdPatchRequest(
    RootModel[Optional[Union[GistsGistIdPatchRequest1, GistsGistIdPatchRequest2]]]
):
    root: Optional[Union[GistsGistIdPatchRequest1, GistsGistIdPatchRequest2]] = None


class GistsGistIdCommentsPostRequest(BaseModel):
    body: constr(max_length=65535) = Field(
        ..., description='The comment text.', examples=['Body of the attachment']
    )


class GistsGistIdCommentsCommentIdGetResponse(BaseModel):
    block: Optional[Block] = None
    documentation_url: Optional[str] = None
    message: Optional[str] = None


class GistsGistIdCommentsCommentIdPatchRequest(BaseModel):
    body: constr(max_length=65535) = Field(
        ..., description='The comment text.', examples=['Body of the attachment']
    )


class GistsGistIdStarGetResponse(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class GitignoreTemplatesGetResponse(RootModel[List[str]]):
    root: List[str]


class Filter(Enum):
    assigned = 'assigned'
    created = 'created'
    mentioned = 'mentioned'
    subscribed = 'subscribed'
    repos = 'repos'
    all = 'all'


class State8(Enum):
    open = 'open'
    closed = 'closed'
    all = 'all'


class Sort6(Enum):
    created = 'created'
    updated = 'updated'
    comments = 'comments'


class LicensesGetResponse(RootModel[List[LicenseSimple]]):
    root: List[LicenseSimple]


class Mode(Enum):
    markdown = 'markdown'
    gfm = 'gfm'


class MarkdownPostRequest(BaseModel):
    context: Optional[str] = Field(
        None,
        description='The repository context to use when creating references in `gfm` mode.',
    )
    mode: Optional[Mode] = Field(
        'markdown', description='The rendering mode.', examples=['markdown']
    )
    text: str = Field(..., description='The Markdown text to render in HTML.')


class NotificationsPutRequest(BaseModel):
    last_read_at: Optional[datetime] = Field(
        None, description='Describes the last point that notifications were checked.'
    )
    read: Optional[bool] = Field(
        None, description='Whether the notification has been read.'
    )


class NotificationsPutResponse(BaseModel):
    message: Optional[str] = None


class NotificationsThreadsThreadIdSubscriptionPutRequest(BaseModel):
    ignored: Optional[bool] = Field(
        False, description='Whether to block all notifications from a thread.'
    )


class OrganizationsGetResponse(RootModel[List[OrganizationSimple]]):
    root: List[OrganizationSimple]


class DefaultRepositoryPermission(Enum):
    read = 'read'
    write = 'write'
    admin = 'admin'
    none = 'none'


class MembersAllowedRepositoryCreationType(Enum):
    all = 'all'
    private = 'private'
    none = 'none'


class OrgsOrgPatchRequest(BaseModel):
    billing_email: Optional[str] = Field(
        None, description='Billing email address. This address is not publicized.'
    )
    blog: Optional[str] = Field(None, examples=['"http://github.blog"'])
    company: Optional[str] = Field(None, description='The company name.')
    default_repository_permission: Optional[DefaultRepositoryPermission] = Field(
        'read',
        description='Default permission level members have for organization repositories:  \n\\* `read` - can pull, but not push to or administer this repository.  \n\\* `write` - can pull and push, but not administer this repository.  \n\\* `admin` - can pull, push, and administer this repository.  \n\\* `none` - no permissions granted by default.',
    )
    description: Optional[str] = Field(
        None, description='The description of the company.'
    )
    email: Optional[str] = Field(
        None, description='The publicly visible email address.'
    )
    has_organization_projects: Optional[bool] = Field(
        None,
        description='Toggles whether an organization can use organization projects.',
    )
    has_repository_projects: Optional[bool] = Field(
        None,
        description='Toggles whether repositories that belong to the organization can use repository projects.',
    )
    location: Optional[str] = Field(None, description='The location.')
    members_allowed_repository_creation_type: Optional[
        MembersAllowedRepositoryCreationType
    ] = Field(
        None,
        description='Specifies which types of repositories non-admin organization members can create. Can be one of:  \n\\* `all` - all organization members can create public and private repositories.  \n\\* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.  \n\\* `none` - only admin members can create repositories.  \n**Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.',
    )
    members_can_create_internal_repositories: Optional[bool] = Field(
        None,
        description='Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:  \n\\* `true` - all organization members can create internal repositories.  \n\\* `false` - only organization owners can create internal repositories.  \nDefault: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.',
    )
    members_can_create_private_repositories: Optional[bool] = Field(
        None,
        description='Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:  \n\\* `true` - all organization members can create private repositories.  \n\\* `false` - only organization owners can create private repositories.  \nDefault: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.',
    )
    members_can_create_public_repositories: Optional[bool] = Field(
        None,
        description='Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:  \n\\* `true` - all organization members can create public repositories.  \n\\* `false` - only organization owners can create public repositories.  \nDefault: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.',
    )
    members_can_create_repositories: Optional[bool] = Field(
        True,
        description='Toggles the ability of non-admin organization members to create repositories. Can be one of:  \n\\* `true` - all organization members can create repositories.  \n\\* `false` - only organization owners can create repositories.  \nDefault: `true`  \n**Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.',
    )
    name: Optional[str] = Field(None, description='The shorthand name of the company.')
    twitter_username: Optional[str] = Field(
        None, description='The Twitter username of the company.'
    )


class OrgsOrgPatchResponse(BaseModel):
    documentation_url: str
    message: str


class OrgsOrgPatchResponse1(RootModel[Union[ValidationError, ValidationErrorSimple]]):
    root: Union[ValidationError, ValidationErrorSimple]


class OrgsOrgHooksGetResponse(RootModel[List[OrgHook]]):
    root: List[OrgHook]


class Config6(BaseModel):
    content_type: Optional[WebhookConfigContentType] = None
    insecure_ssl: Optional[WebhookConfigInsecureSsl] = None
    password: Optional[str] = Field(None, examples=['"password"'])
    secret: Optional[WebhookConfigSecret] = None
    url: WebhookConfigUrl
    username: Optional[str] = Field(None, examples=['"kdaigle"'])


class OrgsOrgHooksPostRequest(BaseModel):
    active: Optional[bool] = Field(
        True,
        description='Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.',
    )
    config: Config6 = Field(
        ...,
        description='Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@2.21/rest/reference/orgs#create-hook-config-params).',
    )
    events: Optional[List[str]] = Field(
        ['push'],
        description='Determines what [events](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads) the hook is triggered for.',
    )
    name: str = Field(..., description='Must be passed as "web".')


class Config7(BaseModel):
    content_type: Optional[WebhookConfigContentType] = None
    insecure_ssl: Optional[WebhookConfigInsecureSsl] = None
    secret: Optional[WebhookConfigSecret] = None
    url: WebhookConfigUrl


class OrgsOrgHooksHookIdPatchRequest(BaseModel):
    active: Optional[bool] = Field(
        True,
        description='Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.',
    )
    config: Optional[Config7] = Field(
        None,
        description='Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@2.21/rest/reference/orgs#update-hook-config-params).',
    )
    events: Optional[List[str]] = Field(
        ['push'],
        description='Determines what [events](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads) the hook is triggered for.',
    )
    name: Optional[str] = Field(None, examples=['"web"'])


class Filter4(Enum):
    field_2fa_disabled = '2fa_disabled'
    all = 'all'


class Role2(Enum):
    all = 'all'
    admin = 'admin'
    member = 'member'


class OrgsOrgMembersGetResponse(RootModel[List[SimpleUser]]):
    root: List[SimpleUser]


class Role4(Enum):
    admin = 'admin'
    member = 'member'


class OrgsOrgMembershipsUsernamePutRequest(BaseModel):
    role: Optional[Role4] = Field(
        'member',
        description='The role to give the user in the organization. Can be one of:  \n\\* `admin` - The user will become an owner of the organization.  \n\\* `member` - The user will become a non-owner member of the organization.',
    )


class OrgsOrgOutsideCollaboratorsGetResponse(RootModel[List[SimpleUser]]):
    root: List[SimpleUser]


class OrgsOrgOutsideCollaboratorsUsernameDeleteResponse(BaseModel):
    documentation_url: Optional[str] = None
    message: Optional[str] = None


class OrgsOrgOutsideCollaboratorsUsernamePutResponse(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class Sort10(Enum):
    created = 'created'
    updated = 'updated'
    name = 'name'


class OrgsOrgPreReceiveHooksGetResponse(RootModel[List[OrgPreReceiveHook]]):
    root: List[OrgPreReceiveHook]


class OrgsOrgPreReceiveHooksPreReceiveHookIdPatchRequest(BaseModel):
    allow_downstream_configuration: Optional[bool] = Field(
        None, description='Whether repositories can override enforcement.'
    )
    enforcement: Optional[str] = Field(
        None, description='The state of enforcement for the hook on this repository.'
    )


class OrgsOrgProjectsGetResponse(RootModel[List[Project]]):
    root: List[Project]


class OrgsOrgProjectsPostRequest(BaseModel):
    body: Optional[str] = Field(None, description='The description of the project.')
    name: str = Field(..., description='The name of the project.')


class OrgsOrgPublicMembersGetResponse(RootModel[List[SimpleUser]]):
    root: List[SimpleUser]


class Type(Enum):
    all = 'all'
    public = 'public'
    private = 'private'
    forks = 'forks'
    sources = 'sources'
    member = 'member'
    internal = 'internal'


class Sort12(Enum):
    created = 'created'
    updated = 'updated'
    pushed = 'pushed'
    full_name = 'full_name'


class Visibility(Enum):
    public = 'public'
    private = 'private'
    visibility = 'visibility'
    internal = 'internal'


class OrgsOrgReposPostRequest(BaseModel):
    allow_merge_commit: Optional[bool] = Field(
        True,
        description='Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.',
    )
    allow_rebase_merge: Optional[bool] = Field(
        True,
        description='Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.',
    )
    allow_squash_merge: Optional[bool] = Field(
        True,
        description='Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.',
    )
    auto_init: Optional[bool] = Field(
        False, description='Pass `true` to create an initial commit with empty README.'
    )
    delete_branch_on_merge: Optional[bool] = Field(
        False,
        description='Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.',
    )
    description: Optional[str] = Field(
        None, description='A short description of the repository.'
    )
    gitignore_template: Optional[str] = Field(
        None,
        description='Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".',
    )
    has_issues: Optional[bool] = Field(
        True,
        description='Either `true` to enable issues for this repository or `false` to disable them.',
    )
    has_projects: Optional[bool] = Field(
        True,
        description="Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
    )
    has_wiki: Optional[bool] = Field(
        True,
        description='Either `true` to enable the wiki for this repository or `false` to disable it.',
    )
    homepage: Optional[str] = Field(
        None, description='A URL with more information about the repository.'
    )
    is_template: Optional[bool] = Field(
        False,
        description='Either `true` to make this repo available as a template repository or `false` to prevent it.',
    )
    license_template: Optional[str] = Field(
        None,
        description='Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".',
    )
    name: str = Field(..., description='The name of the repository.')
    private: Optional[bool] = Field(
        False, description='Whether the repository is private.'
    )
    team_id: Optional[int] = Field(
        None,
        description='The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.',
    )
    visibility: Optional[Visibility] = Field(
        None,
        description='Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.  \nThe `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.',
    )


class OrgsOrgTeamsGetResponse(RootModel[List[TeamModel]]):
    root: List[TeamModel]


class Permission(Enum):
    pull = 'pull'
    push = 'push'
    admin = 'admin'


class Privacy1(Enum):
    secret = 'secret'
    closed = 'closed'


class OrgsOrgTeamsPostRequest(BaseModel):
    description: Optional[str] = Field(None, description='The description of the team.')
    maintainers: Optional[List[str]] = Field(
        None,
        description='List GitHub IDs for organization members who will become team maintainers.',
    )
    name: str = Field(..., description='The name of the team.')
    parent_team_id: Optional[int] = Field(
        None, description='The ID of a team to set as the parent team.'
    )
    permission: Optional[Permission] = Field(
        'pull',
        description='**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.',
    )
    privacy: Optional[Privacy1] = Field(
        None,
        description='The level of privacy this team should have. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \nDefault: `secret`  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.  \nDefault for child team: `closed`',
    )
    repo_names: Optional[List[str]] = Field(
        None,
        description='The full name (e.g., "organization-name/repository-name") of repositories to add the team to.',
    )


class OrgsOrgTeamsTeamSlugPatchRequest(BaseModel):
    description: Optional[str] = Field(None, description='The description of the team.')
    name: Optional[str] = Field(None, description='The name of the team.')
    parent_team_id: Optional[int] = Field(
        None, description='The ID of a team to set as the parent team.'
    )
    permission: Optional[Permission] = Field(
        'pull',
        description='**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.',
    )
    privacy: Optional[Privacy1] = Field(
        None,
        description='The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.',
    )


class OrgsOrgTeamsTeamSlugDiscussionsGetResponse(RootModel[List[TeamDiscussion]]):
    root: List[TeamDiscussion]


class OrgsOrgTeamsTeamSlugDiscussionsPostRequest(BaseModel):
    body: str = Field(..., description="The discussion post's body text.")
    private: Optional[bool] = Field(
        False,
        description='Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.',
    )
    title: str = Field(..., description="The discussion post's title.")


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberPatchRequest(BaseModel):
    body: Optional[str] = Field(None, description="The discussion post's body text.")
    title: Optional[str] = Field(None, description="The discussion post's title.")


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsGetResponse(
    RootModel[List[TeamDiscussionComment]]
):
    root: List[TeamDiscussionComment]


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsPostRequest(BaseModel):
    body: str = Field(..., description="The discussion comment's body text.")


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberPatchRequest(
    BaseModel
):
    body: str = Field(..., description="The discussion comment's body text.")


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberReactionsGetResponse(
    RootModel[List[Reaction]]
):
    root: List[Reaction]


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostRequest(
    BaseModel
):
    content: Content1 = Field(
        ...,
        description='The [reaction type](https://docs.github.com/enterprise-server@2.21/rest/reference/reactions#reaction-types) to add to the team discussion comment.',
    )


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberReactionsGetResponse(
    RootModel[List[Reaction]]
):
    root: List[Reaction]


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberReactionsPostRequest(BaseModel):
    content: Content1 = Field(
        ...,
        description='The [reaction type](https://docs.github.com/enterprise-server@2.21/rest/reference/reactions#reaction-types) to add to the team discussion.',
    )


class Role5(Enum):
    member = 'member'
    maintainer = 'maintainer'
    all = 'all'


class OrgsOrgTeamsTeamSlugMembersGetResponse(RootModel[List[SimpleUser]]):
    root: List[SimpleUser]


class Role7(Enum):
    member = 'member'
    maintainer = 'maintainer'


class OrgsOrgTeamsTeamSlugMembershipsUsernamePutRequest(BaseModel):
    role: Optional[Role7] = Field(
        'member',
        description="The role that this user should have in the team. Can be one of:  \n\\* `member` - a normal member of the team.  \n\\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.",
    )


class OrgsOrgTeamsTeamSlugProjectsGetResponse(RootModel[List[TeamProject]]):
    root: List[TeamProject]


class Permission2(Enum):
    read = 'read'
    write = 'write'
    admin = 'admin'


class OrgsOrgTeamsTeamSlugProjectsProjectIdPutRequest(BaseModel):
    permission: Optional[Permission2] = Field(
        None,
        description='The permission to grant to the team for this project. Can be one of:  \n\\* `read` - team members can read, but not write to or administer this project.  \n\\* `write` - team members can read and write, but not administer this project.  \n\\* `admin` - team members can read, write and administer this project.  \nDefault: the team\'s `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-verbs)."',
    )


class OrgsOrgTeamsTeamSlugProjectsProjectIdPutResponse(BaseModel):
    documentation_url: Optional[str] = None
    message: Optional[str] = None


class Permission3(Enum):
    pull = 'pull'
    push = 'push'
    admin = 'admin'
    maintain = 'maintain'
    triage = 'triage'


class OrgsOrgTeamsTeamSlugReposOwnerRepoPutRequest(BaseModel):
    permission: Optional[Permission3] = Field(
        None,
        description="The permission to grant the team on this repository. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer this repository.  \n\\* `push` - team members can pull and push, but not administer this repository.  \n\\* `admin` - team members can pull, push and administer this repository.  \n\\* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.  \n\\* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.  \n  \nIf no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
    )


class OrgsOrgTeamsTeamSlugTeamsGetResponse(RootModel[List[TeamModel]]):
    root: List[TeamModel]


class ProjectsColumnsCardsCardIdDeleteResponse(BaseModel):
    documentation_url: Optional[str] = None
    errors: Optional[List[str]] = None
    message: Optional[str] = None


class ProjectsColumnsCardsCardIdPatchRequest(BaseModel):
    archived: Optional[bool] = Field(
        None, description='Whether or not the card is archived', examples=[False]
    )
    note: Optional[str] = Field(
        None, description="The project card's note", examples=['Update all gems']
    )


class ProjectsColumnsCardsCardIdMovesPostRequest(BaseModel):
    column_id: Optional[int] = Field(
        None,
        description='The unique identifier of the column the card should be moved to',
        examples=[42],
    )
    position: constr(pattern=r'^(?:top|bottom|after:\d+)$') = Field(
        ...,
        description='The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.',
        examples=['bottom'],
    )


class ProjectsColumnsCardsCardIdMovesPostResponse(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class Error5(BaseModel):
    code: Optional[str] = None
    field: Optional[str] = None
    message: Optional[str] = None
    resource: Optional[str] = None


class ProjectsColumnsCardsCardIdMovesPostResponse1(BaseModel):
    documentation_url: Optional[str] = None
    errors: Optional[List[Error5]] = None
    message: Optional[str] = None


class Error6(BaseModel):
    code: Optional[str] = None
    message: Optional[str] = None


class ProjectsColumnsCardsCardIdMovesPostResponse2(BaseModel):
    code: Optional[str] = None
    documentation_url: Optional[str] = None
    errors: Optional[List[Error6]] = None
    message: Optional[str] = None


class ProjectsColumnsColumnIdPatchRequest(BaseModel):
    name: str = Field(
        ..., description='Name of the project column', examples=['Remaining tasks']
    )


class ArchivedState(Enum):
    all = 'all'
    archived = 'archived'
    not_archived = 'not_archived'


class ProjectsColumnsColumnIdCardsGetResponse(RootModel[List[ProjectCard3]]):
    root: List[ProjectCard3]


class ProjectsColumnsColumnIdCardsPostRequest1(BaseModel):
    note: str = Field(
        ..., description="The project card's note", examples=['Update all gems']
    )


class ProjectsColumnsColumnIdCardsPostRequest2(BaseModel):
    content_id: int = Field(
        ...,
        description='The unique identifier of the content associated with the card',
        examples=[42],
    )
    content_type: str = Field(
        ...,
        description='The piece of content associated with the card',
        examples=['PullRequest'],
    )


class ProjectsColumnsColumnIdCardsPostRequest(
    RootModel[
        Union[
            ProjectsColumnsColumnIdCardsPostRequest1,
            ProjectsColumnsColumnIdCardsPostRequest2,
        ]
    ]
):
    root: Union[
        ProjectsColumnsColumnIdCardsPostRequest1,
        ProjectsColumnsColumnIdCardsPostRequest2,
    ]


class ProjectsColumnsColumnIdCardsPostResponse(
    RootModel[Union[ValidationError, ValidationErrorSimple]]
):
    root: Union[ValidationError, ValidationErrorSimple]


class ProjectsColumnsColumnIdCardsPostResponse1(BaseModel):
    code: Optional[str] = None
    documentation_url: Optional[str] = None
    errors: Optional[List[Error6]] = None
    message: Optional[str] = None


class ProjectsColumnsColumnIdMovesPostRequest(BaseModel):
    position: constr(pattern=r'^(?:first|last|after:\d+)$') = Field(
        ...,
        description='The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.',
        examples=['last'],
    )


class ProjectsColumnsColumnIdMovesPostResponse(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class ProjectsProjectIdDeleteResponse(BaseModel):
    documentation_url: Optional[str] = None
    errors: Optional[List[str]] = None
    message: Optional[str] = None


class ProjectsProjectIdPatchRequest(BaseModel):
    body: Optional[str] = Field(
        None,
        description='Body of the project',
        examples=['This project represents the sprint of the first week in January'],
    )
    name: Optional[str] = Field(
        None, description='Name of the project', examples=['Week One Sprint']
    )
    organization_permission: Optional[OrganizationPermission] = Field(
        None,
        description='The baseline permission that all organization members have on this project',
    )
    private: Optional[bool] = Field(
        None, description='Whether or not this project can be seen by everyone.'
    )
    state: Optional[str] = Field(
        None,
        description="State of the project; either 'open' or 'closed'",
        examples=['open'],
    )


class ProjectsProjectIdPatchResponse(BaseModel):
    documentation_url: Optional[str] = None
    errors: Optional[List[str]] = None
    message: Optional[str] = None


class Affiliation(Enum):
    outside = 'outside'
    direct = 'direct'
    all = 'all'


class ProjectsProjectIdCollaboratorsGetResponse(RootModel[List[SimpleUser]]):
    root: List[SimpleUser]


class ProjectsProjectIdCollaboratorsGetResponse1(BaseModel):
    documentation_url: str
    message: str


class ProjectsProjectIdCollaboratorsUsernameDeleteResponse(BaseModel):
    documentation_url: str
    message: str


class Permission4(Enum):
    read = 'read'
    write = 'write'
    admin = 'admin'


class ProjectsProjectIdCollaboratorsUsernamePutRequest(BaseModel):
    permission: Optional[Permission4] = Field(
        'write',
        description='The permission to grant the collaborator.',
        examples=['write'],
    )


class ProjectsProjectIdCollaboratorsUsernamePutResponse(BaseModel):
    documentation_url: str
    message: str


class ProjectsProjectIdCollaboratorsUsernamePermissionGetResponse(BaseModel):
    documentation_url: str
    message: str


class ProjectsProjectIdColumnsGetResponse(RootModel[List[ProjectColumn]]):
    root: List[ProjectColumn]


class ProjectsProjectIdColumnsPostRequest(BaseModel):
    name: str = Field(
        ..., description='Name of the project column', examples=['Remaining tasks']
    )


class ReactionsReactionIdDeleteResponse(BaseModel):
    documentation_url: str
    message: str


class ReposOwnerRepoDeleteResponse(BaseModel):
    documentation_url: Optional[str] = None
    message: Optional[str] = None


class ReposOwnerRepoPatchRequest(BaseModel):
    allow_forking: Optional[bool] = Field(
        False,
        description='Either `true` to allow private forks, or `false` to prevent private forks.',
    )
    allow_merge_commit: Optional[bool] = Field(
        True,
        description='Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.',
    )
    allow_rebase_merge: Optional[bool] = Field(
        True,
        description='Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.',
    )
    allow_squash_merge: Optional[bool] = Field(
        True,
        description='Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.',
    )
    archived: Optional[bool] = Field(
        False,
        description='`true` to archive this repository. **Note**: You cannot unarchive repositories through the API.',
    )
    default_branch: Optional[str] = Field(
        None, description='Updates the default branch for this repository.'
    )
    delete_branch_on_merge: Optional[bool] = Field(
        False,
        description='Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.',
    )
    description: Optional[str] = Field(
        None, description='A short description of the repository.'
    )
    has_issues: Optional[bool] = Field(
        True,
        description='Either `true` to enable issues for this repository or `false` to disable them.',
    )
    has_projects: Optional[bool] = Field(
        True,
        description="Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
    )
    has_wiki: Optional[bool] = Field(
        True,
        description='Either `true` to enable the wiki for this repository or `false` to disable it.',
    )
    homepage: Optional[str] = Field(
        None, description='A URL with more information about the repository.'
    )
    is_template: Optional[bool] = Field(
        False,
        description='Either `true` to make this repo available as a template repository or `false` to prevent it.',
    )
    name: Optional[str] = Field(None, description='The name of the repository.')
    private: Optional[bool] = Field(
        False,
        description='Either `true` to make the repository private or `false` to make it public. Default: `false`.  \n**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.',
    )
    visibility: Optional[Visibility] = Field(
        None,
        description='Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. The `visibility` parameter overrides the `private` parameter when you use both along with the `nebula-preview` preview header.',
    )


class ReposOwnerRepoAssigneesGetResponse(RootModel[List[SimpleUser]]):
    root: List[SimpleUser]


class ReposOwnerRepoBranchesBranchGetResponse(BaseModel):
    documentation_url: str
    message: str


class DismissalRestrictions2(BaseModel):
    teams: Optional[List[str]] = Field(
        None, description='The list of team `slug`s with dismissal access'
    )
    users: Optional[List[str]] = Field(
        None, description='The list of user `login`s with dismissal access'
    )


class RequiredPullRequestReviews1(BaseModel):
    dismiss_stale_reviews: Optional[bool] = Field(
        None,
        description='Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.',
    )
    dismissal_restrictions: Optional[DismissalRestrictions2] = Field(
        None,
        description='Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.',
    )
    require_code_owner_reviews: Optional[bool] = Field(
        None,
        description='Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) review them.',
    )
    required_approving_review_count: Optional[int] = Field(
        None,
        description='Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6.',
    )


class RequiredStatusChecks1(BaseModel):
    contexts: List[str] = Field(
        ...,
        description='The list of status checks to require in order to merge into this branch',
    )
    strict: bool = Field(
        ..., description='Require branches to be up to date before merging.'
    )


class Restrictions(BaseModel):
    apps: Optional[List[str]] = Field(
        None, description='The list of app `slug`s with push access'
    )
    teams: List[str] = Field(
        ..., description='The list of team `slug`s with push access'
    )
    users: List[str] = Field(
        ..., description='The list of user `login`s with push access'
    )


class ReposOwnerRepoBranchesBranchProtectionPutRequest(BaseModel):
    allow_deletions: Optional[bool] = Field(
        None,
        description='Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.',
    )
    allow_force_pushes: Optional[bool] = Field(
        None,
        description='Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."',
    )
    enforce_admins: bool = Field(
        ...,
        description='Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.',
    )
    required_conversation_resolution: Optional[bool] = Field(
        None,
        description='Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.',
    )
    required_linear_history: Optional[bool] = Field(
        None,
        description='Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://help.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.',
    )
    required_pull_request_reviews: RequiredPullRequestReviews1 = Field(
        ...,
        description='Require at least one approving review on a pull request, before merging. Set to `null` to disable.',
    )
    required_status_checks: RequiredStatusChecks1 = Field(
        ...,
        description='Require status checks to pass before merging. Set to `null` to disable.',
    )
    restrictions: Restrictions = Field(
        ...,
        description='Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.',
    )


class ReposOwnerRepoBranchesBranchProtectionPutResponse(BaseModel):
    documentation_url: str
    message: str


class ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchRequest(
    BaseModel
):
    dismiss_stale_reviews: Optional[bool] = Field(
        None,
        description='Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.',
    )
    dismissal_restrictions: Optional[DismissalRestrictions2] = Field(
        None,
        description='Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.',
    )
    require_code_owner_reviews: Optional[bool] = Field(
        None,
        description='Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) have reviewed.',
    )
    required_approving_review_count: Optional[int] = Field(
        None,
        description='Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6.',
    )


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchRequest(BaseModel):
    contexts: Optional[List[str]] = Field(
        None,
        description='The list of status checks to require in order to merge into this branch',
    )
    strict: Optional[bool] = Field(
        None, description='Require branches to be up to date before merging.'
    )


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteRequest1(
    BaseModel
):
    contexts: List[str] = Field(..., description='contexts parameter')


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteRequest(
    RootModel[
        Union[
            ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteRequest1,
            List[str],
        ]
    ]
):
    root: Union[
        ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteRequest1,
        List[str],
    ]


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteResponse(
    RootModel[List[str]]
):
    root: List[str]


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsGetResponse(
    RootModel[List[str]]
):
    root: List[str]


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostRequest1(
    BaseModel
):
    contexts: List[str] = Field(..., description='contexts parameter')


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostRequest(
    RootModel[
        Union[
            ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostRequest1,
            List[str],
        ]
    ]
):
    root: Union[
        ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostRequest1,
        List[str],
    ]


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostResponse(
    RootModel[List[str]]
):
    root: List[str]


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutRequest1(
    BaseModel
):
    contexts: List[str] = Field(..., description='contexts parameter')


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutRequest(
    RootModel[
        Union[
            ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutRequest1,
            List[str],
        ]
    ]
):
    root: Union[
        ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutRequest1,
        List[str],
    ]


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutResponse(
    RootModel[List[str]]
):
    root: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteRequest1(BaseModel):
    apps: List[str] = Field(..., description='apps parameter')


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteRequest(
    RootModel[
        Union[
            ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteRequest1,
            List[str],
        ]
    ]
):
    root: Union[
        ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteRequest1, List[str]
    ]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostRequest1(BaseModel):
    apps: List[str] = Field(..., description='apps parameter')


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostRequest(
    RootModel[
        Union[
            ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostRequest1,
            List[str],
        ]
    ]
):
    root: Union[
        ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostRequest1, List[str]
    ]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutRequest1(BaseModel):
    apps: List[str] = Field(..., description='apps parameter')


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutRequest(
    RootModel[
        Union[
            ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutRequest1, List[str]
        ]
    ]
):
    root: Union[
        ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutRequest1, List[str]
    ]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteRequest1(BaseModel):
    teams: List[str] = Field(..., description='teams parameter')


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteRequest(
    RootModel[
        Union[
            ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteRequest1,
            List[str],
        ]
    ]
):
    root: Union[
        ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteRequest1, List[str]
    ]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteResponse(
    RootModel[List[TeamModel]]
):
    root: List[TeamModel]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsGetResponse(
    RootModel[List[TeamModel]]
):
    root: List[TeamModel]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostRequest1(BaseModel):
    teams: List[str] = Field(..., description='teams parameter')


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostRequest(
    RootModel[
        Union[
            ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostRequest1,
            List[str],
        ]
    ]
):
    root: Union[
        ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostRequest1, List[str]
    ]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostResponse(
    RootModel[List[TeamModel]]
):
    root: List[TeamModel]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutRequest1(BaseModel):
    teams: List[str] = Field(..., description='teams parameter')


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutRequest(
    RootModel[
        Union[
            ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutRequest1,
            List[str],
        ]
    ]
):
    root: Union[
        ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutRequest1, List[str]
    ]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutResponse(
    RootModel[List[TeamModel]]
):
    root: List[TeamModel]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteRequest1(BaseModel):
    users: List[str] = Field(..., description='users parameter')


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteRequest(
    RootModel[
        Union[
            ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteRequest1,
            List[str],
        ]
    ]
):
    root: Union[
        ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteRequest1, List[str]
    ]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteResponse(
    RootModel[List[SimpleUser]]
):
    root: List[SimpleUser]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersGetResponse(
    RootModel[List[SimpleUser]]
):
    root: List[SimpleUser]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostRequest1(BaseModel):
    users: List[str] = Field(..., description='users parameter')


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostRequest(
    RootModel[
        Union[
            ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostRequest1,
            List[str],
        ]
    ]
):
    root: Union[
        ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostRequest1, List[str]
    ]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostResponse(
    RootModel[List[SimpleUser]]
):
    root: List[SimpleUser]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutRequest1(BaseModel):
    users: List[str] = Field(..., description='users parameter')


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutRequest(
    RootModel[
        Union[
            ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutRequest1,
            List[str],
        ]
    ]
):
    root: Union[
        ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutRequest1, List[str]
    ]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutResponse(
    RootModel[List[SimpleUser]]
):
    root: List[SimpleUser]


class Action(BaseModel):
    description: constr(max_length=40) = Field(
        ...,
        description='A short explanation of what this action would do. The maximum size is 40 characters.',
    )
    identifier: constr(max_length=20) = Field(
        ...,
        description="A reference for the action on the integrator's system. The maximum size is 20 characters.",
    )
    label: constr(max_length=20) = Field(
        ...,
        description='The text to be displayed on a button in the web UI. The maximum size is 20 characters.',
    )


class Conclusion2(Enum):
    action_required = 'action_required'
    cancelled = 'cancelled'
    failure = 'failure'
    neutral = 'neutral'
    success = 'success'
    skipped = 'skipped'
    stale = 'stale'
    timed_out = 'timed_out'


class AnnotationLevel(Enum):
    notice = 'notice'
    warning = 'warning'
    failure = 'failure'


class Annotation(BaseModel):
    annotation_level: AnnotationLevel = Field(
        ...,
        description='The level of the annotation. Can be one of `notice`, `warning`, or `failure`.',
    )
    end_column: Optional[int] = Field(
        None,
        description='The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.',
    )
    end_line: int = Field(..., description='The end line of the annotation.')
    message: str = Field(
        ...,
        description='A short description of the feedback for these lines of code. The maximum size is 64 KB.',
    )
    path: str = Field(
        ...,
        description='The path of the file to add an annotation to. For example, `assets/css/main.css`.',
    )
    raw_details: Optional[str] = Field(
        None, description='Details about this annotation. The maximum size is 64 KB.'
    )
    start_column: Optional[int] = Field(
        None,
        description='The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.',
    )
    start_line: int = Field(..., description='The start line of the annotation.')
    title: Optional[str] = Field(
        None,
        description='The title that represents the annotation. The maximum size is 255 characters.',
    )


class Image(BaseModel):
    alt: str = Field(..., description='The alternative text for the image.')
    caption: Optional[str] = Field(None, description='A short image description.')
    image_url: str = Field(..., description='The full URL of the image.')


class Output1(BaseModel):
    annotations: Optional[List[Annotation]] = Field(
        None,
        description='Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see "[About status checks](https://help.github.com/articles/about-status-checks#checks)". See the [`annotations` object](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#annotations-object) description for details about how to use this parameter.',
        max_length=50,
    )
    images: Optional[List[Image]] = Field(
        None,
        description='Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#images-object) description for details.',
    )
    summary: constr(max_length=65535) = Field(
        ...,
        description='The summary of the check run. This parameter supports Markdown.',
    )
    text: Optional[constr(max_length=65535)] = Field(
        None,
        description='The details of the check run. This parameter supports Markdown.',
    )
    title: str = Field(..., description='The title of the check run.')


class Status6(Enum):
    queued = 'queued'
    in_progress = 'in_progress'
    completed = 'completed'
    completed_1 = 'completed'


class ReposOwnerRepoCheckRunsPostRequest1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    actions: Optional[List[Action]] = Field(
        None,
        description='Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#check-runs-and-requested-actions)." To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#check-runs-and-requested-actions)."',
        max_length=3,
    )
    completed_at: Optional[datetime] = Field(
        None,
        description='The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
    )
    conclusion: Conclusion2 = Field(
        ...,
        description='**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`. When the conclusion is `action_required`, additional details should be provided on the site specified by `details_url`.  \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.',
    )
    details_url: Optional[str] = Field(
        None,
        description="The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.",
    )
    external_id: Optional[str] = Field(
        None, description="A reference for the run on the integrator's system."
    )
    head_sha: str = Field(..., description='The SHA of the commit.')
    name: str = Field(
        ..., description='The name of the check. For example, "code-coverage".'
    )
    output: Optional[Output1] = Field(
        None,
        description='Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#output-object) description.',
    )
    started_at: Optional[datetime] = Field(
        None,
        description='The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
    )
    status: Status6 = Field(
        ...,
        description='The current status. Can be one of `queued`, `in_progress`, or `completed`.',
    )


class Annotation1(BaseModel):
    annotation_level: AnnotationLevel = Field(
        ...,
        description='The level of the annotation. Can be one of `notice`, `warning`, or `failure`.',
    )
    end_column: Optional[int] = Field(
        None,
        description='The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.',
    )
    end_line: int = Field(..., description='The end line of the annotation.')
    message: str = Field(
        ...,
        description='A short description of the feedback for these lines of code. The maximum size is 64 KB.',
    )
    path: str = Field(
        ...,
        description='The path of the file to add an annotation to. For example, `assets/css/main.css`.',
    )
    raw_details: Optional[str] = Field(
        None, description='Details about this annotation. The maximum size is 64 KB.'
    )
    start_column: Optional[int] = Field(
        None,
        description='The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.',
    )
    start_line: int = Field(..., description='The start line of the annotation.')
    title: Optional[str] = Field(
        None,
        description='The title that represents the annotation. The maximum size is 255 characters.',
    )


class Output2(BaseModel):
    annotations: Optional[List[Annotation1]] = Field(
        None,
        description='Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see "[About status checks](https://help.github.com/articles/about-status-checks#checks)". See the [`annotations` object](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#annotations-object) description for details about how to use this parameter.',
        max_length=50,
    )
    images: Optional[List[Image]] = Field(
        None,
        description='Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#images-object) description for details.',
    )
    summary: constr(max_length=65535) = Field(
        ...,
        description='The summary of the check run. This parameter supports Markdown.',
    )
    text: Optional[constr(max_length=65535)] = Field(
        None,
        description='The details of the check run. This parameter supports Markdown.',
    )
    title: str = Field(..., description='The title of the check run.')


class Status7(Enum):
    queued = 'queued'
    in_progress = 'in_progress'
    completed = 'completed'
    completed_1 = 'completed'
    queued_1 = 'queued'
    in_progress_1 = 'in_progress'


class ReposOwnerRepoCheckRunsPostRequest2(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    actions: Optional[List[Action]] = Field(
        None,
        description='Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#check-runs-and-requested-actions)." To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#check-runs-and-requested-actions)."',
        max_length=3,
    )
    completed_at: Optional[datetime] = Field(
        None,
        description='The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
    )
    conclusion: Conclusion2 = Field(
        ...,
        description='**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`. When the conclusion is `action_required`, additional details should be provided on the site specified by `details_url`.  \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.',
    )
    details_url: Optional[str] = Field(
        None,
        description="The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.",
    )
    external_id: Optional[str] = Field(
        None, description="A reference for the run on the integrator's system."
    )
    head_sha: str = Field(..., description='The SHA of the commit.')
    name: str = Field(
        ..., description='The name of the check. For example, "code-coverage".'
    )
    output: Optional[Output2] = Field(
        None,
        description='Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#output-object) description.',
    )
    started_at: Optional[datetime] = Field(
        None,
        description='The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
    )
    status: Status7 = Field(
        ...,
        description='The current status. Can be one of `queued`, `in_progress`, or `completed`.',
    )


class ReposOwnerRepoCheckRunsPostRequest(
    RootModel[
        Union[ReposOwnerRepoCheckRunsPostRequest1, ReposOwnerRepoCheckRunsPostRequest2]
    ]
):
    root: Union[
        ReposOwnerRepoCheckRunsPostRequest1, ReposOwnerRepoCheckRunsPostRequest2
    ]


class Annotation2(BaseModel):
    annotation_level: AnnotationLevel = Field(
        ...,
        description='The level of the annotation. Can be one of `notice`, `warning`, or `failure`.',
    )
    end_column: Optional[int] = Field(
        None,
        description='The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.',
    )
    end_line: int = Field(..., description='The end line of the annotation.')
    message: str = Field(
        ...,
        description='A short description of the feedback for these lines of code. The maximum size is 64 KB.',
    )
    path: str = Field(
        ...,
        description='The path of the file to add an annotation to. For example, `assets/css/main.css`.',
    )
    raw_details: Optional[str] = Field(
        None, description='Details about this annotation. The maximum size is 64 KB.'
    )
    start_column: Optional[int] = Field(
        None,
        description='The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.',
    )
    start_line: int = Field(..., description='The start line of the annotation.')
    title: Optional[str] = Field(
        None,
        description='The title that represents the annotation. The maximum size is 255 characters.',
    )


class Output3(BaseModel):
    annotations: Optional[List[Annotation2]] = Field(
        None,
        description='Adds information from your analysis to specific lines of code. Annotations are visible in GitHub\'s pull request UI. Annotations are visible in GitHub\'s pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see "[About status checks](https://help.github.com/articles/about-status-checks#checks)". See the [`annotations` object](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#annotations-object-1) description for details.',
        max_length=50,
    )
    images: Optional[List[Image]] = Field(
        None,
        description='Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#annotations-object-1) description for details.',
    )
    summary: constr(max_length=65535) = Field(..., description='Can contain Markdown.')
    text: Optional[constr(max_length=65535)] = Field(
        None, description='Can contain Markdown.'
    )
    title: Optional[str] = Field(None, description='**Required**.')


class Status8(Enum):
    queued = 'queued'
    in_progress = 'in_progress'
    completed = 'completed'
    completed_1 = 'completed'


class ReposOwnerRepoCheckRunsCheckRunIdPatchRequest1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    actions: Optional[List[Action]] = Field(
        None,
        description='Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#check-runs-and-requested-actions)."',
        max_length=3,
    )
    completed_at: Optional[datetime] = Field(
        None,
        description='The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
    )
    conclusion: Conclusion2 = Field(
        ...,
        description='**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`.  \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.',
    )
    details_url: Optional[str] = Field(
        None,
        description="The URL of the integrator's site that has the full details of the check.",
    )
    external_id: Optional[str] = Field(
        None, description="A reference for the run on the integrator's system."
    )
    name: Optional[str] = Field(
        None, description='The name of the check. For example, "code-coverage".'
    )
    output: Optional[Output3] = Field(
        None,
        description='Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#output-object-1) description.',
    )
    started_at: Optional[datetime] = Field(
        None,
        description='This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
    )
    status: Optional[Status8] = Field(
        None,
        description='The current status. Can be one of `queued`, `in_progress`, or `completed`.',
    )


class Annotation3(BaseModel):
    annotation_level: AnnotationLevel = Field(
        ...,
        description='The level of the annotation. Can be one of `notice`, `warning`, or `failure`.',
    )
    end_column: Optional[int] = Field(
        None,
        description='The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.',
    )
    end_line: int = Field(..., description='The end line of the annotation.')
    message: str = Field(
        ...,
        description='A short description of the feedback for these lines of code. The maximum size is 64 KB.',
    )
    path: str = Field(
        ...,
        description='The path of the file to add an annotation to. For example, `assets/css/main.css`.',
    )
    raw_details: Optional[str] = Field(
        None, description='Details about this annotation. The maximum size is 64 KB.'
    )
    start_column: Optional[int] = Field(
        None,
        description='The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.',
    )
    start_line: int = Field(..., description='The start line of the annotation.')
    title: Optional[str] = Field(
        None,
        description='The title that represents the annotation. The maximum size is 255 characters.',
    )


class Output4(BaseModel):
    annotations: Optional[List[Annotation3]] = Field(
        None,
        description='Adds information from your analysis to specific lines of code. Annotations are visible in GitHub\'s pull request UI. Annotations are visible in GitHub\'s pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see "[About status checks](https://help.github.com/articles/about-status-checks#checks)". See the [`annotations` object](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#annotations-object-1) description for details.',
        max_length=50,
    )
    images: Optional[List[Image]] = Field(
        None,
        description='Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#annotations-object-1) description for details.',
    )
    summary: constr(max_length=65535) = Field(..., description='Can contain Markdown.')
    text: Optional[constr(max_length=65535)] = Field(
        None, description='Can contain Markdown.'
    )
    title: Optional[str] = Field(None, description='**Required**.')


class Status9(Enum):
    queued = 'queued'
    in_progress = 'in_progress'
    completed = 'completed'
    completed_1 = 'completed'
    queued_1 = 'queued'
    in_progress_1 = 'in_progress'


class ReposOwnerRepoCheckRunsCheckRunIdPatchRequest2(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    actions: Optional[List[Action]] = Field(
        None,
        description='Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#check-runs-and-requested-actions)."',
        max_length=3,
    )
    completed_at: Optional[datetime] = Field(
        None,
        description='The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
    )
    conclusion: Optional[Conclusion2] = Field(
        None,
        description='**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`.  \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.',
    )
    details_url: Optional[str] = Field(
        None,
        description="The URL of the integrator's site that has the full details of the check.",
    )
    external_id: Optional[str] = Field(
        None, description="A reference for the run on the integrator's system."
    )
    name: Optional[str] = Field(
        None, description='The name of the check. For example, "code-coverage".'
    )
    output: Optional[Output4] = Field(
        None,
        description='Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#output-object-1) description.',
    )
    started_at: Optional[datetime] = Field(
        None,
        description='This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
    )
    status: Optional[Status9] = Field(
        None,
        description='The current status. Can be one of `queued`, `in_progress`, or `completed`.',
    )


class ReposOwnerRepoCheckRunsCheckRunIdPatchRequest(
    RootModel[
        Union[
            ReposOwnerRepoCheckRunsCheckRunIdPatchRequest1,
            ReposOwnerRepoCheckRunsCheckRunIdPatchRequest2,
        ]
    ]
):
    root: Union[
        ReposOwnerRepoCheckRunsCheckRunIdPatchRequest1,
        ReposOwnerRepoCheckRunsCheckRunIdPatchRequest2,
    ]


class ReposOwnerRepoCheckRunsCheckRunIdAnnotationsGetResponse(
    RootModel[List[CheckAnnotation]]
):
    root: List[CheckAnnotation]


class ReposOwnerRepoCheckSuitesPostRequest(BaseModel):
    head_sha: str = Field(..., description='The sha of the head commit.')


class AutoTriggerCheck1(BaseModel):
    app_id: int = Field(..., description='The `id` of the GitHub App.')
    setting: bool = Field(
        ...,
        description='Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.',
    )


class ReposOwnerRepoCheckSuitesPreferencesPatchRequest(BaseModel):
    auto_trigger_checks: Optional[List[AutoTriggerCheck1]] = Field(
        None,
        description='Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#auto_trigger_checks-object) description for details.',
    )


class Status10(Enum):
    queued = 'queued'
    in_progress = 'in_progress'
    completed = 'completed'


class Filter8(Enum):
    latest = 'latest'
    all = 'all'


class ReposOwnerRepoCheckSuitesCheckSuiteIdRerequestPostResponse(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class ReposOwnerRepoCollaboratorsGetResponse(RootModel[List[Collaborator]]):
    root: List[Collaborator]


class Permission5(Enum):
    pull = 'pull'
    push = 'push'
    admin = 'admin'
    maintain = 'maintain'
    triage = 'triage'


class ReposOwnerRepoCollaboratorsUsernamePutRequest(BaseModel):
    permission: Optional[Permission5] = Field(
        'push',
        description='The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:  \n\\* `pull` - can pull, but not push to or administer this repository.  \n\\* `push` - can pull and push, but not administer this repository.  \n\\* `admin` - can pull, push and administer this repository.  \n\\* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.  \n\\* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access. \n\\* custom repository role name - Can assign a custom repository role if the owning organization has defined any.',
    )
    permissions: Optional[str] = Field(None, examples=['"push"'])


class ReposOwnerRepoCommentsCommentIdPatchRequest(BaseModel):
    body: str = Field(..., description='The contents of the comment')


class ReposOwnerRepoCommentsCommentIdReactionsGetResponse(RootModel[List[Reaction]]):
    root: List[Reaction]


class ReposOwnerRepoCommentsCommentIdReactionsGetResponse1(BaseModel):
    documentation_url: str
    message: str


class ReposOwnerRepoCommentsCommentIdReactionsPostRequest(BaseModel):
    content: Content1 = Field(
        ...,
        description='The [reaction type](https://docs.github.com/enterprise-server@2.21/rest/reference/reactions#reaction-types) to add to the commit comment.',
    )


class ReposOwnerRepoCommentsCommentIdReactionsPostResponse(BaseModel):
    documentation_url: str
    message: str


class ReposOwnerRepoCommitsCommitShaBranchesWhereHeadGetResponse(
    RootModel[List[BranchShort]]
):
    root: List[BranchShort]


class ReposOwnerRepoCommitsCommitShaBranchesWhereHeadGetResponse1(BaseModel):
    documentation_url: str
    message: str


class ReposOwnerRepoCommitsCommitShaCommentsPostRequest(BaseModel):
    body: str = Field(..., description='The contents of the comment.')
    line: Optional[int] = Field(
        None,
        description='**Deprecated**. Use **position** parameter instead. Line number in the file to comment on.',
    )
    path: Optional[str] = Field(
        None, description='Relative path of the file to comment on.'
    )
    position: Optional[int] = Field(
        None, description='Line index in the diff to comment on.'
    )


class ReposOwnerRepoCommitsCommitShaPullsGetResponse1(BaseModel):
    documentation_url: str
    message: str


class ReposOwnerRepoCommitsRefStatusesGetResponse(RootModel[List[Status5]]):
    root: List[Status5]


class ReposOwnerRepoContentReferencesContentReferenceIdAttachmentsPostRequest(
    BaseModel
):
    body: constr(max_length=262144) = Field(
        ...,
        description='The body of the attachment',
        examples=['Body of the attachment'],
    )
    title: constr(max_length=1024) = Field(
        ...,
        description='The title of the attachment',
        examples=['Title of the attachment'],
    )


class ReposOwnerRepoContentReferencesContentReferenceIdAttachmentsPostResponse(
    BaseModel
):
    documentation_url: str
    message: str


class Author5(BaseModel):
    email: Optional[str] = Field(
        None, description='The email of the author (or committer) of the commit'
    )
    name: Optional[str] = Field(
        None, description='The name of the author (or committer) of the commit'
    )


class Committer4(BaseModel):
    email: Optional[str] = Field(
        None, description='The email of the author (or committer) of the commit'
    )
    name: Optional[str] = Field(
        None, description='The name of the author (or committer) of the commit'
    )


class ReposOwnerRepoContentsPathDeleteRequest(BaseModel):
    author: Optional[Author5] = Field(
        None, description='object containing information about the author.'
    )
    branch: Optional[str] = Field(
        None,
        description='The branch name. Default: the repository’s default branch (usually `master`)',
    )
    committer: Optional[Committer4] = Field(
        None, description='object containing information about the committer.'
    )
    message: str = Field(..., description='The commit message.')
    sha: str = Field(..., description='The blob SHA of the file being replaced.')


class ReposOwnerRepoContentsPathDeleteResponse(BaseModel):
    code: Optional[str] = None
    documentation_url: Optional[str] = None
    message: Optional[str] = None


class ReposOwnerRepoContentsPathGetResponse(
    RootModel[Union[ContentDirectory, ContentFile, ContentSymlink, ContentSubmodule]]
):
    root: Union[ContentDirectory, ContentFile, ContentSymlink, ContentSubmodule]


class Author6(BaseModel):
    date: Optional[str] = Field(None, examples=['"2013-01-15T17:13:22+05:00"'])
    email: str = Field(
        ...,
        description="The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.",
    )
    name: str = Field(
        ...,
        description="The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
    )


class Committer5(BaseModel):
    date: Optional[str] = Field(None, examples=['"2013-01-05T13:13:22+05:00"'])
    email: str = Field(
        ...,
        description="The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.",
    )
    name: str = Field(
        ...,
        description="The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
    )


class ReposOwnerRepoContentsPathPutRequest(BaseModel):
    author: Optional[Author6] = Field(
        None,
        description='The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.',
    )
    branch: Optional[str] = Field(
        None,
        description='The branch name. Default: the repository’s default branch (usually `master`)',
    )
    committer: Optional[Committer5] = Field(
        None,
        description='The person that committed the file. Default: the authenticated user.',
    )
    content: str = Field(
        ..., description='The new file content, using Base64 encoding.'
    )
    message: str = Field(..., description='The commit message.')
    sha: Optional[str] = Field(
        None,
        description='**Required if you are updating a file**. The blob SHA of the file being replaced.',
    )


class ReposOwnerRepoContributorsGetResponse(RootModel[List[Contributor]]):
    root: List[Contributor]


class ReposOwnerRepoDeploymentsPostRequest(BaseModel):
    auto_merge: Optional[bool] = Field(
        True,
        description="Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.",
    )
    description: Optional[str] = Field(
        '', description='Short description of the deployment.'
    )
    environment: Optional[str] = Field(
        'production',
        description='Name for the target deployment environment (e.g., `production`, `staging`, `qa`).',
    )
    payload: Optional[Union[Dict[str, Any], str]] = None
    production_environment: Optional[bool] = Field(
        None,
        description='Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@2.21/rest/overview/api-previews#enhanced-deployments) custom media type.',
    )
    ref: str = Field(
        ..., description='The ref to deploy. This can be a branch, tag, or SHA.'
    )
    required_contexts: Optional[List[str]] = Field(
        None,
        description='The [status](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.',
    )
    task: Optional[str] = Field(
        'deploy',
        description='Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).',
    )
    transient_environment: Optional[bool] = Field(
        False,
        description='Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@2.21/rest/overview/api-previews#enhanced-deployments) custom media type.',
    )


class ReposOwnerRepoDeploymentsPostResponse(BaseModel):
    message: Optional[str] = None


class Environment1(Enum):
    production = 'production'
    staging = 'staging'
    qa = 'qa'


class State14(Enum):
    error = 'error'
    failure = 'failure'
    inactive = 'inactive'
    in_progress = 'in_progress'
    queued = 'queued'
    pending = 'pending'
    success = 'success'


class ReposOwnerRepoDeploymentsDeploymentIdStatusesPostRequest(BaseModel):
    auto_inactive: Optional[bool] = Field(
        None,
        description="Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`  \n**Note:** To add an `inactive` status to `production` environments, you must use the [`application/vnd.github.flash-preview+json`](https://docs.github.com/enterprise-server@2.21/rest/overview/api-previews#deployment-statuses) custom media type.  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@2.21/rest/overview/api-previews#enhanced-deployments) custom media type.",
    )
    description: Optional[str] = Field(
        '',
        description='A short description of the status. The maximum description length is 140 characters.',
    )
    environment: Optional[Environment1] = Field(
        None,
        description='Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. **Note:** This parameter requires you to use the [`application/vnd.github.flash-preview+json`](https://docs.github.com/enterprise-server@2.21/rest/overview/api-previews#deployment-statuses) custom media type.',
    )
    environment_url: Optional[str] = Field(
        '',
        description='Sets the URL for accessing your environment. Default: `""`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@2.21/rest/overview/api-previews#enhanced-deployments) custom media type.',
    )
    log_url: Optional[str] = Field(
        '',
        description='The full URL of the deployment\'s output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@2.21/rest/overview/api-previews#enhanced-deployments) custom media type.',
    )
    state: State14 = Field(
        ...,
        description='The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued` `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@2.21/rest/overview/api-previews#enhanced-deployments) custom media type. To use the `in_progress` and `queued` states, you must provide the [`application/vnd.github.flash-preview+json`](https://docs.github.com/enterprise-server@2.21/rest/overview/api-previews#deployment-statuses) custom media type. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.',
    )
    target_url: Optional[str] = Field(
        '',
        description="The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.",
    )


class ReposOwnerRepoDeploymentsDeploymentIdStatusesStatusIdGetResponse(BaseModel):
    documentation_url: str
    message: str


class ReposOwnerRepoDispatchesPostRequest(BaseModel):
    client_payload: Optional[Dict[str, Any]] = Field(
        None,
        description='JSON payload with extra information about the webhook event that your action or worklow may use.',
    )
    event_type: constr(min_length=1, max_length=100) = Field(
        ..., description='A custom webhook event name.'
    )


class Sort14(Enum):
    newest = 'newest'
    oldest = 'oldest'
    stargazers = 'stargazers'
    watchers = 'watchers'


class ReposOwnerRepoForksPostRequest(BaseModel):
    organization: Optional[str] = Field(
        None,
        description='Optional parameter to specify the organization name if forking into an organization.',
    )


class ReposOwnerRepoGitBlobsPostRequest(BaseModel):
    content: str = Field(..., description="The new blob's content.")
    encoding: Optional[str] = Field(
        'utf-8',
        description='The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.',
    )


class Author7(BaseModel):
    date: Optional[datetime] = Field(
        None,
        description='Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
    )
    email: str = Field(
        ..., description='The email of the author (or committer) of the commit'
    )
    name: str = Field(
        ..., description='The name of the author (or committer) of the commit'
    )


class Committer6(BaseModel):
    date: Optional[datetime] = Field(
        None,
        description='Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
    )
    email: Optional[str] = Field(
        None, description='The email of the author (or committer) of the commit'
    )
    name: Optional[str] = Field(
        None, description='The name of the author (or committer) of the commit'
    )


class ReposOwnerRepoGitCommitsPostRequest(BaseModel):
    author: Optional[Author7] = Field(
        None,
        description='Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.',
    )
    committer: Optional[Committer6] = Field(
        None,
        description='Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.',
    )
    message: str = Field(..., description='The commit message')
    parents: Optional[List[str]] = Field(
        None,
        description='The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.',
    )
    signature: Optional[str] = Field(
        None,
        description='The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.',
    )
    tree: str = Field(
        ..., description='The SHA of the tree object this commit points to'
    )


class ReposOwnerRepoGitMatchingRefsRefGetResponse(RootModel[List[GitRef]]):
    root: List[GitRef]


class ReposOwnerRepoGitRefsPostRequest(BaseModel):
    key: Optional[str] = Field(None, examples=['"refs/heads/newbranch"'])
    ref: str = Field(
        ...,
        description="The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.",
    )
    sha: str = Field(..., description='The SHA1 value for this reference.')


class ReposOwnerRepoGitRefsRefPatchRequest(BaseModel):
    force: Optional[bool] = Field(
        False,
        description="Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.",
    )
    sha: str = Field(..., description='The SHA1 value to set this reference to')


class Tagger1(BaseModel):
    date: Optional[datetime] = Field(
        None,
        description='When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
    )
    email: str = Field(..., description='The email of the author of the tag')
    name: str = Field(..., description='The name of the author of the tag')


class Type2(Enum):
    commit = 'commit'
    tree = 'tree'
    blob = 'blob'


class ReposOwnerRepoGitTagsPostRequest(BaseModel):
    message: str = Field(..., description='The tag message.')
    object: str = Field(..., description='The SHA of the git object this is tagging.')
    tag: str = Field(
        ...,
        description='The tag\'s name. This is typically a version (e.g., "v0.0.1").',
    )
    tagger: Optional[Tagger1] = Field(
        None,
        description='An object with information about the individual creating the tag.',
    )
    type: Type2 = Field(
        ...,
        description="The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.",
    )


class Mode1(Enum):
    field_100644 = '100644'
    field_100755 = '100755'
    field_040000 = '040000'
    field_160000 = '160000'
    field_120000 = '120000'


class Type3(Enum):
    blob = 'blob'
    tree = 'tree'
    commit = 'commit'


class TreeItem1(BaseModel):
    content: Optional[str] = Field(
        None,
        description='The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.',
    )
    mode: Optional[Mode1] = Field(
        None,
        description='The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.',
    )
    path: Optional[str] = Field(None, description='The file referenced in the tree.')
    sha: Optional[str] = Field(
        None,
        description='The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.',
    )
    type: Optional[Type3] = Field(
        None, description='Either `blob`, `tree`, or `commit`.'
    )


class ReposOwnerRepoGitTreesPostRequest(BaseModel):
    base_tree: Optional[str] = Field(
        None,
        description="The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.\nIf not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.\n",
    )
    tree: List[TreeItem1] = Field(
        ...,
        description='Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.',
    )


class Config8(BaseModel):
    content_type: Optional[WebhookConfigContentType] = None
    digest: Optional[str] = Field(None, examples=['"sha256"'])
    insecure_ssl: Optional[WebhookConfigInsecureSsl] = None
    secret: Optional[WebhookConfigSecret] = None
    token: Optional[str] = Field(None, examples=['"abc"'])
    url: Optional[WebhookConfigUrl] = None


class ReposOwnerRepoHooksPostRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    active: Optional[bool] = Field(
        True,
        description='Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.',
    )
    config: Optional[Config8] = Field(
        None,
        description='Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#create-hook-config-params).',
    )
    events: Optional[List[str]] = Field(
        ['push'],
        description='Determines what [events](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads) the hook is triggered for.',
    )
    name: Optional[str] = Field(
        None,
        description='Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.',
    )


class Config9(BaseModel):
    address: Optional[str] = Field(None, examples=['"bar@example.com"'])
    content_type: Optional[WebhookConfigContentType] = None
    insecure_ssl: Optional[WebhookConfigInsecureSsl] = None
    room: Optional[str] = Field(None, examples=['"The Serious Room"'])
    secret: Optional[WebhookConfigSecret] = None
    url: WebhookConfigUrl


class ReposOwnerRepoHooksHookIdPatchRequest(BaseModel):
    active: Optional[bool] = Field(
        True,
        description='Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.',
    )
    add_events: Optional[List[str]] = Field(
        None,
        description='Determines a list of events to be added to the list of events that the Hook triggers for.',
    )
    config: Optional[Config9] = Field(
        None,
        description='Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#create-hook-config-params).',
    )
    events: Optional[List[str]] = Field(
        ['push'],
        description='Determines what [events](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.',
    )
    remove_events: Optional[List[str]] = Field(
        None,
        description='Determines a list of events to be removed from the list of events that the Hook triggers for.',
    )


class Permissions19(Enum):
    read = 'read'
    write = 'write'
    maintain = 'maintain'
    triage = 'triage'
    admin = 'admin'


class ReposOwnerRepoInvitationsInvitationIdPatchRequest(BaseModel):
    permissions: Optional[Permissions19] = Field(
        None,
        description='The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.',
    )


class State15(Enum):
    open = 'open'
    closed = 'closed'
    all = 'all'


class Sort16(Enum):
    created = 'created'
    updated = 'updated'
    comments = 'comments'


class Labels1(BaseModel):
    color: Optional[str] = None
    description: Optional[str] = None
    id: Optional[int] = None
    name: Optional[str] = None


class ReposOwnerRepoIssuesPostRequest(BaseModel):
    assignee: Optional[str] = Field(
        None,
        description='Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_',
    )
    assignees: Optional[List[str]] = Field(
        None,
        description='Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._',
    )
    body: Optional[str] = Field(None, description='The contents of the issue.')
    labels: Optional[List[Union[str, Labels1]]] = Field(
        None,
        description='Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._',
    )
    milestone: Optional[Union[str, int]] = None
    title: Union[str, int] = Field(..., description='The title of the issue.')


class ReposOwnerRepoIssuesPostResponse(BaseModel):
    code: Optional[str] = None
    documentation_url: Optional[str] = None
    message: Optional[str] = None


class Sort18(Enum):
    created = 'created'
    updated = 'updated'


class ReposOwnerRepoIssuesCommentsCommentIdPatchRequest(BaseModel):
    body: str = Field(..., description='The contents of the comment.')


class ReposOwnerRepoIssuesCommentsCommentIdReactionsGetResponse(
    RootModel[List[Reaction]]
):
    root: List[Reaction]


class ReposOwnerRepoIssuesCommentsCommentIdReactionsGetResponse1(BaseModel):
    documentation_url: str
    message: str


class ReposOwnerRepoIssuesCommentsCommentIdReactionsPostRequest(BaseModel):
    content: Content1 = Field(
        ...,
        description='The [reaction type](https://docs.github.com/enterprise-server@2.21/rest/reference/reactions#reaction-types) to add to the issue comment.',
    )


class ReposOwnerRepoIssuesCommentsCommentIdReactionsPostResponse(BaseModel):
    documentation_url: str
    message: str


class State17(Enum):
    open = 'open'
    closed = 'closed'


class ReposOwnerRepoIssuesIssueNumberPatchRequest(BaseModel):
    assignee: Optional[str] = Field(
        None,
        description='Login for the user that this issue should be assigned to. **This field is deprecated.**',
    )
    assignees: Optional[List[str]] = Field(
        None,
        description='Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._',
    )
    body: Optional[str] = Field(None, description='The contents of the issue.')
    labels: Optional[List[Union[str, Labels1]]] = Field(
        None,
        description='Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._',
    )
    milestone: Optional[Union[str, int]] = None
    state: Optional[State17] = Field(
        None, description='State of the issue. Either `open` or `closed`.'
    )
    title: Optional[Union[str, int]] = Field(
        None, description='The title of the issue.'
    )


class ReposOwnerRepoIssuesIssueNumberPatchResponse(BaseModel):
    code: Optional[str] = None
    documentation_url: Optional[str] = None
    message: Optional[str] = None


class ReposOwnerRepoIssuesIssueNumberAssigneesDeleteRequest(BaseModel):
    assignees: Optional[List[str]] = Field(
        None,
        description='Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._',
    )


class ReposOwnerRepoIssuesIssueNumberAssigneesPostRequest(BaseModel):
    assignees: Optional[List[str]] = Field(
        None,
        description='Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._',
    )


class ReposOwnerRepoIssuesIssueNumberCommentsPostRequest(BaseModel):
    body: str = Field(..., description='The contents of the comment.')


class ReposOwnerRepoIssuesIssueNumberLabelsGetResponse(RootModel[List[LabelModel]]):
    root: List[LabelModel]


class ReposOwnerRepoIssuesIssueNumberLabelsPostRequest1(BaseModel):
    labels: Optional[List[str]] = Field(
        None,
        description='The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.',
        min_length=1,
    )


class Label5(BaseModel):
    name: str


class ReposOwnerRepoIssuesIssueNumberLabelsPostRequest2(BaseModel):
    labels: Optional[List[Label5]] = Field(None, min_length=1)


class ReposOwnerRepoIssuesIssueNumberLabelsPostRequestItem(BaseModel):
    name: str


class ReposOwnerRepoIssuesIssueNumberLabelsPostRequest(
    RootModel[
        Union[
            ReposOwnerRepoIssuesIssueNumberLabelsPostRequest1,
            List[str],
            ReposOwnerRepoIssuesIssueNumberLabelsPostRequest2,
            List[ReposOwnerRepoIssuesIssueNumberLabelsPostRequestItem],
            str,
        ]
    ]
):
    root: Union[
        ReposOwnerRepoIssuesIssueNumberLabelsPostRequest1,
        List[str],
        ReposOwnerRepoIssuesIssueNumberLabelsPostRequest2,
        List[ReposOwnerRepoIssuesIssueNumberLabelsPostRequestItem],
        str,
    ]


class ReposOwnerRepoIssuesIssueNumberLabelsPostResponse(RootModel[List[LabelModel]]):
    root: List[LabelModel]


class ReposOwnerRepoIssuesIssueNumberLabelsPutRequest1(BaseModel):
    labels: Optional[List[str]] = Field(
        None,
        description='The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.',
        min_length=1,
    )


class ReposOwnerRepoIssuesIssueNumberLabelsPutRequest2(BaseModel):
    labels: Optional[List[Label5]] = Field(None, min_length=1)


class ReposOwnerRepoIssuesIssueNumberLabelsPutRequestItem(BaseModel):
    name: str


class ReposOwnerRepoIssuesIssueNumberLabelsPutRequest(
    RootModel[
        Union[
            ReposOwnerRepoIssuesIssueNumberLabelsPutRequest1,
            List[str],
            ReposOwnerRepoIssuesIssueNumberLabelsPutRequest2,
            List[ReposOwnerRepoIssuesIssueNumberLabelsPutRequestItem],
            str,
        ]
    ]
):
    root: Union[
        ReposOwnerRepoIssuesIssueNumberLabelsPutRequest1,
        List[str],
        ReposOwnerRepoIssuesIssueNumberLabelsPutRequest2,
        List[ReposOwnerRepoIssuesIssueNumberLabelsPutRequestItem],
        str,
    ]


class ReposOwnerRepoIssuesIssueNumberLabelsPutResponse(RootModel[List[LabelModel]]):
    root: List[LabelModel]


class ReposOwnerRepoIssuesIssueNumberLabelsNameDeleteResponse(
    RootModel[List[LabelModel]]
):
    root: List[LabelModel]


class LockReason(Enum):
    off_topic = 'off-topic'
    too_heated = 'too heated'
    resolved = 'resolved'
    spam = 'spam'


class ReposOwnerRepoIssuesIssueNumberLockPutRequest(BaseModel):
    lock_reason: Optional[LockReason] = Field(
        None,
        description="The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  \n\\* `off-topic`  \n\\* `too heated`  \n\\* `resolved`  \n\\* `spam`",
    )


class ReposOwnerRepoIssuesIssueNumberReactionsGetResponse(RootModel[List[Reaction]]):
    root: List[Reaction]


class ReposOwnerRepoIssuesIssueNumberReactionsGetResponse1(BaseModel):
    documentation_url: str
    message: str


class ReposOwnerRepoIssuesIssueNumberReactionsPostRequest(BaseModel):
    content: Content1 = Field(
        ...,
        description='The [reaction type](https://docs.github.com/enterprise-server@2.21/rest/reference/reactions#reaction-types) to add to the issue.',
    )


class ReposOwnerRepoIssuesIssueNumberReactionsPostResponse(BaseModel):
    documentation_url: str
    message: str


class ReposOwnerRepoKeysGetResponse(RootModel[List[DeployKey]]):
    root: List[DeployKey]


class ReposOwnerRepoKeysPostRequest(BaseModel):
    key: str = Field(..., description='The contents of the key.')
    read_only: Optional[bool] = Field(
        None,
        description='If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  \n  \nDeploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://help.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://help.github.com/articles/permission-levels-for-a-user-account-repository/)."',
    )
    title: Optional[str] = Field(None, description='A name for the key.')


class ReposOwnerRepoLabelsGetResponse(RootModel[List[LabelModel]]):
    root: List[LabelModel]


class ReposOwnerRepoLabelsPostRequest(BaseModel):
    color: Optional[str] = Field(
        None,
        description='The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.',
    )
    description: Optional[str] = Field(
        None, description='A short description of the label.'
    )
    name: str = Field(
        ...,
        description='The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."',
    )


class ReposOwnerRepoLabelsNamePatchRequest(BaseModel):
    color: Optional[str] = Field(
        None,
        description='The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.',
    )
    description: Optional[str] = Field(
        None, description='A short description of the label.'
    )
    new_name: Optional[str] = Field(
        None,
        description='The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."',
    )


class ReposOwnerRepoMergesPostRequest(BaseModel):
    base: str = Field(
        ...,
        description='The name of the base branch that the head will be merged into.',
    )
    commit_message: Optional[str] = Field(
        None,
        description='Commit message to use for the merge commit. If omitted, a default message will be used.',
    )
    head: str = Field(
        ...,
        description='The head to merge. This can be a branch name or a commit SHA1.',
    )


class State18(Enum):
    open = 'open'
    closed = 'closed'
    all = 'all'


class Sort20(Enum):
    due_on = 'due_on'
    completeness = 'completeness'


class State20(Enum):
    open = 'open'
    closed = 'closed'


class ReposOwnerRepoMilestonesPostRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='A description of the milestone.'
    )
    due_on: Optional[datetime] = Field(
        None,
        description='The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
    )
    state: Optional[State20] = Field(
        'open', description='The state of the milestone. Either `open` or `closed`.'
    )
    title: str = Field(..., description='The title of the milestone.')


class ReposOwnerRepoMilestonesMilestoneNumberPatchRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='A description of the milestone.'
    )
    due_on: Optional[datetime] = Field(
        None,
        description='The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
    )
    state: Optional[State20] = Field(
        'open', description='The state of the milestone. Either `open` or `closed`.'
    )
    title: Optional[str] = Field(None, description='The title of the milestone.')


class ReposOwnerRepoMilestonesMilestoneNumberLabelsGetResponse(
    RootModel[List[LabelModel]]
):
    root: List[LabelModel]


class ReposOwnerRepoNotificationsPutRequest(BaseModel):
    last_read_at: Optional[datetime] = Field(
        None,
        description='Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.',
    )


class ReposOwnerRepoNotificationsPutResponse(BaseModel):
    message: Optional[str] = None
    url: Optional[str] = None


class ReposOwnerRepoPagesDeleteResponse(BaseModel):
    documentation_url: str
    message: str


class Branch(Enum):
    master = 'master'
    gh_pages = 'gh-pages'


class Path(Enum):
    field_ = '/'
    field_docs = '/docs'


class Source1(BaseModel):
    branch: Branch = Field(
        ...,
        description="The repository branch used to publish your site's source files. Can be either `master` or `gh-pages`.",
    )
    path: Optional[Path] = Field(
        '/',
        description='The repository directory that includes the source files for the Pages site. When `branch` is `master`, you can change `path` to `/docs`. When `branch` is `gh-pages`, you are unable to specify a `path` other than `/`.',
    )


class ReposOwnerRepoPagesPostRequest(BaseModel):
    source: Source1 = Field(
        ...,
        description='The source branch and directory used to publish your Pages site.',
    )


class ReposOwnerRepoPagesPostResponse(BaseModel):
    documentation_url: str
    message: str


class Source2(Enum):
    gh_pages = 'gh-pages'
    master = 'master'
    master__docs = 'master /docs'
    gh_pages_1 = 'gh-pages'
    master_1 = 'master'
    master__docs_1 = 'master /docs'


class Source3(BaseModel):
    branch: str = Field(
        ...,
        description="The repository branch used to publish your site's source files.",
    )
    path: Path = Field(
        ...,
        description='The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.',
    )


class ReposOwnerRepoPagesPutRequest1(BaseModel):
    https_enforced: Optional[bool] = Field(
        None, description='Specify whether HTTPS should be enforced for the repository.'
    )
    public: Optional[bool] = Field(
        None,
        description='Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan.',
    )
    source: Union[Source2, Source3] = Field(
        ...,
        description='Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`.',
    )


class Source4(Enum):
    gh_pages = 'gh-pages'
    master = 'master'
    master__docs = 'master /docs'
    gh_pages_1 = 'gh-pages'
    master_1 = 'master'
    master__docs_1 = 'master /docs'


class Source5(BaseModel):
    branch: str = Field(
        ...,
        description="The repository branch used to publish your site's source files.",
    )
    path: Path = Field(
        ...,
        description='The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.',
    )


class ReposOwnerRepoPagesPutRequest2(BaseModel):
    https_enforced: Optional[bool] = Field(
        None, description='Specify whether HTTPS should be enforced for the repository.'
    )
    public: Optional[bool] = Field(
        None,
        description='Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan.',
    )
    source: Optional[Union[Source4, Source5]] = Field(
        None,
        description='Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`.',
    )


class Source6(Enum):
    gh_pages = 'gh-pages'
    master = 'master'
    master__docs = 'master /docs'
    gh_pages_1 = 'gh-pages'
    master_1 = 'master'
    master__docs_1 = 'master /docs'


class Source7(BaseModel):
    branch: str = Field(
        ...,
        description="The repository branch used to publish your site's source files.",
    )
    path: Path = Field(
        ...,
        description='The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.',
    )


class ReposOwnerRepoPagesPutRequest3(BaseModel):
    https_enforced: Optional[bool] = Field(
        None, description='Specify whether HTTPS should be enforced for the repository.'
    )
    public: bool = Field(
        ...,
        description='Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan.',
    )
    source: Optional[Union[Source6, Source7]] = Field(
        None,
        description='Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`.',
    )


class Source8(Enum):
    gh_pages = 'gh-pages'
    master = 'master'
    master__docs = 'master /docs'
    gh_pages_1 = 'gh-pages'
    master_1 = 'master'
    master__docs_1 = 'master /docs'


class Source9(BaseModel):
    branch: str = Field(
        ...,
        description="The repository branch used to publish your site's source files.",
    )
    path: Path = Field(
        ...,
        description='The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.',
    )


class ReposOwnerRepoPagesPutRequest4(BaseModel):
    https_enforced: bool = Field(
        ..., description='Specify whether HTTPS should be enforced for the repository.'
    )
    public: Optional[bool] = Field(
        None,
        description='Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan.',
    )
    source: Optional[Union[Source8, Source9]] = Field(
        None,
        description='Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`.',
    )


class ReposOwnerRepoPagesPutRequest(
    RootModel[
        Union[
            ReposOwnerRepoPagesPutRequest1,
            ReposOwnerRepoPagesPutRequest2,
            ReposOwnerRepoPagesPutRequest3,
            ReposOwnerRepoPagesPutRequest4,
        ]
    ]
):
    root: Union[
        ReposOwnerRepoPagesPutRequest1,
        ReposOwnerRepoPagesPutRequest2,
        ReposOwnerRepoPagesPutRequest3,
        ReposOwnerRepoPagesPutRequest4,
    ]


class ReposOwnerRepoPagesBuildsGetResponse(RootModel[List[PageBuild]]):
    root: List[PageBuild]


class Sort22(Enum):
    created = 'created'
    updated = 'updated'
    name = 'name'


class ReposOwnerRepoPreReceiveHooksGetResponse(
    RootModel[List[RepositoryPreReceiveHook]]
):
    root: List[RepositoryPreReceiveHook]


class Enforcement(Enum):
    enabled = 'enabled'
    disabled = 'disabled'
    testing = 'testing'


class ReposOwnerRepoPreReceiveHooksPreReceiveHookIdPatchRequest(BaseModel):
    enforcement: Optional[Enforcement] = Field(
        None, description='The state of enforcement for the hook on this repository.'
    )


class State22(Enum):
    open = 'open'
    closed = 'closed'
    all = 'all'


class ReposOwnerRepoProjectsGetResponse(RootModel[List[Project]]):
    root: List[Project]


class ReposOwnerRepoProjectsPostRequest(BaseModel):
    body: Optional[str] = Field(None, description='The description of the project.')
    name: str = Field(..., description='The name of the project.')


class Sort24(Enum):
    created = 'created'
    updated = 'updated'
    popularity = 'popularity'
    long_running = 'long-running'


class ReposOwnerRepoPullsPostRequest(BaseModel):
    base: str = Field(
        ...,
        description='The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.',
    )
    body: Optional[str] = Field(None, description='The contents of the pull request.')
    draft: Optional[bool] = Field(
        None,
        description='Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.',
    )
    head: str = Field(
        ...,
        description='The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.',
    )
    issue: Optional[int] = Field(None, examples=[1])
    maintainer_can_modify: Optional[bool] = Field(
        None,
        description='Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.',
    )
    title: Optional[str] = Field(None, description='The title of the new pull request.')


class Sort26(Enum):
    created = 'created'
    updated = 'updated'
    created_at = 'created_at'


class ReposOwnerRepoPullsCommentsCommentIdPatchRequest(BaseModel):
    body: str = Field(..., description='The text of the reply to the review comment.')


class ReposOwnerRepoPullsCommentsCommentIdReactionsGetResponse(
    RootModel[List[Reaction]]
):
    root: List[Reaction]


class ReposOwnerRepoPullsCommentsCommentIdReactionsGetResponse1(BaseModel):
    documentation_url: str
    message: str


class ReposOwnerRepoPullsCommentsCommentIdReactionsPostRequest(BaseModel):
    content: Content1 = Field(
        ...,
        description='The [reaction type](https://docs.github.com/enterprise-server@2.21/rest/reference/reactions#reaction-types) to add to the pull request review comment.',
    )


class ReposOwnerRepoPullsCommentsCommentIdReactionsPostResponse(BaseModel):
    documentation_url: str
    message: str


class State26(Enum):
    open = 'open'
    closed = 'closed'


class ReposOwnerRepoPullsPullNumberPatchRequest(BaseModel):
    base: Optional[str] = Field(
        None,
        description='The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.',
    )
    body: Optional[str] = Field(None, description='The contents of the pull request.')
    maintainer_can_modify: Optional[bool] = Field(
        None,
        description='Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.',
    )
    state: Optional[State26] = Field(
        None, description='State of this Pull Request. Either `open` or `closed`.'
    )
    title: Optional[str] = Field(None, description='The title of the pull request.')


class Sort28(Enum):
    created = 'created'
    updated = 'updated'


class StartSide2(Enum):
    LEFT = 'LEFT'
    RIGHT = 'RIGHT'
    side = 'side'


class ReposOwnerRepoPullsPullNumberCommentsPostRequest(BaseModel):
    body: str = Field(..., description='The text of the review comment.')
    commit_id: Optional[str] = Field(
        None,
        description='The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.',
    )
    in_reply_to: Optional[int] = Field(None, examples=[2])
    line: Optional[int] = Field(
        None,
        description='**Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.',
    )
    path: Optional[str] = Field(
        None, description='The relative path to the file that necessitates a comment.'
    )
    position: Optional[int] = Field(
        None,
        description='**Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.',
    )
    side: Optional[Side] = Field(
        'RIGHT',
        description='**Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request\'s changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.',
    )
    start_line: Optional[int] = Field(
        None,
        description='**Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.',
    )
    start_side: Optional[StartSide2] = Field(
        None,
        description='**Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.',
    )


class ReposOwnerRepoPullsPullNumberCommentsCommentIdRepliesPostRequest(BaseModel):
    body: str = Field(..., description='The text of the review comment.')


class ReposOwnerRepoPullsPullNumberFilesGetResponse(RootModel[List[DiffEntry]]):
    root: List[DiffEntry]


class MergeMethod(Enum):
    merge = 'merge'
    squash = 'squash'
    rebase = 'rebase'


class ReposOwnerRepoPullsPullNumberMergePutRequest(BaseModel):
    commit_message: Optional[str] = Field(
        None, description='Extra detail to append to automatic commit message.'
    )
    commit_title: Optional[str] = Field(
        None, description='Title for the automatic commit message.'
    )
    merge_method: Optional[MergeMethod] = Field(
        None,
        description='Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.',
    )
    sha: Optional[str] = Field(
        None, description='SHA that pull request head must match to allow merge.'
    )


class ReposOwnerRepoPullsPullNumberMergePutResponse(BaseModel):
    documentation_url: Optional[str] = None
    message: Optional[str] = None


class ReposOwnerRepoPullsPullNumberRequestedReviewersDeleteRequest(BaseModel):
    reviewers: List[str] = Field(
        ..., description='An array of user `login`s that will be removed.'
    )
    team_reviewers: Optional[List[str]] = Field(
        None, description='An array of team `slug`s that will be removed.'
    )


class ReposOwnerRepoPullsPullNumberRequestedReviewersPostRequest1(BaseModel):
    reviewers: List[str] = Field(
        ..., description='An array of user `login`s that will be requested.'
    )
    team_reviewers: Optional[List[str]] = Field(
        None, description='An array of team `slug`s that will be requested.'
    )


class ReposOwnerRepoPullsPullNumberRequestedReviewersPostRequest2(BaseModel):
    reviewers: Optional[List[str]] = Field(
        None, description='An array of user `login`s that will be requested.'
    )
    team_reviewers: List[str] = Field(
        ..., description='An array of team `slug`s that will be requested.'
    )


class ReposOwnerRepoPullsPullNumberRequestedReviewersPostRequest(
    RootModel[
        Union[
            ReposOwnerRepoPullsPullNumberRequestedReviewersPostRequest1,
            ReposOwnerRepoPullsPullNumberRequestedReviewersPostRequest2,
        ]
    ]
):
    root: Union[
        ReposOwnerRepoPullsPullNumberRequestedReviewersPostRequest1,
        ReposOwnerRepoPullsPullNumberRequestedReviewersPostRequest2,
    ]


class ReposOwnerRepoPullsPullNumberReviewsGetResponse(
    RootModel[List[PullRequestReview]]
):
    root: List[PullRequestReview]


class Comment(BaseModel):
    body: str = Field(..., description='Text of the review comment.')
    line: Optional[int] = Field(None, examples=[28])
    path: str = Field(
        ...,
        description='The relative path to the file that necessitates a review comment.',
    )
    position: Optional[int] = Field(
        None,
        description='The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.',
    )
    side: Optional[str] = Field(None, examples=['RIGHT'])
    start_line: Optional[int] = Field(None, examples=[26])
    start_side: Optional[str] = Field(None, examples=['LEFT'])


class Event1(Enum):
    APPROVE = 'APPROVE'
    REQUEST_CHANGES = 'REQUEST_CHANGES'
    COMMENT = 'COMMENT'


class ReposOwnerRepoPullsPullNumberReviewsPostRequest(BaseModel):
    body: Optional[str] = Field(
        None,
        description='**Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.',
    )
    comments: Optional[List[Comment]] = Field(
        None,
        description='Use the following table to specify the location, destination, and contents of the draft review comment.',
    )
    commit_id: Optional[str] = Field(
        None,
        description='The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.',
    )
    event: Optional[Event1] = Field(
        None,
        description='The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.',
    )


class ReposOwnerRepoPullsPullNumberReviewsReviewIdPutRequest(BaseModel):
    body: str = Field(..., description='The body text of the pull request review.')


class ReposOwnerRepoPullsPullNumberReviewsReviewIdCommentsGetResponse(
    RootModel[List[ReviewComment]]
):
    root: List[ReviewComment]


class ReposOwnerRepoPullsPullNumberReviewsReviewIdDismissalsPutRequest(BaseModel):
    event: Optional[str] = Field(None, examples=['"APPROVE"'])
    message: str = Field(
        ..., description='The message for the pull request review dismissal'
    )


class ReposOwnerRepoPullsPullNumberReviewsReviewIdEventsPostRequest(BaseModel):
    body: Optional[str] = Field(
        None, description='The body text of the pull request review'
    )
    event: Event1 = Field(
        ...,
        description='The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.',
    )


class ReposOwnerRepoPullsPullNumberUpdateBranchPutRequest(BaseModel):
    expected_head_sha: Optional[str] = Field(
        None,
        description='The expected SHA of the pull request\'s HEAD ref. This is the most recent commit on the pull request\'s branch. If the expected SHA does not match the pull request\'s HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request\'s current HEAD ref.',
    )


class ReposOwnerRepoPullsPullNumberUpdateBranchPutResponse(BaseModel):
    message: Optional[str] = None
    url: Optional[str] = None


class ReposOwnerRepoPullsPullNumberUpdateBranchPutResponse1(BaseModel):
    documentation_url: str
    message: str


class ReposOwnerRepoReleasesPostRequest(BaseModel):
    body: Optional[str] = Field(
        None, description='Text describing the contents of the tag.'
    )
    draft: Optional[bool] = Field(
        False,
        description='`true` to create a draft (unpublished) release, `false` to create a published one.',
    )
    name: Optional[str] = Field(None, description='The name of the release.')
    prerelease: Optional[bool] = Field(
        False,
        description='`true` to identify the release as a prerelease. `false` to identify the release as a full release.',
    )
    tag_name: str = Field(..., description='The name of the tag.')
    target_commitish: Optional[str] = Field(
        None,
        description="Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).",
    )


class ReposOwnerRepoReleasesAssetsAssetIdGetResponse(BaseModel):
    documentation_url: str
    message: str


class ReposOwnerRepoReleasesAssetsAssetIdPatchRequest(BaseModel):
    label: Optional[str] = Field(
        None,
        description='An alternate short description of the asset. Used in place of the filename.',
    )
    name: Optional[str] = Field(None, description='The file name of the asset.')
    state: Optional[str] = Field(None, examples=['"uploaded"'])


class ReposOwnerRepoReleasesReleaseIdPatchRequest(BaseModel):
    body: Optional[str] = Field(
        None, description='Text describing the contents of the tag.'
    )
    draft: Optional[bool] = Field(
        None,
        description='`true` makes the release a draft, and `false` publishes the release.',
    )
    name: Optional[str] = Field(None, description='The name of the release.')
    prerelease: Optional[bool] = Field(
        None,
        description='`true` to identify the release as a prerelease, `false` to identify the release as a full release.',
    )
    tag_name: Optional[str] = Field(None, description='The name of the tag.')
    target_commitish: Optional[str] = Field(
        None,
        description="Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).",
    )


class ReposOwnerRepoReleasesReleaseIdAssetsGetResponse(RootModel[List[ReleaseAsset]]):
    root: List[ReleaseAsset]


class ReposOwnerRepoStargazersGetResponse(
    RootModel[Union[List[SimpleUser], List[Stargazer]]]
):
    root: Union[List[SimpleUser], List[Stargazer]]


class ReposOwnerRepoStatsCodeFrequencyGetResponse(RootModel[List[CodeFrequencyStat]]):
    root: List[CodeFrequencyStat]


class ReposOwnerRepoStatsCodeFrequencyGetResponse1(BaseModel):
    pass


class ReposOwnerRepoStatsCommitActivityGetResponse(RootModel[List[CommitActivity]]):
    root: List[CommitActivity]


class ReposOwnerRepoStatsCommitActivityGetResponse1(BaseModel):
    pass


class ReposOwnerRepoStatsContributorsGetResponse1(BaseModel):
    pass


class ReposOwnerRepoStatsPunchCardGetResponse(RootModel[List[CodeFrequencyStat]]):
    root: List[CodeFrequencyStat]


class State27(Enum):
    error = 'error'
    failure = 'failure'
    pending = 'pending'
    success = 'success'


class ReposOwnerRepoStatusesShaPostRequest(BaseModel):
    context: Optional[str] = Field(
        'default',
        description='A string label to differentiate this status from the status of other systems. This field is case-insensitive.',
    )
    description: Optional[str] = Field(
        None, description='A short description of the status.'
    )
    state: State27 = Field(
        ...,
        description='The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.',
    )
    target_url: Optional[str] = Field(
        None,
        description='The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  \nFor example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  \n`http://ci.example.com/user/repo/build/sha`',
    )


class ReposOwnerRepoSubscribersGetResponse(RootModel[List[SimpleUser]]):
    root: List[SimpleUser]


class ReposOwnerRepoSubscriptionPutRequest(BaseModel):
    ignored: Optional[bool] = Field(
        None,
        description='Determines if all notifications should be blocked from this repository.',
    )
    subscribed: Optional[bool] = Field(
        None,
        description='Determines if notifications should be received from this repository.',
    )


class ReposOwnerRepoTagsGetResponse(RootModel[List[Tag]]):
    root: List[Tag]


class ReposOwnerRepoTeamsGetResponse(RootModel[List[TeamModel]]):
    root: List[TeamModel]


class ReposOwnerRepoTopicsGetResponse(BaseModel):
    documentation_url: str
    message: str


class ReposOwnerRepoTopicsPutRequest(BaseModel):
    names: List[str] = Field(
        ...,
        description='An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.',
    )


class ReposOwnerRepoTopicsPutResponse(BaseModel):
    documentation_url: str
    message: str


class ReposOwnerRepoTransferPostRequest(BaseModel):
    new_owner: str = Field(
        ...,
        description='The username or organization name the repository will be transferred to.',
    )
    team_ids: Optional[List[int]] = Field(
        None,
        description='ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.',
    )


class ReposTemplateOwnerTemplateRepoGeneratePostRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='A short description of the new repository.'
    )
    include_all_branches: Optional[bool] = Field(
        False,
        description='Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.',
    )
    name: str = Field(..., description='The name of the new repository.')
    owner: Optional[str] = Field(
        None,
        description='The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.',
    )
    private: Optional[bool] = Field(
        False,
        description='Either `true` to create a new private repository or `false` to create a new public one.',
    )


class Visibility2(Enum):
    all = 'all'
    public = 'public'


class Sort30(Enum):
    indexed = 'indexed'


class Order(Enum):
    desc = 'desc'
    asc = 'asc'


class SearchCodeGetResponse1(BaseModel):
    code: Optional[str] = None
    documentation_url: Optional[str] = None
    message: Optional[str] = None


class Sort32(Enum):
    author_date = 'author-date'
    committer_date = 'committer-date'


class SearchCommitsGetResponse1(BaseModel):
    documentation_url: str
    message: str


class Sort34(Enum):
    comments = 'comments'
    reactions = 'reactions'
    reactions__1 = 'reactions-+1'
    reactions__1_1 = 'reactions--1'
    reactions_smile = 'reactions-smile'
    reactions_thinking_face = 'reactions-thinking_face'
    reactions_heart = 'reactions-heart'
    reactions_tada = 'reactions-tada'
    interactions = 'interactions'
    created = 'created'
    updated = 'updated'


class SearchIssuesGetResponse1(BaseModel):
    code: Optional[str] = None
    documentation_url: Optional[str] = None
    message: Optional[str] = None


class Sort36(Enum):
    created = 'created'
    updated = 'updated'


class Sort38(Enum):
    stars = 'stars'
    forks = 'forks'
    help_wanted_issues = 'help-wanted-issues'
    updated = 'updated'


class SearchRepositoriesGetResponse1(BaseModel):
    code: Optional[str] = None
    documentation_url: Optional[str] = None
    message: Optional[str] = None


class SearchTopicsGetResponse(BaseModel):
    incomplete_results: bool
    items: List[TopicSearchResultItem]
    total_count: int


class SearchTopicsGetResponse1(BaseModel):
    documentation_url: str
    message: str


class Sort40(Enum):
    followers = 'followers'
    repositories = 'repositories'
    joined = 'joined'


class SearchUsersGetResponse(BaseModel):
    incomplete_results: bool
    items: List[UserSearchResultItem]
    total_count: int


class SearchUsersGetResponse1(BaseModel):
    code: Optional[str] = None
    documentation_url: Optional[str] = None
    message: Optional[str] = None


class SetupApiMaintenancePostRequest(BaseModel):
    maintenance: str = Field(
        ...,
        description="A JSON string with the attributes `enabled` and `when`.\n\nThe possible values for `enabled` are `true` and `false`. When it's `false`, the attribute `when` is ignored and the maintenance mode is turned off. `when` defines the time period when the maintenance was enabled.\n\nThe possible values for `when` are `now` or any date parseable by [mojombo/chronic](https://github.com/mojombo/chronic).",
    )


class SetupApiSettingsPutRequest(BaseModel):
    settings: str = Field(
        ...,
        description='A JSON string with the new settings. Note that you only need to pass the specific settings you want to modify. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.21/rest/reference/enterprise-admin#get-settings).',
    )


class SetupApiSettingsAuthorizedKeysDeleteRequest(BaseModel):
    authorized_key: str = Field(..., description='The public SSH key.')


class SetupApiSettingsAuthorizedKeysDeleteResponse(RootModel[List[SshKey]]):
    root: List[SshKey]


class SetupApiSettingsAuthorizedKeysGetResponse(RootModel[List[SshKey]]):
    root: List[SshKey]


class SetupApiSettingsAuthorizedKeysPostRequest(BaseModel):
    authorized_key: str = Field(..., description='The public SSH key.')


class SetupApiSettingsAuthorizedKeysPostResponse(RootModel[List[SshKey]]):
    root: List[SshKey]


class SetupApiStartPostRequest(BaseModel):
    license: str = Field(..., description='The content of your _.ghl_ license file.')
    password: Optional[str] = Field(
        None,
        description="You **must** provide a password _only if_ you are uploading your license for the first time. If you previously set a password through the web interface, you don't need this parameter.",
    )
    settings: Optional[str] = Field(
        None,
        description='An optional JSON string containing the installation settings. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.21/rest/reference/enterprise-admin#get-settings).',
    )


class SetupApiUpgradePostRequest(BaseModel):
    license: Optional[str] = Field(
        None, description='The content of your new _.ghl_ license file.'
    )


class Permission6(Enum):
    pull = 'pull'
    push = 'push'
    admin = 'admin'


class TeamsTeamIdPatchRequest(BaseModel):
    description: Optional[str] = Field(None, description='The description of the team.')
    name: str = Field(..., description='The name of the team.')
    parent_team_id: Optional[int] = Field(
        None, description='The ID of a team to set as the parent team.'
    )
    permission: Optional[Permission6] = Field(
        'pull',
        description='**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.',
    )
    privacy: Optional[Privacy1] = Field(
        None,
        description='The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.',
    )


class TeamsTeamIdDiscussionsGetResponse(RootModel[List[TeamDiscussion]]):
    root: List[TeamDiscussion]


class TeamsTeamIdDiscussionsPostRequest(BaseModel):
    body: str = Field(..., description="The discussion post's body text.")
    private: Optional[bool] = Field(
        False,
        description='Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.',
    )
    title: str = Field(..., description="The discussion post's title.")


class TeamsTeamIdDiscussionsDiscussionNumberPatchRequest(BaseModel):
    body: Optional[str] = Field(None, description="The discussion post's body text.")
    title: Optional[str] = Field(None, description="The discussion post's title.")


class TeamsTeamIdDiscussionsDiscussionNumberCommentsGetResponse(
    RootModel[List[TeamDiscussionComment]]
):
    root: List[TeamDiscussionComment]


class TeamsTeamIdDiscussionsDiscussionNumberCommentsPostRequest(BaseModel):
    body: str = Field(..., description="The discussion comment's body text.")


class TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberPatchRequest(
    BaseModel
):
    body: str = Field(..., description="The discussion comment's body text.")


class TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberReactionsGetResponse(
    RootModel[List[Reaction]]
):
    root: List[Reaction]


class TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostRequest(
    BaseModel
):
    content: Content1 = Field(
        ...,
        description='The [reaction type](https://docs.github.com/enterprise-server@2.21/rest/reference/reactions#reaction-types) to add to the team discussion comment.',
    )


class TeamsTeamIdDiscussionsDiscussionNumberReactionsGetResponse(
    RootModel[List[Reaction]]
):
    root: List[Reaction]


class TeamsTeamIdDiscussionsDiscussionNumberReactionsPostRequest(BaseModel):
    content: Content1 = Field(
        ...,
        description='The [reaction type](https://docs.github.com/enterprise-server@2.21/rest/reference/reactions#reaction-types) to add to the team discussion.',
    )


class Role8(Enum):
    member = 'member'
    maintainer = 'maintainer'
    all = 'all'


class TeamsTeamIdMembersGetResponse(RootModel[List[SimpleUser]]):
    root: List[SimpleUser]


class Role10(Enum):
    member = 'member'
    maintainer = 'maintainer'


class TeamsTeamIdMembershipsUsernamePutRequest(BaseModel):
    role: Optional[Role10] = Field(
        'member',
        description="The role that this user should have in the team. Can be one of:  \n\\* `member` - a normal member of the team.  \n\\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.",
    )


class TeamsTeamIdProjectsGetResponse(RootModel[List[TeamProject]]):
    root: List[TeamProject]


class TeamsTeamIdProjectsGetResponse1(BaseModel):
    documentation_url: str
    message: str


class TeamsTeamIdProjectsProjectIdDeleteResponse(BaseModel):
    documentation_url: str
    message: str


class TeamsTeamIdProjectsProjectIdGetResponse(BaseModel):
    documentation_url: str
    message: str


class Permission7(Enum):
    read = 'read'
    write = 'write'
    admin = 'admin'


class TeamsTeamIdProjectsProjectIdPutRequest(BaseModel):
    permission: Optional[Permission7] = Field(
        None,
        description='The permission to grant to the team for this project. Can be one of:  \n\\* `read` - team members can read, but not write to or administer this project.  \n\\* `write` - team members can read and write, but not administer this project.  \n\\* `admin` - team members can read, write and administer this project.  \nDefault: the team\'s `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-verbs)."',
    )


class TeamsTeamIdProjectsProjectIdPutResponse(BaseModel):
    documentation_url: Optional[str] = None
    message: Optional[str] = None


class TeamsTeamIdProjectsProjectIdPutResponse1(BaseModel):
    documentation_url: str
    message: str


class Permission8(Enum):
    pull = 'pull'
    push = 'push'
    admin = 'admin'


class TeamsTeamIdReposOwnerRepoPutRequest(BaseModel):
    permission: Optional[Permission8] = Field(
        None,
        description="The permission to grant the team on this repository. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer this repository.  \n\\* `push` - team members can pull and push, but not administer this repository.  \n\\* `admin` - team members can pull, push and administer this repository.  \n  \nIf no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
    )


class TeamsTeamIdTeamsGetResponse(RootModel[List[TeamModel]]):
    root: List[TeamModel]


class UserGetResponse(RootModel[Union[PrivateUser, PublicUser]]):
    root: Union[PrivateUser, PublicUser]


class UserPatchRequest(BaseModel):
    bio: Optional[str] = Field(None, description='The new short biography of the user.')
    blog: Optional[str] = Field(
        None, description='The new blog URL of the user.', examples=['blog.example.com']
    )
    company: Optional[str] = Field(
        None, description='The new company of the user.', examples=['Acme corporation']
    )
    email: Optional[str] = Field(
        None,
        description='The publicly visible email address of the user.',
        examples=['omar@example.com'],
    )
    hireable: Optional[bool] = Field(
        None, description='The new hiring availability of the user.'
    )
    location: Optional[str] = Field(
        None, description='The new location of the user.', examples=['Berlin, Germany']
    )
    name: Optional[str] = Field(
        None, description='The new name of the user.', examples=['Omar Jahandar']
    )
    twitter_username: Optional[str] = Field(
        None,
        description='The new Twitter username of the user.',
        examples=['therealomarj'],
    )


class UserEmailsDeleteRequest1(BaseModel):
    emails: List[constr(min_items=1)] = Field(
        ..., description='Email addresses associated with the GitHub user account.'
    )


class UserEmailsDeleteRequest(
    RootModel[Union[UserEmailsDeleteRequest1, List[constr(min_items=1)], str]]
):
    root: Union[UserEmailsDeleteRequest1, List[constr(min_items=1)], str]


class UserEmailsGetResponse(RootModel[List[Email]]):
    root: List[Email]


class UserEmailsPostRequest1(BaseModel):
    emails: List[constr(min_items=1)] = Field(
        ...,
        description='Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.',
        examples=[[]],
    )


class UserEmailsPostRequest(
    RootModel[Union[UserEmailsPostRequest1, List[constr(min_items=1)], str]]
):
    root: Union[UserEmailsPostRequest1, List[constr(min_items=1)], str]


class UserEmailsPostResponse(RootModel[List[Email]]):
    root: List[Email]


class UserFollowersGetResponse(RootModel[List[SimpleUser]]):
    root: List[SimpleUser]


class UserFollowingGetResponse(RootModel[List[SimpleUser]]):
    root: List[SimpleUser]


class UserGpgKeysGetResponse(RootModel[List[GpgKey]]):
    root: List[GpgKey]


class UserGpgKeysPostRequest(BaseModel):
    armored_public_key: str = Field(
        ..., description='A GPG key in ASCII-armored format.'
    )


class UserInstallationsGetResponse1(BaseModel):
    documentation_url: str
    message: str


class Filter12(Enum):
    assigned = 'assigned'
    created = 'created'
    mentioned = 'mentioned'
    subscribed = 'subscribed'
    repos = 'repos'
    all = 'all'


class State28(Enum):
    open = 'open'
    closed = 'closed'
    all = 'all'


class Sort42(Enum):
    created = 'created'
    updated = 'updated'
    comments = 'comments'


class UserKeysGetResponse(RootModel[List[Key]]):
    root: List[Key]


class UserKeysPostRequest(BaseModel):
    key: constr(pattern=r'^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) ') = (
        Field(..., description='The public SSH key to add to your GitHub account.')
    )
    title: Optional[str] = Field(
        None,
        description='A descriptive name for the new key.',
        examples=['Personal MacBook Air'],
    )


class State30(Enum):
    active = 'active'
    pending = 'pending'


class State32(Enum):
    active = 'active'


class UserMembershipsOrgsOrgPatchRequest(BaseModel):
    state: State32 = Field(
        ...,
        description='The state that the membership should be in. Only `"active"` will be accepted.',
    )


class UserOrgsGetResponse(RootModel[List[OrganizationSimple]]):
    root: List[OrganizationSimple]


class UserProjectsPostRequest(BaseModel):
    body: Optional[str] = Field(
        None,
        description='Body of the project',
        examples=['This project represents the sprint of the first week in January'],
    )
    name: str = Field(
        ..., description='Name of the project', examples=['Week One Sprint']
    )


class UserProjectsPostResponse(BaseModel):
    documentation_url: str
    message: str


class UserPublicEmailsGetResponse(RootModel[List[Email]]):
    root: List[Email]


class Visibility4(Enum):
    all = 'all'
    public = 'public'
    private = 'private'


class Type4(Enum):
    all = 'all'
    owner = 'owner'
    public = 'public'
    private = 'private'
    member = 'member'


class Sort44(Enum):
    created = 'created'
    updated = 'updated'
    pushed = 'pushed'
    full_name = 'full_name'


class UserReposPostRequest(BaseModel):
    allow_merge_commit: Optional[bool] = Field(
        True,
        description='Whether to allow merge commits for pull requests.',
        examples=[True],
    )
    allow_rebase_merge: Optional[bool] = Field(
        True,
        description='Whether to allow rebase merges for pull requests.',
        examples=[True],
    )
    allow_squash_merge: Optional[bool] = Field(
        True,
        description='Whether to allow squash merges for pull requests.',
        examples=[True],
    )
    auto_init: Optional[bool] = Field(
        False,
        description='Whether the repository is initialized with a minimal README.',
    )
    delete_branch_on_merge: Optional[bool] = Field(
        False,
        description='Whether to delete head branches when pull requests are merged',
        examples=[False],
    )
    description: Optional[str] = Field(
        None, description='A short description of the repository.'
    )
    gitignore_template: Optional[str] = Field(
        None,
        description='The desired language or platform to apply to the .gitignore.',
        examples=['Haskell'],
    )
    has_downloads: Optional[bool] = Field(
        True, description='Whether downloads are enabled.', examples=[True]
    )
    has_issues: Optional[bool] = Field(
        True, description='Whether issues are enabled.', examples=[True]
    )
    has_projects: Optional[bool] = Field(
        True, description='Whether projects are enabled.', examples=[True]
    )
    has_wiki: Optional[bool] = Field(
        True, description='Whether the wiki is enabled.', examples=[True]
    )
    homepage: Optional[str] = Field(
        None, description='A URL with more information about the repository.'
    )
    is_template: Optional[bool] = Field(
        False,
        description='Whether this repository acts as a template that can be used to generate new repositories.',
        examples=[True],
    )
    license_template: Optional[str] = Field(
        None,
        description='The license keyword of the open source license for this repository.',
        examples=['mit'],
    )
    name: str = Field(
        ..., description='The name of the repository.', examples=['Team Environment']
    )
    private: Optional[bool] = Field(
        False, description='Whether the repository is private.'
    )
    team_id: Optional[int] = Field(
        None,
        description='The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.',
    )


class Sort46(Enum):
    created = 'created'
    updated = 'updated'


class UserTeamsGetResponse(RootModel[List[TeamFull]]):
    root: List[TeamFull]


class UsersGetResponse(RootModel[List[SimpleUser]]):
    root: List[SimpleUser]


class UsersUsernameGetResponse(RootModel[Union[PrivateUser, PublicUser]]):
    root: Union[PrivateUser, PublicUser]


class UsersUsernameGetResponse1(BaseModel):
    pass


class UsersUsernameFollowersGetResponse(RootModel[List[SimpleUser]]):
    root: List[SimpleUser]


class UsersUsernameFollowingGetResponse(RootModel[List[SimpleUser]]):
    root: List[SimpleUser]


class UsersUsernameGpgKeysGetResponse(RootModel[List[GpgKey]]):
    root: List[GpgKey]


class SubjectType(Enum):
    organization = 'organization'
    repository = 'repository'
    issue = 'issue'
    pull_request = 'pull_request'


class UsersUsernameKeysGetResponse(RootModel[List[KeySimple]]):
    root: List[KeySimple]


class UsersUsernameOrgsGetResponse(RootModel[List[OrganizationSimple]]):
    root: List[OrganizationSimple]


class State33(Enum):
    open = 'open'
    closed = 'closed'
    all = 'all'


class UsersUsernameProjectsGetResponse(RootModel[List[Project]]):
    root: List[Project]


class UsersUsernameProjectsGetResponse1(BaseModel):
    documentation_url: str
    message: str


class Type6(Enum):
    all = 'all'
    owner = 'owner'
    member = 'member'


class Sort48(Enum):
    created = 'created'
    updated = 'updated'
    pushed = 'pushed'
    full_name = 'full_name'


class Sort50(Enum):
    created = 'created'
    updated = 'updated'


class UsersUsernameSuspendedDeleteRequest(BaseModel):
    reason: Optional[str] = Field(
        None,
        description='The reason the user is being unsuspended. This message will be logged in the [audit log](https://help.github.com/enterprise/admin/articles/audit-logging/). If you don\'t provide a `reason`, it will default to "Unsuspended via API by _SITE\\_ADMINISTRATOR_", where _SITE\\_ADMINISTRATOR_ is the person who performed the action.',
    )


class UsersUsernameSuspendedPutRequest(BaseModel):
    reason: Optional[str] = Field(
        None,
        description='The reason the user is being suspended. This message will be logged in the [audit log](https://help.github.com/enterprise/admin/articles/audit-logging/). If you don\'t provide a `reason`, it will default to "Suspended via API by _SITE\\_ADMINISTRATOR_", where _SITE\\_ADMINISTRATOR_ is the person who performed the action.',
    )


class ApplicationGrant(BaseModel):
    app: App
    created_at: datetime = Field(..., examples=['2011-09-06T17:26:27Z'])
    id: int = Field(..., examples=[1])
    scopes: List[str] = Field(..., examples=[['public_repo']])
    updated_at: datetime = Field(..., examples=['2011-09-06T20:39:23Z'])
    url: AnyUrl = Field(..., examples=['https://api.github.com/applications/grants/1'])
    user: Optional[NullableSimpleUser] = None


class BaseGist(BaseModel):
    comments: int
    comments_url: AnyUrl
    commits_url: AnyUrl
    created_at: datetime
    description: str
    files: Dict[str, Files]
    forks: Optional[List] = None
    forks_url: AnyUrl
    git_pull_url: AnyUrl
    git_push_url: AnyUrl
    history: Optional[List] = None
    html_url: AnyUrl
    id: str
    node_id: str
    owner: Optional[SimpleUser] = None
    public: bool
    truncated: Optional[bool] = None
    updated_at: datetime
    url: AnyUrl
    user: NullableSimpleUser


class Commit1(BaseModel):
    author: NullableGitUser
    comment_count: int = Field(..., examples=[0])
    committer: NullableGitUser
    message: str = Field(..., examples=['Fix all the bugs'])
    tree: Tree
    url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e'
        ],
    )
    verification: Optional[Verification2] = None


class CommitModel(BaseModel):
    author: NullableSimpleUser
    comments_url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments'
        ],
    )
    commit: Commit1
    committer: NullableSimpleUser
    files: Optional[List[File]] = None
    html_url: AnyUrl = Field(
        ...,
        examples=[
            'https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e'
        ],
    )
    node_id: str = Field(
        ...,
        examples=[
            'MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ=='
        ],
    )
    parents: List[Parent]
    sha: str = Field(..., examples=['6dcb09b5b57875f334f61aebed695e2e4193db5e'])
    stats: Optional[Stats] = None
    url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e'
        ],
    )


class CommitComment(BaseModel):
    author_association: AuthorAssociation
    body: str
    commit_id: str
    created_at: datetime
    html_url: AnyUrl
    id: int
    line: int
    node_id: str
    path: str
    position: int
    reactions: Optional[ReactionRollup] = None
    updated_at: datetime
    url: AnyUrl
    user: NullableSimpleUser


class CommitComparison(BaseModel):
    ahead_by: int = Field(..., examples=[4])
    base_commit: CommitModel
    behind_by: int = Field(..., examples=[5])
    commits: List[CommitModel]
    diff_url: AnyUrl = Field(
        ...,
        examples=['https://github.com/octocat/Hello-World/compare/master...topic.diff'],
    )
    files: Optional[List[DiffEntry]] = None
    html_url: AnyUrl = Field(
        ..., examples=['https://github.com/octocat/Hello-World/compare/master...topic']
    )
    merge_base_commit: CommitModel
    patch_url: AnyUrl = Field(
        ...,
        examples=[
            'https://github.com/octocat/Hello-World/compare/master...topic.patch'
        ],
    )
    permalink_url: AnyUrl = Field(
        ...,
        examples=[
            'https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17'
        ],
    )
    status: Status2 = Field(..., examples=['ahead'])
    total_commits: int = Field(..., examples=[6])
    url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/compare/master...topic'
        ],
    )


class Commit2(BaseModel):
    author: Author
    comment_count: int
    committer: NullableGitUser
    message: str
    tree: Tree1
    url: AnyUrl
    verification: Optional[Verification2] = None


class ContributorActivity(BaseModel):
    author: NullableSimpleUser
    total: int = Field(..., examples=[135])
    weeks: List[Week] = Field(
        ..., examples=[[{'a': 6898, 'c': 10, 'd': 77, 'w': '1367712000'}]]
    )


class EnterpriseOverview(BaseModel):
    comments: Optional[EnterpriseCommentOverview] = None
    gists: Optional[EnterpriseGistOverview] = None
    hooks: Optional[EnterpriseHookOverview] = None
    issues: Optional[EnterpriseIssueOverview] = None
    milestones: Optional[EnterpriseMilestoneOverview] = None
    orgs: Optional[EnterpriseOrganizationOverview] = None
    pages: Optional[EnterprisePageOverview] = None
    pulls: Optional[EnterprisePullRequestOverview] = None
    repos: Optional[EnterpriseRepositoryOverview] = None
    users: Optional[EnterpriseUserOverview] = None


class FieldLinks7(BaseModel):
    current_user: Optional[LinkWithType] = None
    current_user_actor: Optional[LinkWithType] = None
    current_user_organization: Optional[LinkWithType] = None
    current_user_organizations: Optional[List[LinkWithType]] = None
    current_user_public: Optional[LinkWithType] = None
    security_advisories: Optional[LinkWithType] = None
    timeline: LinkWithType
    user: LinkWithType


class Feed(BaseModel):
    field_links: FieldLinks7 = Field(..., alias='_links')
    current_user_actor_url: Optional[str] = Field(
        None, examples=['https://github.com/octocat.private.actor?token=abc123']
    )
    current_user_organization_url: Optional[str] = Field(
        None, examples=['https://github.com/octocat-org']
    )
    current_user_organization_urls: Optional[List[AnyUrl]] = Field(
        None,
        examples=[
            [
                'https://github.com/organizations/github/octocat.private.atom?token=abc123'
            ]
        ],
    )
    current_user_public_url: Optional[str] = Field(
        None, examples=['https://github.com/octocat']
    )
    current_user_url: Optional[str] = Field(
        None, examples=['https://github.com/octocat.private?token=abc123']
    )
    timeline_url: str = Field(..., examples=['https://github.com/timeline'])
    user_url: str = Field(..., examples=['https://github.com/{user}'])


class GistComment(BaseModel):
    author_association: AuthorAssociation
    body: constr(max_length=65535) = Field(
        ..., description='The comment text.', examples=['Body of the attachment']
    )
    created_at: datetime = Field(..., examples=['2011-04-18T23:23:56Z'])
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=['MDExOkdpc3RDb21tZW50MQ=='])
    updated_at: datetime = Field(..., examples=['2011-04-18T23:23:56Z'])
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/gists/a6db0bec360bb87e9418/comments/1']
    )
    user: NullableSimpleUser


class GistCommit(BaseModel):
    change_status: ChangeStatus
    committed_at: datetime = Field(..., examples=['2010-04-14T02:15:15Z'])
    url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f'
        ],
    )
    user: NullableSimpleUser
    version: str = Field(..., examples=['57a7f021a713b1c5a6a199b54cc514735d2d462f'])


class GistHistory(BaseModel):
    change_status: Optional[ChangeStatus] = None
    committed_at: Optional[datetime] = None
    url: Optional[AnyUrl] = None
    user: Optional[NullableSimpleUser] = None
    version: Optional[str] = None


class ForkOf(BaseModel):
    comments: int
    comments_url: AnyUrl
    commits_url: AnyUrl
    created_at: datetime
    description: str
    files: Dict[str, Files2]
    forks: Optional[List] = None
    forks_url: AnyUrl
    git_pull_url: AnyUrl
    git_push_url: AnyUrl
    history: Optional[List] = None
    html_url: AnyUrl
    id: str
    node_id: str
    owner: Optional[NullableSimpleUser] = None
    public: bool
    truncated: Optional[bool] = None
    updated_at: datetime
    url: AnyUrl
    user: NullableSimpleUser


class Fork(BaseModel):
    created_at: Optional[datetime] = None
    id: Optional[str] = None
    updated_at: Optional[datetime] = None
    url: Optional[AnyUrl] = None
    user: Optional[PublicUser] = None


class GistSimple(BaseModel):
    comments: Optional[int] = None
    comments_url: Optional[str] = None
    commits_url: Optional[str] = None
    created_at: Optional[str] = None
    description: Optional[str] = None
    files: Optional[Dict[str, Files1]] = None
    fork_of: Optional[ForkOf] = Field(None, description='Gist', title='Gist')
    forks: Optional[List[Fork]] = None
    forks_url: Optional[str] = None
    git_pull_url: Optional[str] = None
    git_push_url: Optional[str] = None
    history: Optional[List[GistHistory]] = None
    html_url: Optional[str] = None
    id: Optional[str] = None
    node_id: Optional[str] = None
    owner: Optional[SimpleUser] = None
    public: Optional[bool] = None
    truncated: Optional[bool] = None
    updated_at: Optional[str] = None
    url: Optional[str] = None
    user: Optional[str] = None


class GitTag(BaseModel):
    message: str = Field(
        ...,
        description='Message describing the purpose of the tag',
        examples=['Initial public release'],
    )
    node_id: str = Field(
        ...,
        examples=['MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw=='],
    )
    object: Object1
    sha: str = Field(..., examples=['940bd336248efae0f9ee5bc7b2d5c985887b16ac'])
    tag: str = Field(..., description='Name of the tag', examples=['v0.0.1'])
    tagger: Tagger
    url: AnyUrl = Field(
        ...,
        description='URL for the tag',
        examples=[
            'https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac'
        ],
    )
    verification: Optional[Verification2] = None


class Config2(BaseModel):
    content_type: Optional[WebhookConfigContentType] = None
    digest: Optional[str] = Field(None, examples=['"sha256"'])
    email: Optional[str] = Field(None, examples=['"foo@bar.com"'])
    insecure_ssl: Optional[WebhookConfigInsecureSsl] = None
    password: Optional[str] = Field(None, examples=['"foo"'])
    room: Optional[str] = Field(None, examples=['"roomer"'])
    secret: Optional[WebhookConfigSecret] = None
    subdomain: Optional[str] = Field(None, examples=['"foo"'])
    token: Optional[str] = Field(None, examples=['"abc"'])
    url: Optional[WebhookConfigUrl] = None


class Hook(BaseModel):
    active: bool = Field(
        ...,
        description='Determines whether the hook is actually triggered on pushes.',
        examples=[True],
    )
    config: Config2
    created_at: datetime = Field(..., examples=['2011-09-06T17:26:27Z'])
    events: List[str] = Field(
        ...,
        description="Determines what events the hook is triggered for. Default: ['push'].",
        examples=[['push', 'pull_request']],
    )
    id: int = Field(..., description='Unique identifier of the webhook.', examples=[42])
    last_response: HookResponse
    name: str = Field(
        ...,
        description="The name of a valid service, use 'web' for a webhook.",
        examples=['web'],
    )
    ping_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World/hooks/1/pings']
    )
    test_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World/hooks/1/test']
    )
    type: str
    updated_at: datetime = Field(..., examples=['2011-09-06T20:39:23Z'])
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World/hooks/1']
    )


class InstallationGhes2(BaseModel):
    access_tokens_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/installations/1/access_tokens']
    )
    account: Union[SimpleUser, Enterprise]
    app_id: int = Field(..., examples=[1])
    app_slug: str = Field(..., examples=['github-actions'])
    contact_email: Optional[str] = Field(
        None, examples=['"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"']
    )
    created_at: datetime
    events: List[str]
    html_url: AnyUrl = Field(
        ...,
        examples=['https://github.com/organizations/github/settings/installations/1'],
    )
    id: int = Field(..., description='The ID of the installation.', examples=[1])
    permissions: Permissions3 = Field(
        ..., examples=[{'deployments': 'write', 'issues': 'read'}]
    )
    repositories_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/installation/repositories']
    )
    repository_selection: RepositorySelection = Field(
        ...,
        description="Describe whether all repositories have been selected or there's a selection involved",
    )
    single_file_name: str = Field(..., examples=['config.yaml'])
    suspended_at: Optional[datetime] = None
    suspended_by: Optional[NullableSimpleUser] = None
    target_id: int = Field(
        ...,
        description='The ID of the user or organization this token is being scoped to.',
    )
    target_type: str = Field(..., examples=['Organization'])
    updated_at: datetime


class Integration(BaseModel):
    client_id: Optional[str] = Field(None, examples=['"Iv1.25b5d1e65ffc4022"'])
    client_secret: Optional[str] = Field(
        None, examples=['"1d4b2097ac622ba702d19de498f005747a8b21d3"']
    )
    created_at: datetime = Field(..., examples=['2017-07-08T16:18:44-04:00'])
    description: str = Field(..., examples=['The description of the app.'])
    events: List[str] = Field(
        ...,
        description='The list of events for the GitHub app',
        examples=[['label', 'deployment']],
    )
    external_url: AnyUrl = Field(..., examples=['https://example.com'])
    html_url: AnyUrl = Field(..., examples=['https://github.com/apps/super-ci'])
    id: int = Field(
        ..., description='Unique identifier of the GitHub app', examples=[37]
    )
    installations_count: Optional[int] = Field(
        None,
        description='The number of installations associated with the GitHub app',
        examples=[5],
    )
    name: str = Field(
        ..., description='The name of the GitHub app', examples=['Probot Owners']
    )
    node_id: str = Field(..., examples=['MDExOkludGVncmF0aW9uMQ=='])
    owner: NullableSimpleUser
    pem: Optional[str] = Field(
        None,
        examples=[
            '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"'
        ],
    )
    permissions: Permissions4 = Field(
        ...,
        description='The set of permissions for the GitHub app',
        examples=[{'deployments': 'write', 'issues': 'read'}],
    )
    slug: Optional[str] = Field(
        None, description='The slug name of the GitHub app', examples=['probot-owners']
    )
    updated_at: datetime = Field(..., examples=['2017-07-08T16:18:44-04:00'])
    webhook_secret: Optional[str] = Field(
        None, examples=['"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"']
    )


class LabelSearchResultItem(BaseModel):
    color: str
    default: bool
    description: str
    id: int
    name: str
    node_id: str
    score: float
    text_matches: Optional[SearchResultTextMatches] = None
    url: AnyUrl


class LicenseContent(BaseModel):
    field_links: FieldLinks9 = Field(..., alias='_links')
    content: str
    download_url: AnyUrl
    encoding: str
    git_url: AnyUrl
    html_url: AnyUrl
    license: NullableLicenseSimple
    name: str
    path: str
    sha: str
    size: int
    type: str
    url: AnyUrl


class Milestone1(BaseModel):
    closed_at: datetime = Field(..., examples=['2013-02-12T13:22:01Z'])
    closed_issues: int = Field(..., examples=[8])
    created_at: datetime = Field(..., examples=['2011-04-10T20:09:31Z'])
    creator: NullableSimpleUser
    description: str = Field(..., examples=['Tracking milestone for version 1.0'])
    due_on: datetime = Field(..., examples=['2012-10-09T23:39:01Z'])
    html_url: AnyUrl = Field(
        ..., examples=['https://github.com/octocat/Hello-World/milestones/v1.0']
    )
    id: int = Field(..., examples=[1002604])
    labels_url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels'
        ],
    )
    node_id: str = Field(..., examples=['MDk6TWlsZXN0b25lMTAwMjYwNA=='])
    number: int = Field(..., description='The number of the milestone.', examples=[42])
    open_issues: int = Field(..., examples=[4])
    state: State1 = Field(
        ..., description='The state of the milestone.', examples=['open']
    )
    title: str = Field(
        ..., description='The title of the milestone.', examples=['v1.0']
    )
    updated_at: datetime = Field(..., examples=['2014-03-03T18:58:10Z'])
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World/milestones/1']
    )


class NullableIntegration(BaseModel):
    client_id: Optional[str] = Field(None, examples=['"Iv1.25b5d1e65ffc4022"'])
    client_secret: Optional[str] = Field(
        None, examples=['"1d4b2097ac622ba702d19de498f005747a8b21d3"']
    )
    created_at: datetime = Field(..., examples=['2017-07-08T16:18:44-04:00'])
    description: str = Field(..., examples=['The description of the app.'])
    events: List[str] = Field(
        ...,
        description='The list of events for the GitHub app',
        examples=[['label', 'deployment']],
    )
    external_url: AnyUrl = Field(..., examples=['https://example.com'])
    html_url: AnyUrl = Field(..., examples=['https://github.com/apps/super-ci'])
    id: int = Field(
        ..., description='Unique identifier of the GitHub app', examples=[37]
    )
    installations_count: Optional[int] = Field(
        None,
        description='The number of installations associated with the GitHub app',
        examples=[5],
    )
    name: str = Field(
        ..., description='The name of the GitHub app', examples=['Probot Owners']
    )
    node_id: str = Field(..., examples=['MDExOkludGVncmF0aW9uMQ=='])
    owner: NullableSimpleUser
    pem: Optional[str] = Field(
        None,
        examples=[
            '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"'
        ],
    )
    permissions: Permissions6 = Field(
        ...,
        description='The set of permissions for the GitHub app',
        examples=[{'deployments': 'write', 'issues': 'read'}],
    )
    slug: Optional[str] = Field(
        None, description='The slug name of the GitHub app', examples=['probot-owners']
    )
    updated_at: datetime = Field(..., examples=['2017-07-08T16:18:44-04:00'])
    webhook_secret: Optional[str] = Field(
        None, examples=['"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"']
    )


class NullableMilestone(BaseModel):
    closed_at: datetime = Field(..., examples=['2013-02-12T13:22:01Z'])
    closed_issues: int = Field(..., examples=[8])
    created_at: datetime = Field(..., examples=['2011-04-10T20:09:31Z'])
    creator: NullableSimpleUser
    description: str = Field(..., examples=['Tracking milestone for version 1.0'])
    due_on: datetime = Field(..., examples=['2012-10-09T23:39:01Z'])
    html_url: AnyUrl = Field(
        ..., examples=['https://github.com/octocat/Hello-World/milestones/v1.0']
    )
    id: int = Field(..., examples=[1002604])
    labels_url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/milestones/1/labels'
        ],
    )
    node_id: str = Field(..., examples=['MDk6TWlsZXN0b25lMTAwMjYwNA=='])
    number: int = Field(..., description='The number of the milestone.', examples=[42])
    open_issues: int = Field(..., examples=[4])
    state: State1 = Field(
        ..., description='The state of the milestone.', examples=['open']
    )
    title: str = Field(
        ..., description='The title of the milestone.', examples=['v1.0']
    )
    updated_at: datetime = Field(..., examples=['2014-03-03T18:58:10Z'])
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World/milestones/1']
    )


class NullableRepository(BaseModel):
    allow_forking: Optional[bool] = Field(
        None, description='Whether to allow forking this repo'
    )
    allow_merge_commit: Optional[bool] = Field(
        True,
        description='Whether to allow merge commits for pull requests.',
        examples=[True],
    )
    allow_rebase_merge: Optional[bool] = Field(
        True,
        description='Whether to allow rebase merges for pull requests.',
        examples=[True],
    )
    allow_squash_merge: Optional[bool] = Field(
        True,
        description='Whether to allow squash merges for pull requests.',
        examples=[True],
    )
    anonymous_access_enabled: Optional[bool] = None
    archive_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}'
        ],
    )
    archived: bool = Field(..., description='Whether the repository is archived.')
    assignees_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/assignees{/user}'],
    )
    blobs_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}'],
    )
    branches_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/branches{/branch}'],
    )
    clone_url: str = Field(..., examples=['https://github.com/octocat/Hello-World.git'])
    collaborators_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}'
        ],
    )
    comments_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/comments{/number}'],
    )
    commits_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/commits{/sha}']
    )
    compare_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}'
        ],
    )
    contents_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/contents/{+path}'],
    )
    contributors_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/contributors']
    )
    created_at: datetime = Field(..., examples=['2011-01-26T19:01:12Z'])
    default_branch: str = Field(
        ..., description='The default branch of the repository.', examples=['master']
    )
    delete_branch_on_merge: Optional[bool] = Field(
        False,
        description='Whether to delete head branches when pull requests are merged',
        examples=[False],
    )
    deployments_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/deployments']
    )
    description: str = Field(..., examples=['This your first repo!'])
    disabled: bool = Field(
        ..., description='Returns whether or not this repository disabled.'
    )
    downloads_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/downloads']
    )
    events_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/events']
    )
    fork: bool
    forks: int
    forks_count: int = Field(..., examples=[9])
    forks_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/forks']
    )
    full_name: str = Field(..., examples=['octocat/Hello-World'])
    git_commits_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}'],
    )
    git_refs_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}']
    )
    git_tags_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}']
    )
    git_url: str = Field(..., examples=['git:github.com/octocat/Hello-World.git'])
    has_downloads: bool = Field(
        ..., description='Whether downloads are enabled.', examples=[True]
    )
    has_issues: bool = Field(
        ..., description='Whether issues are enabled.', examples=[True]
    )
    has_pages: bool
    has_projects: bool = Field(
        ..., description='Whether projects are enabled.', examples=[True]
    )
    has_wiki: bool = Field(
        ..., description='Whether the wiki is enabled.', examples=[True]
    )
    homepage: AnyUrl = Field(..., examples=['https://github.com'])
    hooks_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/hooks']
    )
    html_url: AnyUrl = Field(..., examples=['https://github.com/octocat/Hello-World'])
    id: int = Field(
        ..., description='Unique identifier of the repository', examples=[42]
    )
    is_template: Optional[bool] = Field(
        False,
        description='Whether this repository acts as a template that can be used to generate new repositories.',
        examples=[True],
    )
    issue_comment_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}'
        ],
    )
    issue_events_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}'
        ],
    )
    issues_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/issues{/number}'],
    )
    keys_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/keys{/key_id}']
    )
    labels_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/labels{/name}']
    )
    language: str
    languages_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/languages']
    )
    license: NullableLicenseSimple
    master_branch: Optional[str] = None
    merges_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/merges']
    )
    milestones_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/milestones{/number}'
        ],
    )
    mirror_url: AnyUrl = Field(
        ..., examples=['git:git.example.com/octocat/Hello-World']
    )
    name: str = Field(
        ..., description='The name of the repository.', examples=['Team Environment']
    )
    network_count: Optional[int] = None
    node_id: str = Field(..., examples=['MDEwOlJlcG9zaXRvcnkxMjk2MjY5'])
    notifications_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}'
        ],
    )
    open_issues: int
    open_issues_count: int = Field(..., examples=[0])
    organization: Optional[NullableSimpleUser] = None
    owner: SimpleUser
    permissions: Optional[Permissions7] = None
    private: bool = Field(
        ..., description='Whether the repository is private or public.'
    )
    pulls_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/pulls{/number}']
    )
    pushed_at: datetime = Field(..., examples=['2011-01-26T19:06:43Z'])
    releases_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/releases{/id}']
    )
    size: int = Field(..., examples=[108])
    ssh_url: str = Field(..., examples=['git@github.com:octocat/Hello-World.git'])
    stargazers_count: int = Field(..., examples=[80])
    stargazers_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/stargazers']
    )
    starred_at: Optional[str] = Field(None, examples=['"2020-07-09T00:17:42Z"'])
    statuses_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/statuses/{sha}']
    )
    subscribers_count: Optional[int] = None
    subscribers_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/subscribers']
    )
    subscription_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/subscription']
    )
    svn_url: AnyUrl = Field(
        ..., examples=['https://svn.github.com/octocat/Hello-World']
    )
    tags_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/tags']
    )
    teams_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/teams']
    )
    template_repository: Optional[TemplateRepository] = None
    topics: Optional[List[str]] = None
    trees_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}'],
    )
    updated_at: datetime = Field(..., examples=['2011-01-26T19:14:43Z'])
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World']
    )
    visibility: Optional[str] = Field(
        'public', description='The repository visibility: public, private, or internal.'
    )
    watchers: int
    watchers_count: int = Field(..., examples=[80])


class NullableScopedInstallation(BaseModel):
    account: SimpleUser
    has_multiple_single_files: Optional[bool] = Field(None, examples=[True])
    permissions: AppPermissions
    repositories_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/users/octocat/repos']
    )
    repository_selection: RepositorySelection = Field(
        ...,
        description="Describe whether all repositories have been selected or there's a selection involved",
    )
    single_file_name: str = Field(..., examples=['config.yaml'])
    single_file_paths: Optional[List[str]] = Field(
        None, examples=[['config.yml', '.github/issue_TEMPLATE.md']]
    )


class OrgMembership(BaseModel):
    organization: OrganizationSimple
    organization_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/orgs/octocat']
    )
    permissions: Optional[Permissions9] = None
    role: Role = Field(
        ...,
        description="The user's membership type in the organization.",
        examples=['admin'],
    )
    state: State3 = Field(
        ...,
        description='The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.',
        examples=['active'],
    )
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/orgs/octocat/memberships/defunkt']
    )
    user: NullableSimpleUser


class Page1(BaseModel):
    cname: str = Field(
        ..., description="The Pages site's custom domain", examples=['example.com']
    )
    custom_404: bool = Field(
        ..., description='Whether the Page has a custom 404 page.', examples=[False]
    )
    html_url: Optional[AnyUrl] = Field(
        None,
        description='The web address the Page can be accessed from.',
        examples=['https://example.com'],
    )
    https_certificate: Optional[PagesHttpsCertificate] = None
    https_enforced: Optional[bool] = Field(
        None, description='Whether https is enabled on the domain', examples=[True]
    )
    public: bool = Field(
        ...,
        description='Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.',
        examples=[True],
    )
    source: Optional[PagesSourceHash] = None
    status: Status4 = Field(
        ...,
        description='The status of the most recent build of the Page.',
        examples=['built'],
    )
    url: AnyUrl = Field(
        ...,
        description='The API address for accessing this Page resource.',
        examples=['https://api.github.com/repos/github/hello-world/pages'],
    )


class DismissalRestrictions(BaseModel):
    teams: List[TeamModel]
    teams_url: AnyUrl
    url: AnyUrl
    users: List[SimpleUser]
    users_url: AnyUrl


class RequiredPullRequestReviews(BaseModel):
    dismiss_stale_reviews: Optional[bool] = None
    dismissal_restrictions: Optional[DismissalRestrictions] = None
    require_code_owner_reviews: Optional[bool] = None
    required_approving_review_count: Optional[int] = None
    url: AnyUrl


class ProtectedBranch(BaseModel):
    allow_deletions: Optional[AllowDeletions1] = None
    allow_force_pushes: Optional[AllowForcePushes1] = None
    enforce_admins: Optional[EnforceAdmins] = None
    required_conversation_resolution: Optional[RequiredConversationResolution1] = None
    required_linear_history: Optional[RequiredLinearHistory1] = None
    required_pull_request_reviews: Optional[RequiredPullRequestReviews] = None
    required_signatures: Optional[RequiredSignatures] = None
    required_status_checks: Optional[StatusCheckPolicy] = None
    restrictions: Optional[BranchRestrictionPolicy] = None
    url: AnyUrl


class DismissalRestrictions1(BaseModel):
    teams: Optional[List[TeamModel]] = Field(
        None, description='The list of teams with review dismissal access.'
    )
    teams_url: Optional[str] = Field(
        None,
        examples=[
            '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"'
        ],
    )
    url: Optional[str] = Field(
        None,
        examples=[
            '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"'
        ],
    )
    users: Optional[List[SimpleUser]] = Field(
        None, description='The list of users with review dismissal access.'
    )
    users_url: Optional[str] = Field(
        None,
        examples=[
            '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"'
        ],
    )


class ProtectedBranchPullRequestReview(BaseModel):
    dismiss_stale_reviews: bool = Field(..., examples=[True])
    dismissal_restrictions: Optional[DismissalRestrictions1] = None
    require_code_owner_reviews: bool = Field(..., examples=[True])
    required_approving_review_count: Optional[conint(ge=1, le=6)] = Field(
        None, examples=[2]
    )
    url: Optional[AnyUrl] = Field(
        None,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions'
        ],
    )


class PullRequest3(BaseModel):
    field_links: FieldLinks10 = Field(..., alias='_links')
    active_lock_reason: Optional[str] = Field(None, examples=['too heated'])
    additions: int = Field(..., examples=[100])
    assignee: NullableSimpleUser
    assignees: Optional[List[SimpleUser]] = None
    author_association: AuthorAssociation
    base: Base
    body: str = Field(..., examples=['Please pull these awesome changes'])
    changed_files: int = Field(..., examples=[5])
    closed_at: datetime = Field(..., examples=['2011-01-26T19:01:12Z'])
    comments: int = Field(..., examples=[10])
    comments_url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/issues/1347/comments'
        ],
    )
    commits: int = Field(..., examples=[3])
    commits_url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits'
        ],
    )
    created_at: datetime = Field(..., examples=['2011-01-26T19:01:12Z'])
    deletions: int = Field(..., examples=[3])
    diff_url: AnyUrl = Field(
        ..., examples=['https://github.com/octocat/Hello-World/pull/1347.diff']
    )
    draft: Optional[bool] = Field(
        None,
        description='Indicates whether or not the pull request is a draft.',
        examples=[False],
    )
    head: Head
    html_url: AnyUrl = Field(
        ..., examples=['https://github.com/octocat/Hello-World/pull/1347']
    )
    id: int = Field(..., examples=[1])
    issue_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World/issues/1347']
    )
    labels: List[Label2]
    locked: bool = Field(..., examples=[True])
    maintainer_can_modify: bool = Field(
        ...,
        description='Indicates whether maintainers can modify the pull request.',
        examples=[True],
    )
    merge_commit_sha: str = Field(
        ..., examples=['e5bd3914e2e596debea16f433f57875b5b90bcd6']
    )
    mergeable: bool = Field(..., examples=[True])
    mergeable_state: str = Field(..., examples=['clean'])
    merged: bool
    merged_at: datetime = Field(..., examples=['2011-01-26T19:01:12Z'])
    merged_by: NullableSimpleUser
    milestone: NullableMilestone
    node_id: str = Field(..., examples=['MDExOlB1bGxSZXF1ZXN0MQ=='])
    number: int = Field(
        ...,
        description='Number uniquely identifying the pull request within its repository.',
        examples=[42],
    )
    patch_url: AnyUrl = Field(
        ..., examples=['https://github.com/octocat/Hello-World/pull/1347.patch']
    )
    rebaseable: Optional[bool] = Field(None, examples=[True])
    requested_reviewers: Optional[List[SimpleUser]] = None
    requested_teams: Optional[List[TeamSimple]] = None
    review_comment_url: str = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}'
        ],
    )
    review_comments: int = Field(..., examples=[0])
    review_comments_url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments'
        ],
    )
    state: State5 = Field(
        ...,
        description='State of this Pull Request. Either `open` or `closed`.',
        examples=['open'],
    )
    statuses_url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e'
        ],
    )
    title: str = Field(
        ...,
        description='The title of the pull request.',
        examples=['Amazing new feature'],
    )
    updated_at: datetime = Field(..., examples=['2011-01-26T19:01:12Z'])
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World/pulls/1347']
    )
    user: NullableSimpleUser


class PullRequestReviewComment(BaseModel):
    field_links: FieldLinks12 = Field(..., alias='_links')
    author_association: AuthorAssociation
    body: str = Field(
        ...,
        description='The text of the comment.',
        examples=['We should probably include a check for null values here.'],
    )
    body_html: Optional[str] = Field(None, examples=['"<p>comment body</p>"'])
    body_text: Optional[str] = Field(None, examples=['"comment body"'])
    commit_id: str = Field(
        ...,
        description='The SHA of the commit to which the comment applies.',
        examples=['6dcb09b5b57875f334f61aebed695e2e4193db5e'],
    )
    created_at: datetime = Field(..., examples=['2011-04-14T16:00:49Z'])
    diff_hunk: str = Field(
        ...,
        description='The diff of the line that the comment refers to.',
        examples=['@@ -16,33 +16,40 @@ public class Connection : IConnection...'],
    )
    html_url: AnyUrl = Field(
        ...,
        description='HTML URL for the pull request review comment.',
        examples=['https://github.com/octocat/Hello-World/pull/1#discussion-diff-1'],
    )
    id: int = Field(
        ..., description='The ID of the pull request review comment.', examples=[1]
    )
    in_reply_to_id: Optional[int] = Field(
        None, description='The comment ID to reply to.', examples=[8]
    )
    line: Optional[int] = Field(
        None,
        description='The line of the blob to which the comment applies. The last line of the range for a multi-line comment',
        examples=[2],
    )
    node_id: str = Field(
        ...,
        description='The node ID of the pull request review comment.',
        examples=['MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw'],
    )
    original_commit_id: str = Field(
        ...,
        description='The SHA of the original commit to which the comment applies.',
        examples=['9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840'],
    )
    original_line: Optional[int] = Field(
        None,
        description='The line of the blob to which the comment applies. The last line of the range for a multi-line comment',
        examples=[2],
    )
    original_position: int = Field(
        ...,
        description='The index of the original line in the diff to which the comment applies.',
        examples=[4],
    )
    original_start_line: Optional[int] = Field(
        None,
        description='The first line of the range for a multi-line comment.',
        examples=[2],
    )
    path: str = Field(
        ...,
        description='The relative path of the file to which the comment applies.',
        examples=['config/database.yaml'],
    )
    position: int = Field(
        ...,
        description='The line index in the diff to which the comment applies.',
        examples=[1],
    )
    pull_request_review_id: int = Field(
        ...,
        description='The ID of the pull request review to which the comment belongs.',
        examples=[42],
    )
    pull_request_url: AnyUrl = Field(
        ...,
        description='URL for the pull request that the review comment belongs to.',
        examples=['https://api.github.com/repos/octocat/Hello-World/pulls/1'],
    )
    reactions: Optional[ReactionRollup] = None
    side: Optional[Side] = Field(
        'RIGHT',
        description='The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment',
    )
    start_line: Optional[int] = Field(
        None,
        description='The first line of the range for a multi-line comment.',
        examples=[2],
    )
    start_side: Optional[StartSide] = Field(
        'RIGHT',
        description='The side of the first line of the range for a multi-line comment.',
    )
    updated_at: datetime = Field(..., examples=['2011-04-14T16:00:49Z'])
    url: str = Field(
        ...,
        description='URL for the pull request review comment',
        examples=['https://api.github.com/repos/octocat/Hello-World/pulls/comments/1'],
    )
    user: SimpleUser


class PullRequestReviewRequest(BaseModel):
    teams: List[TeamModel]
    users: List[SimpleUser]


class Release(BaseModel):
    assets: List[ReleaseAsset]
    assets_url: AnyUrl
    author: SimpleUser
    body: Optional[str] = None
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    created_at: datetime
    draft: bool = Field(
        ...,
        description='true to create a draft (unpublished) release, false to create a published one.',
        examples=[False],
    )
    html_url: AnyUrl
    id: int
    name: str
    node_id: str
    prerelease: bool = Field(
        ...,
        description='Whether to identify the release as a prerelease or a full release.',
        examples=[False],
    )
    published_at: datetime
    reactions: Optional[ReactionRollup] = None
    tag_name: str = Field(..., description='The name of the tag.', examples=['v1.0.0'])
    tarball_url: AnyUrl
    target_commitish: str = Field(
        ...,
        description='Specifies the commitish value that determines where the Git tag is created from.',
        examples=['master'],
    )
    upload_url: str
    url: AnyUrl
    zipball_url: AnyUrl


class RemovedFromProjectIssueEvent(BaseModel):
    actor: SimpleUser
    commit_id: str
    commit_url: str
    created_at: str
    event: str
    id: int
    node_id: str
    performed_via_github_app: NullableIntegration
    project_card: Optional[ProjectCard4] = None
    url: str


class RenamedIssueEvent(BaseModel):
    actor: SimpleUser
    commit_id: str
    commit_url: str
    created_at: str
    event: str
    id: int
    node_id: str
    performed_via_github_app: NullableIntegration
    rename: Rename
    url: str


class RepoSearchResultItem(BaseModel):
    allow_forking: Optional[bool] = None
    allow_merge_commit: Optional[bool] = None
    allow_rebase_merge: Optional[bool] = None
    allow_squash_merge: Optional[bool] = None
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: datetime
    default_branch: str
    delete_branch_on_merge: Optional[bool] = None
    deployments_url: AnyUrl
    description: str
    disabled: bool = Field(
        ..., description='Returns whether or not this repository disabled.'
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    homepage: AnyUrl
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: str
    languages_url: AnyUrl
    license: NullableLicenseSimple
    master_branch: Optional[str] = None
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: AnyUrl
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    owner: NullableSimpleUser
    permissions: Optional[Permissions10] = None
    private: bool
    pulls_url: str
    pushed_at: datetime
    releases_url: str
    score: float
    size: int
    ssh_url: str
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    temp_clone_token: Optional[str] = None
    text_matches: Optional[SearchResultTextMatches] = None
    topics: Optional[List[str]] = None
    trees_url: str
    updated_at: datetime
    url: AnyUrl
    watchers: int
    watchers_count: int


class Repository(BaseModel):
    allow_forking: Optional[bool] = Field(
        None, description='Whether to allow forking this repo'
    )
    allow_merge_commit: Optional[bool] = Field(
        True,
        description='Whether to allow merge commits for pull requests.',
        examples=[True],
    )
    allow_rebase_merge: Optional[bool] = Field(
        True,
        description='Whether to allow rebase merges for pull requests.',
        examples=[True],
    )
    allow_squash_merge: Optional[bool] = Field(
        True,
        description='Whether to allow squash merges for pull requests.',
        examples=[True],
    )
    anonymous_access_enabled: Optional[bool] = None
    archive_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}'
        ],
    )
    archived: bool = Field(..., description='Whether the repository is archived.')
    assignees_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/assignees{/user}'],
    )
    blobs_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}'],
    )
    branches_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/branches{/branch}'],
    )
    clone_url: str = Field(..., examples=['https://github.com/octocat/Hello-World.git'])
    collaborators_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}'
        ],
    )
    comments_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/comments{/number}'],
    )
    commits_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/commits{/sha}']
    )
    compare_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}'
        ],
    )
    contents_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/contents/{+path}'],
    )
    contributors_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/contributors']
    )
    created_at: datetime = Field(..., examples=['2011-01-26T19:01:12Z'])
    default_branch: str = Field(
        ..., description='The default branch of the repository.', examples=['master']
    )
    delete_branch_on_merge: Optional[bool] = Field(
        False,
        description='Whether to delete head branches when pull requests are merged',
        examples=[False],
    )
    deployments_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/deployments']
    )
    description: str = Field(..., examples=['This your first repo!'])
    disabled: bool = Field(
        ..., description='Returns whether or not this repository disabled.'
    )
    downloads_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/downloads']
    )
    events_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/events']
    )
    fork: bool
    forks: int
    forks_count: int = Field(..., examples=[9])
    forks_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/forks']
    )
    full_name: str = Field(..., examples=['octocat/Hello-World'])
    git_commits_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}'],
    )
    git_refs_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}']
    )
    git_tags_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}']
    )
    git_url: str = Field(..., examples=['git:github.com/octocat/Hello-World.git'])
    has_downloads: bool = Field(
        ..., description='Whether downloads are enabled.', examples=[True]
    )
    has_issues: bool = Field(
        ..., description='Whether issues are enabled.', examples=[True]
    )
    has_pages: bool
    has_projects: bool = Field(
        ..., description='Whether projects are enabled.', examples=[True]
    )
    has_wiki: bool = Field(
        ..., description='Whether the wiki is enabled.', examples=[True]
    )
    homepage: AnyUrl = Field(..., examples=['https://github.com'])
    hooks_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/hooks']
    )
    html_url: AnyUrl = Field(..., examples=['https://github.com/octocat/Hello-World'])
    id: int = Field(
        ..., description='Unique identifier of the repository', examples=[42]
    )
    is_template: Optional[bool] = Field(
        False,
        description='Whether this repository acts as a template that can be used to generate new repositories.',
        examples=[True],
    )
    issue_comment_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}'
        ],
    )
    issue_events_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}'
        ],
    )
    issues_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/issues{/number}'],
    )
    keys_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/keys{/key_id}']
    )
    labels_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/labels{/name}']
    )
    language: str
    languages_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/languages']
    )
    license: NullableLicenseSimple
    master_branch: Optional[str] = None
    merges_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/merges']
    )
    milestones_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/milestones{/number}'
        ],
    )
    mirror_url: AnyUrl = Field(
        ..., examples=['git:git.example.com/octocat/Hello-World']
    )
    name: str = Field(
        ..., description='The name of the repository.', examples=['Team Environment']
    )
    network_count: Optional[int] = None
    node_id: str = Field(..., examples=['MDEwOlJlcG9zaXRvcnkxMjk2MjY5'])
    notifications_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}'
        ],
    )
    open_issues: int
    open_issues_count: int = Field(..., examples=[0])
    organization: Optional[NullableSimpleUser] = None
    owner: SimpleUser
    permissions: Optional[Permissions10] = None
    private: bool = Field(
        ..., description='Whether the repository is private or public.'
    )
    pulls_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/pulls{/number}']
    )
    pushed_at: datetime = Field(..., examples=['2011-01-26T19:06:43Z'])
    releases_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/releases{/id}']
    )
    size: int = Field(..., examples=[108])
    ssh_url: str = Field(..., examples=['git@github.com:octocat/Hello-World.git'])
    stargazers_count: int = Field(..., examples=[80])
    stargazers_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/stargazers']
    )
    starred_at: Optional[str] = Field(None, examples=['"2020-07-09T00:17:42Z"'])
    statuses_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/statuses/{sha}']
    )
    subscribers_count: Optional[int] = None
    subscribers_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/subscribers']
    )
    subscription_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/subscription']
    )
    svn_url: AnyUrl = Field(
        ..., examples=['https://svn.github.com/octocat/Hello-World']
    )
    tags_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/tags']
    )
    teams_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/teams']
    )
    template_repository: Optional[TemplateRepository1] = None
    topics: Optional[List[str]] = None
    trees_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}'],
    )
    updated_at: datetime = Field(..., examples=['2011-01-26T19:14:43Z'])
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World']
    )
    visibility: Optional[str] = Field(
        'public', description='The repository visibility: public, private, or internal.'
    )
    watchers: int
    watchers_count: int = Field(..., examples=[80])


class ReviewDismissedIssueEvent(BaseModel):
    actor: SimpleUser
    commit_id: str
    commit_url: str
    created_at: str
    dismissed_review: DismissedReview
    event: str
    id: int
    node_id: str
    performed_via_github_app: NullableIntegration
    url: str


class ReviewRequestRemovedIssueEvent(BaseModel):
    actor: SimpleUser
    commit_id: str
    commit_url: str
    created_at: str
    event: str
    id: int
    node_id: str
    performed_via_github_app: NullableIntegration
    requested_reviewer: Optional[SimpleUser] = None
    requested_team: Optional[TeamModel] = None
    review_requester: SimpleUser
    url: str


class ReviewRequestedIssueEvent(BaseModel):
    actor: SimpleUser
    commit_id: str
    commit_url: str
    created_at: str
    event: str
    id: int
    node_id: str
    performed_via_github_app: NullableIntegration
    requested_reviewer: Optional[SimpleUser] = None
    requested_team: Optional[TeamModel] = None
    review_requester: SimpleUser
    url: str


class StarredRepository(BaseModel):
    repo: Repository
    starred_at: datetime


class TeamRepository(BaseModel):
    allow_forking: Optional[bool] = Field(
        False, description='Whether to allow forking this repo', examples=[False]
    )
    allow_merge_commit: Optional[bool] = Field(
        True,
        description='Whether to allow merge commits for pull requests.',
        examples=[True],
    )
    allow_rebase_merge: Optional[bool] = Field(
        True,
        description='Whether to allow rebase merges for pull requests.',
        examples=[True],
    )
    allow_squash_merge: Optional[bool] = Field(
        True,
        description='Whether to allow squash merges for pull requests.',
        examples=[True],
    )
    anonymous_access_enabled: Optional[bool] = None
    archive_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}'
        ],
    )
    archived: bool = Field(..., description='Whether the repository is archived.')
    assignees_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/assignees{/user}'],
    )
    blobs_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}'],
    )
    branches_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/branches{/branch}'],
    )
    clone_url: str = Field(..., examples=['https://github.com/octocat/Hello-World.git'])
    collaborators_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}'
        ],
    )
    comments_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/comments{/number}'],
    )
    commits_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/commits{/sha}']
    )
    compare_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}'
        ],
    )
    contents_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/contents/{+path}'],
    )
    contributors_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/contributors']
    )
    created_at: datetime = Field(..., examples=['2011-01-26T19:01:12Z'])
    default_branch: str = Field(
        ..., description='The default branch of the repository.', examples=['master']
    )
    delete_branch_on_merge: Optional[bool] = Field(
        False,
        description='Whether to delete head branches when pull requests are merged',
        examples=[False],
    )
    deployments_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/deployments']
    )
    description: str = Field(..., examples=['This your first repo!'])
    disabled: bool = Field(
        ..., description='Returns whether or not this repository disabled.'
    )
    downloads_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/downloads']
    )
    events_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/events']
    )
    fork: bool
    forks: int
    forks_count: int = Field(..., examples=[9])
    forks_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/forks']
    )
    full_name: str = Field(..., examples=['octocat/Hello-World'])
    git_commits_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}'],
    )
    git_refs_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}']
    )
    git_tags_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}']
    )
    git_url: str = Field(..., examples=['git:github.com/octocat/Hello-World.git'])
    has_downloads: bool = Field(
        ..., description='Whether downloads are enabled.', examples=[True]
    )
    has_issues: bool = Field(
        ..., description='Whether issues are enabled.', examples=[True]
    )
    has_pages: bool
    has_projects: bool = Field(
        ..., description='Whether projects are enabled.', examples=[True]
    )
    has_wiki: bool = Field(
        ..., description='Whether the wiki is enabled.', examples=[True]
    )
    homepage: AnyUrl = Field(..., examples=['https://github.com'])
    hooks_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/hooks']
    )
    html_url: AnyUrl = Field(..., examples=['https://github.com/octocat/Hello-World'])
    id: int = Field(
        ..., description='Unique identifier of the repository', examples=[42]
    )
    is_template: Optional[bool] = Field(
        False,
        description='Whether this repository acts as a template that can be used to generate new repositories.',
        examples=[True],
    )
    issue_comment_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}'
        ],
    )
    issue_events_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}'
        ],
    )
    issues_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/issues{/number}'],
    )
    keys_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/keys{/key_id}']
    )
    labels_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/labels{/name}']
    )
    language: str
    languages_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/languages']
    )
    license: NullableLicenseSimple
    master_branch: Optional[str] = None
    merges_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/merges']
    )
    milestones_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/milestones{/number}'
        ],
    )
    mirror_url: AnyUrl = Field(
        ..., examples=['git:git.example.com/octocat/Hello-World']
    )
    name: str = Field(
        ..., description='The name of the repository.', examples=['Team Environment']
    )
    network_count: Optional[int] = None
    node_id: str = Field(..., examples=['MDEwOlJlcG9zaXRvcnkxMjk2MjY5'])
    notifications_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}'
        ],
    )
    open_issues: int
    open_issues_count: int = Field(..., examples=[0])
    owner: NullableSimpleUser
    permissions: Optional[Permissions18] = None
    private: bool = Field(
        ..., description='Whether the repository is private or public.'
    )
    pulls_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/pulls{/number}']
    )
    pushed_at: datetime = Field(..., examples=['2011-01-26T19:06:43Z'])
    releases_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/releases{/id}']
    )
    size: int = Field(..., examples=[108])
    ssh_url: str = Field(..., examples=['git@github.com:octocat/Hello-World.git'])
    stargazers_count: int = Field(..., examples=[80])
    stargazers_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/stargazers']
    )
    statuses_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/statuses/{sha}']
    )
    subscribers_count: Optional[int] = None
    subscribers_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/subscribers']
    )
    subscription_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/subscription']
    )
    svn_url: AnyUrl = Field(
        ..., examples=['https://svn.github.com/octocat/Hello-World']
    )
    tags_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/tags']
    )
    teams_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/teams']
    )
    template_repository: Optional[NullableRepository] = None
    topics: Optional[List[str]] = None
    trees_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}'],
    )
    updated_at: datetime = Field(..., examples=['2011-01-26T19:14:43Z'])
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World']
    )
    visibility: Optional[str] = Field(
        'public', description='The repository visibility: public, private, or internal.'
    )
    watchers: int
    watchers_count: int = Field(..., examples=[80])


class TimelineAssignedIssueEvent(BaseModel):
    actor: SimpleUser
    assignee: SimpleUser
    commit_id: str
    commit_url: str
    created_at: str
    event: str
    id: int
    node_id: str
    performed_via_github_app: NullableIntegration
    url: str


class TimelineCommentEvent(BaseModel):
    actor: SimpleUser
    author_association: AuthorAssociation
    body: Optional[str] = Field(
        None,
        description='Contents of the issue comment',
        examples=['What version of Safari were you using when you observed this bug?'],
    )
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    created_at: datetime = Field(..., examples=['2011-04-14T16:00:49Z'])
    event: str
    html_url: AnyUrl
    id: int = Field(
        ..., description='Unique identifier of the issue comment', examples=[42]
    )
    issue_url: AnyUrl
    node_id: str
    performed_via_github_app: Optional[NullableIntegration] = None
    reactions: Optional[ReactionRollup] = None
    updated_at: datetime = Field(..., examples=['2011-04-14T16:00:49Z'])
    url: AnyUrl = Field(
        ...,
        description='URL for the issue comment',
        examples=['https://api.github.com/repositories/42/issues/comments/1'],
    )
    user: SimpleUser


class TimelineCommitCommentedEvent(BaseModel):
    comments: Optional[List[CommitComment]] = None
    commit_id: Optional[str] = None
    event: Optional[str] = None
    node_id: Optional[str] = None


class TimelineLineCommentedEvent(BaseModel):
    comments: Optional[List[PullRequestReviewComment]] = None
    event: Optional[str] = None
    node_id: Optional[str] = None


class TimelineUnassignedIssueEvent(BaseModel):
    actor: SimpleUser
    assignee: SimpleUser
    commit_id: str
    commit_url: str
    created_at: str
    event: str
    id: int
    node_id: str
    performed_via_github_app: NullableIntegration
    url: str


class UnassignedIssueEvent(BaseModel):
    actor: SimpleUser
    assignee: SimpleUser
    assigner: SimpleUser
    commit_id: str
    commit_url: str
    created_at: str
    event: str
    id: int
    node_id: str
    performed_via_github_app: NullableIntegration
    url: str


class UnlabeledIssueEvent(BaseModel):
    actor: SimpleUser
    commit_id: str
    commit_url: str
    created_at: str
    event: str
    id: int
    label: Label4
    node_id: str
    performed_via_github_app: NullableIntegration
    url: str


class AppManifestsCodeConversionsPostResponse(Integration):
    client_id: str
    client_secret: str
    pem: str
    webhook_secret: str


class AppInstallationsGetResponse(RootModel[List[InstallationGhes2]]):
    root: List[InstallationGhes2]


class ApplicationsGrantsGetResponse(RootModel[List[ApplicationGrant]]):
    root: List[ApplicationGrant]


class GistsGetResponse(RootModel[List[BaseGist]]):
    root: List[BaseGist]


class GistsPublicGetResponse(RootModel[List[BaseGist]]):
    root: List[BaseGist]


class GistsStarredGetResponse(RootModel[List[BaseGist]]):
    root: List[BaseGist]


class GistsGistIdCommentsGetResponse(RootModel[List[GistComment]]):
    root: List[GistComment]


class GistsGistIdCommitsGetResponse(RootModel[List[GistCommit]]):
    root: List[GistCommit]


class GistsGistIdForksGetResponse(RootModel[List[GistSimple]]):
    root: List[GistSimple]


class InstallationRepositoriesGetResponse(BaseModel):
    repositories: List[Repository]
    repository_selection: Optional[str] = Field(None, examples=['selected'])
    total_count: int


class OrgsOrgInstallationsGetResponse(BaseModel):
    installations: List[InstallationGhes2]
    total_count: int


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteResponse(
    RootModel[List[Integration]]
):
    root: List[Integration]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsGetResponse(
    RootModel[List[Integration]]
):
    root: List[Integration]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostResponse(
    RootModel[List[Integration]]
):
    root: List[Integration]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutResponse(
    RootModel[List[Integration]]
):
    root: List[Integration]


class ReposOwnerRepoCommentsGetResponse(RootModel[List[CommitComment]]):
    root: List[CommitComment]


class ReposOwnerRepoCommitsGetResponse(RootModel[List[CommitModel]]):
    root: List[CommitModel]


class ReposOwnerRepoCommitsCommitShaCommentsGetResponse(RootModel[List[CommitComment]]):
    root: List[CommitComment]


class ReposOwnerRepoHooksGetResponse(RootModel[List[Hook]]):
    root: List[Hook]


class ReposOwnerRepoMilestonesGetResponse(RootModel[List[Milestone1]]):
    root: List[Milestone1]


class ReposOwnerRepoPullsCommentsGetResponse(RootModel[List[PullRequestReviewComment]]):
    root: List[PullRequestReviewComment]


class ReposOwnerRepoPullsPullNumberCommentsGetResponse(
    RootModel[List[PullRequestReviewComment]]
):
    root: List[PullRequestReviewComment]


class ReposOwnerRepoPullsPullNumberCommitsGetResponse(RootModel[List[CommitModel]]):
    root: List[CommitModel]


class ReposOwnerRepoReleasesGetResponse(RootModel[List[Release]]):
    root: List[Release]


class ReposOwnerRepoStatsContributorsGetResponse(RootModel[List[ContributorActivity]]):
    root: List[ContributorActivity]


class SearchLabelsGetResponse(BaseModel):
    incomplete_results: bool
    items: List[LabelSearchResultItem]
    total_count: int


class SearchRepositoriesGetResponse(BaseModel):
    incomplete_results: bool
    items: List[RepoSearchResultItem]
    total_count: int


class UserInstallationsGetResponse(BaseModel):
    installations: List[InstallationGhes2]
    total_count: int


class UserInstallationsInstallationIdRepositoriesGetResponse(BaseModel):
    repositories: List[Repository]
    repository_selection: Optional[str] = None
    total_count: int


class UserMembershipsOrgsGetResponse(RootModel[List[OrgMembership]]):
    root: List[OrgMembership]


class UserReposGetResponse(RootModel[List[Repository]]):
    root: List[Repository]


class UserStarredGetResponse(RootModel[List[Repository]]):
    root: List[Repository]


class UserStarredGetResponse1(RootModel[List[StarredRepository]]):
    root: List[StarredRepository]


class UsersUsernameGistsGetResponse(RootModel[List[BaseGist]]):
    root: List[BaseGist]


class UsersUsernameStarredGetResponse(
    RootModel[Union[List[StarredRepository], List[Repository]]]
):
    root: Union[List[StarredRepository], List[Repository]]


class AddedToProjectIssueEvent(BaseModel):
    actor: SimpleUser
    commit_id: str
    commit_url: str
    created_at: str
    event: str
    id: int
    node_id: str
    performed_via_github_app: NullableIntegration
    project_card: Optional[ProjectCard] = None
    url: str


class AssignedIssueEvent(BaseModel):
    actor: SimpleUser
    assignee: SimpleUser
    assigner: SimpleUser
    commit_id: str
    commit_url: str
    created_at: str
    event: str
    id: int
    node_id: str
    performed_via_github_app: Integration
    url: str


class Authorization(BaseModel):
    app: App
    created_at: datetime
    fingerprint: str
    hashed_token: str
    id: int
    installation: Optional[NullableScopedInstallation] = None
    note: str
    note_url: AnyUrl
    scopes: List[str] = Field(
        ..., description='A list of scopes that this authorization is in.'
    )
    token: str
    token_last_eight: str
    updated_at: datetime
    url: AnyUrl
    user: Optional[NullableSimpleUser] = None


class BranchProtection(BaseModel):
    allow_deletions: Optional[AllowDeletions] = None
    allow_force_pushes: Optional[AllowForcePushes] = None
    enabled: Optional[bool] = None
    enforce_admins: Optional[ProtectedBranchAdminEnforced] = None
    name: Optional[str] = Field(None, examples=['"branch/with/protection"'])
    protection_url: Optional[str] = Field(
        None,
        examples=[
            '"https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"'
        ],
    )
    required_conversation_resolution: Optional[RequiredConversationResolution] = None
    required_linear_history: Optional[RequiredLinearHistory] = None
    required_pull_request_reviews: Optional[ProtectedBranchPullRequestReview] = None
    required_signatures: Optional[RequiredSignatures] = None
    required_status_checks: Optional[RequiredStatusChecks] = None
    restrictions: Optional[BranchRestrictionPolicy] = None
    url: Optional[str] = None


class BranchWithProtection(BaseModel):
    field_links: FieldLinks = Field(..., alias='_links')
    commit: CommitModel
    name: str
    pattern: Optional[str] = Field(None, examples=['"mas*"'])
    protected: bool
    protection: BranchProtection
    protection_url: AnyUrl
    required_approving_review_count: Optional[int] = Field(None, examples=[1])


class ConvertedNoteToIssueIssueEvent(BaseModel):
    actor: SimpleUser
    commit_id: str
    commit_url: str
    created_at: str
    event: str
    id: int
    node_id: str
    performed_via_github_app: Integration
    project_card: Optional[ProjectCard] = None
    url: str


class DemilestonedIssueEvent(BaseModel):
    actor: SimpleUser
    commit_id: str
    commit_url: str
    created_at: str
    event: str
    id: int
    milestone: Milestone
    node_id: str
    performed_via_github_app: NullableIntegration
    url: str


class Deployment(BaseModel):
    created_at: datetime = Field(..., examples=['2012-07-20T01:19:13Z'])
    creator: NullableSimpleUser
    description: str = Field(..., examples=['Deploy request from hubot'])
    environment: str = Field(
        ...,
        description='Name for the target deployment environment.',
        examples=['production'],
    )
    id: int = Field(
        ..., description='Unique identifier of the deployment', examples=[42]
    )
    node_id: str = Field(..., examples=['MDEwOkRlcGxveW1lbnQx'])
    original_environment: Optional[str] = Field(None, examples=['staging'])
    payload: Union[Dict[str, Any], str]
    performed_via_github_app: Optional[NullableIntegration] = None
    production_environment: Optional[bool] = Field(
        None,
        description='Specifies if the given environment is one that end-users directly interact with. Default: false.',
        examples=[True],
    )
    ref: str = Field(
        ...,
        description='The ref to deploy. This can be a branch, tag, or sha.',
        examples=['topic-branch'],
    )
    repository_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/example']
    )
    sha: str = Field(..., examples=['a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d'])
    statuses_url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/example/deployments/1/statuses'
        ],
    )
    task: str = Field(
        ..., description='Parameter to specify a task to execute', examples=['deploy']
    )
    transient_environment: Optional[bool] = Field(
        None,
        description='Specifies if the given environment is will no longer exist at some point in the future. Default: false.',
        examples=[True],
    )
    updated_at: datetime = Field(..., examples=['2012-07-20T01:19:13Z'])
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/example/deployments/1']
    )


class DeploymentSimple(BaseModel):
    created_at: datetime = Field(..., examples=['2012-07-20T01:19:13Z'])
    description: str = Field(..., examples=['Deploy request from hubot'])
    environment: str = Field(
        ...,
        description='Name for the target deployment environment.',
        examples=['production'],
    )
    id: int = Field(
        ..., description='Unique identifier of the deployment', examples=[42]
    )
    node_id: str = Field(..., examples=['MDEwOkRlcGxveW1lbnQx'])
    original_environment: Optional[str] = Field(None, examples=['staging'])
    performed_via_github_app: Optional[NullableIntegration] = None
    production_environment: Optional[bool] = Field(
        None,
        description='Specifies if the given environment is one that end-users directly interact with. Default: false.',
        examples=[True],
    )
    repository_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/example']
    )
    statuses_url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/example/deployments/1/statuses'
        ],
    )
    task: str = Field(
        ..., description='Parameter to specify a task to execute', examples=['deploy']
    )
    transient_environment: Optional[bool] = Field(
        None,
        description='Specifies if the given environment is will no longer exist at some point in the future. Default: false.',
        examples=[True],
    )
    updated_at: datetime = Field(..., examples=['2012-07-20T01:19:13Z'])
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/example/deployments/1']
    )


class DeploymentStatus(BaseModel):
    created_at: datetime = Field(..., examples=['2012-07-20T01:19:13Z'])
    creator: NullableSimpleUser
    deployment_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/example/deployments/42']
    )
    description: constr(max_length=140) = Field(
        ...,
        description='A short description of the status.',
        examples=['Deployment finished successfully.'],
    )
    environment: Optional[str] = Field(
        '',
        description='The environment of the deployment that the status is for.',
        examples=['production'],
    )
    environment_url: Optional[AnyUrl] = Field(
        '',
        description='The URL for accessing your environment.',
        examples=['https://staging.example.com/'],
    )
    id: int = Field(..., examples=[1])
    log_url: Optional[AnyUrl] = Field(
        '',
        description='The URL to associate with this status.',
        examples=['https://example.com/deployment/42/output'],
    )
    node_id: str = Field(..., examples=['MDE2OkRlcGxveW1lbnRTdGF0dXMx'])
    performed_via_github_app: Optional[NullableIntegration] = None
    repository_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/example']
    )
    state: State = Field(
        ..., description='The state of the status.', examples=['success']
    )
    target_url: AnyUrl = Field(
        ...,
        description='Deprecated: the URL to associate with this status.',
        examples=['https://example.com/deployment/42/output'],
    )
    updated_at: datetime = Field(..., examples=['2012-07-20T01:19:13Z'])
    url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/example/deployments/42/statuses/1'
        ],
    )


class FullRepository(BaseModel):
    allow_forking: Optional[bool] = Field(None, examples=[True])
    allow_merge_commit: Optional[bool] = Field(None, examples=[True])
    allow_rebase_merge: Optional[bool] = Field(None, examples=[True])
    allow_squash_merge: Optional[bool] = Field(None, examples=[True])
    anonymous_access_enabled: Optional[bool] = Field(
        True, description='Whether anonymous git access is allowed.'
    )
    archive_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}'
        ],
    )
    archived: bool
    assignees_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/assignees{/user}'],
    )
    blobs_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}'],
    )
    branches_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/branches{/branch}'],
    )
    clone_url: str = Field(..., examples=['https://github.com/octocat/Hello-World.git'])
    code_of_conduct: Optional[CodeOfConductSimple] = None
    collaborators_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}'
        ],
    )
    comments_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/comments{/number}'],
    )
    commits_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/commits{/sha}']
    )
    compare_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}'
        ],
    )
    contents_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/contents/{+path}'],
    )
    contributors_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/contributors']
    )
    created_at: datetime = Field(..., examples=['2011-01-26T19:01:12Z'])
    default_branch: str = Field(..., examples=['master'])
    delete_branch_on_merge: Optional[bool] = Field(None, examples=[False])
    deployments_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/deployments']
    )
    description: str = Field(..., examples=['This your first repo!'])
    disabled: bool = Field(
        ..., description='Returns whether or not this repository disabled.'
    )
    downloads_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/downloads']
    )
    events_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/events']
    )
    fork: bool
    forks: int
    forks_count: int = Field(..., examples=[9])
    forks_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/forks']
    )
    full_name: str = Field(..., examples=['octocat/Hello-World'])
    git_commits_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}'],
    )
    git_refs_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}']
    )
    git_tags_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}']
    )
    git_url: str = Field(..., examples=['git:github.com/octocat/Hello-World.git'])
    has_downloads: bool = Field(..., examples=[True])
    has_issues: bool = Field(..., examples=[True])
    has_pages: bool
    has_projects: bool = Field(..., examples=[True])
    has_wiki: bool = Field(..., examples=[True])
    homepage: AnyUrl = Field(..., examples=['https://github.com'])
    hooks_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/hooks']
    )
    html_url: AnyUrl = Field(..., examples=['https://github.com/octocat/Hello-World'])
    id: int = Field(..., examples=[1296269])
    is_template: Optional[bool] = Field(None, examples=[True])
    issue_comment_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}'
        ],
    )
    issue_events_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}'
        ],
    )
    issues_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/issues{/number}'],
    )
    keys_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/keys{/key_id}']
    )
    labels_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/labels{/name}']
    )
    language: str
    languages_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/languages']
    )
    license: NullableLicenseSimple
    master_branch: Optional[str] = None
    merges_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/merges']
    )
    milestones_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/milestones{/number}'
        ],
    )
    mirror_url: AnyUrl = Field(
        ..., examples=['git:git.example.com/octocat/Hello-World']
    )
    name: str = Field(..., examples=['Hello-World'])
    network_count: int = Field(..., examples=[0])
    node_id: str = Field(..., examples=['MDEwOlJlcG9zaXRvcnkxMjk2MjY5'])
    notifications_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}'
        ],
    )
    open_issues: int
    open_issues_count: int = Field(..., examples=[0])
    organization: Optional[NullableSimpleUser] = None
    owner: SimpleUser
    parent: Optional[Repository] = None
    permissions: Optional[Permissions1] = None
    private: bool
    pulls_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/pulls{/number}']
    )
    pushed_at: datetime = Field(..., examples=['2011-01-26T19:06:43Z'])
    releases_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/releases{/id}']
    )
    size: int = Field(..., examples=[108])
    source: Optional[Repository] = None
    ssh_url: str = Field(..., examples=['git@github.com:octocat/Hello-World.git'])
    stargazers_count: int = Field(..., examples=[80])
    stargazers_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/stargazers']
    )
    statuses_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/statuses/{sha}']
    )
    subscribers_count: int = Field(..., examples=[42])
    subscribers_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/subscribers']
    )
    subscription_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/subscription']
    )
    svn_url: AnyUrl = Field(
        ..., examples=['https://svn.github.com/octocat/Hello-World']
    )
    tags_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/tags']
    )
    teams_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/teams']
    )
    template_repository: Optional[NullableRepository] = None
    topics: Optional[List[str]] = Field(
        None, examples=[['octocat', 'atom', 'electron', 'API']]
    )
    trees_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}'],
    )
    updated_at: datetime = Field(..., examples=['2011-01-26T19:14:43Z'])
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World']
    )
    visibility: Optional[str] = Field(
        None,
        description='The repository visibility: public, private, or internal.',
        examples=['public'],
    )
    watchers: int
    watchers_count: int = Field(..., examples=[80])


class InstallationToken(BaseModel):
    expires_at: str
    has_multiple_single_files: Optional[bool] = Field(None, examples=[True])
    permissions: Optional[AppPermissions] = None
    repositories: Optional[List[Repository]] = None
    repository_selection: Optional[RepositorySelection] = None
    single_file: Optional[str] = Field(None, examples=['README.md'])
    single_file_paths: Optional[List[str]] = Field(
        None, examples=[['config.yml', '.github/issue_TEMPLATE.md']]
    )
    token: str


class Issue(BaseModel):
    active_lock_reason: Optional[str] = None
    assignee: NullableSimpleUser
    assignees: Optional[List[SimpleUser]] = None
    author_association: AuthorAssociation
    body: Optional[str] = Field(
        None,
        description='Contents of the issue',
        examples=[
            'It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?'
        ],
    )
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    closed_at: datetime
    closed_by: Optional[NullableSimpleUser] = None
    comments: int
    comments_url: AnyUrl
    created_at: datetime
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: List[Union[str, Labels]] = Field(
        ...,
        description='Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository',
        examples=[['bug', 'registration']],
    )
    labels_url: str
    locked: bool
    milestone: NullableMilestone
    node_id: str
    number: int = Field(
        ...,
        description='Number uniquely identifying the issue within its repository',
        examples=[42],
    )
    performed_via_github_app: Optional[NullableIntegration] = None
    pull_request: Optional[PullRequest] = None
    reactions: Optional[ReactionRollup] = None
    repository: Optional[Repository] = None
    repository_url: AnyUrl
    state: str = Field(
        ...,
        description="State of the issue; either 'open' or 'closed'",
        examples=['open'],
    )
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(
        ...,
        description='Title of the issue',
        examples=['Widget creation fails in Safari on OS X 10.8'],
    )
    updated_at: datetime
    url: AnyUrl = Field(
        ...,
        description='URL for the issue',
        examples=['https://api.github.com/repositories/42/issues/1'],
    )
    user: NullableSimpleUser


class IssueComment(BaseModel):
    author_association: AuthorAssociation
    body: Optional[str] = Field(
        None,
        description='Contents of the issue comment',
        examples=['What version of Safari were you using when you observed this bug?'],
    )
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    created_at: datetime = Field(..., examples=['2011-04-14T16:00:49Z'])
    html_url: AnyUrl
    id: int = Field(
        ..., description='Unique identifier of the issue comment', examples=[42]
    )
    issue_url: AnyUrl
    node_id: str
    performed_via_github_app: Optional[NullableIntegration] = None
    reactions: Optional[ReactionRollup] = None
    updated_at: datetime = Field(..., examples=['2011-04-14T16:00:49Z'])
    url: AnyUrl = Field(
        ...,
        description='URL for the issue comment',
        examples=['https://api.github.com/repositories/42/issues/comments/1'],
    )
    user: NullableSimpleUser


class IssueSearchResultItem(BaseModel):
    active_lock_reason: Optional[str] = None
    assignee: NullableSimpleUser
    assignees: Optional[List[SimpleUser]] = None
    author_association: AuthorAssociation
    body: Optional[str] = None
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    closed_at: datetime
    comments: int
    comments_url: AnyUrl
    created_at: datetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: List[Label]
    labels_url: str
    locked: bool
    milestone: NullableMilestone
    node_id: str
    number: int
    performed_via_github_app: Optional[NullableIntegration] = None
    pull_request: Optional[PullRequest] = None
    repository: Optional[Repository] = None
    repository_url: AnyUrl
    score: float
    state: str
    text_matches: Optional[SearchResultTextMatches] = None
    timeline_url: Optional[AnyUrl] = None
    title: str
    updated_at: datetime
    url: AnyUrl
    user: NullableSimpleUser


class IssueSimple(BaseModel):
    active_lock_reason: Optional[str] = Field(None, examples=['too heated'])
    assignee: NullableSimpleUser
    assignees: Optional[List[SimpleUser]] = None
    author_association: AuthorAssociation
    body: Optional[str] = Field(None, examples=["I'm having a problem with this."])
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    closed_at: datetime
    comments: int = Field(..., examples=[0])
    comments_url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/issues/1347/comments'
        ],
    )
    created_at: datetime = Field(..., examples=['2011-04-22T13:33:48Z'])
    events_url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/issues/1347/events'
        ],
    )
    html_url: AnyUrl = Field(
        ..., examples=['https://github.com/octocat/Hello-World/issues/1347']
    )
    id: int = Field(..., examples=[1])
    labels: List[LabelModel]
    labels_url: str = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}'
        ],
    )
    locked: bool = Field(..., examples=[True])
    milestone: NullableMilestone
    node_id: str = Field(..., examples=['MDU6SXNzdWUx'])
    number: int = Field(..., examples=[1347])
    performed_via_github_app: Optional[NullableIntegration] = None
    pull_request: Optional[PullRequest] = None
    repository: Optional[Repository] = None
    repository_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World']
    )
    state: str = Field(..., examples=['open'])
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., examples=['Found a bug'])
    updated_at: datetime = Field(..., examples=['2011-04-22T13:33:48Z'])
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World/issues/1347']
    )
    user: NullableSimpleUser


class LabeledIssueEvent(BaseModel):
    actor: SimpleUser
    commit_id: str
    commit_url: str
    created_at: str
    event: str
    id: int
    label: Label1
    node_id: str
    performed_via_github_app: NullableIntegration
    url: str


class LockedIssueEvent(BaseModel):
    actor: SimpleUser
    commit_id: str
    commit_url: str
    created_at: str
    event: str
    id: int
    lock_reason: str = Field(..., examples=['"off-topic"'])
    node_id: str
    performed_via_github_app: NullableIntegration
    url: str


class MilestonedIssueEvent(BaseModel):
    actor: SimpleUser
    commit_id: str
    commit_url: str
    created_at: str
    event: str
    id: int
    milestone: Milestone
    node_id: str
    performed_via_github_app: NullableIntegration
    url: str


class MinimalRepository(BaseModel):
    allow_forking: Optional[bool] = None
    anonymous_access_enabled: Optional[bool] = None
    archive_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}'
        ],
    )
    archived: Optional[bool] = None
    assignees_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/assignees{/user}'],
    )
    blobs_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}'],
    )
    branches_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/branches{/branch}'],
    )
    clone_url: Optional[str] = None
    code_of_conduct: Optional[CodeOfConduct] = None
    collaborators_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}'
        ],
    )
    comments_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/comments{/number}'],
    )
    commits_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/commits{/sha}']
    )
    compare_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}'
        ],
    )
    contents_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/contents/{+path}'],
    )
    contributors_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/contributors']
    )
    created_at: Optional[datetime] = Field(None, examples=['2011-01-26T19:01:12Z'])
    default_branch: Optional[str] = None
    delete_branch_on_merge: Optional[bool] = None
    deployments_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/deployments']
    )
    description: str = Field(..., examples=['This your first repo!'])
    disabled: Optional[bool] = None
    downloads_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/downloads']
    )
    events_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/events']
    )
    fork: bool
    forks: Optional[int] = Field(None, examples=[0])
    forks_count: Optional[int] = None
    forks_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/forks']
    )
    full_name: str = Field(..., examples=['octocat/Hello-World'])
    git_commits_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}'],
    )
    git_refs_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}']
    )
    git_tags_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}']
    )
    git_url: Optional[str] = None
    has_downloads: Optional[bool] = None
    has_issues: Optional[bool] = None
    has_pages: Optional[bool] = None
    has_projects: Optional[bool] = None
    has_wiki: Optional[bool] = None
    homepage: Optional[str] = None
    hooks_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/hooks']
    )
    html_url: AnyUrl = Field(..., examples=['https://github.com/octocat/Hello-World'])
    id: int = Field(..., examples=[1296269])
    is_template: Optional[bool] = None
    issue_comment_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}'
        ],
    )
    issue_events_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/issues/events{/number}'
        ],
    )
    issues_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/issues{/number}'],
    )
    keys_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/keys{/key_id}']
    )
    labels_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/labels{/name}']
    )
    language: Optional[str] = None
    languages_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/languages']
    )
    license: Optional[License2] = None
    merges_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/merges']
    )
    milestones_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/milestones{/number}'
        ],
    )
    mirror_url: Optional[str] = None
    name: str = Field(..., examples=['Hello-World'])
    network_count: Optional[int] = None
    node_id: str = Field(..., examples=['MDEwOlJlcG9zaXRvcnkxMjk2MjY5'])
    notifications_url: str = Field(
        ...,
        examples=[
            'http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}'
        ],
    )
    open_issues: Optional[int] = Field(None, examples=[0])
    open_issues_count: Optional[int] = None
    owner: SimpleUser
    permissions: Optional[Permissions5] = None
    private: bool
    pulls_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/pulls{/number}']
    )
    pushed_at: Optional[datetime] = Field(None, examples=['2011-01-26T19:06:43Z'])
    releases_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/releases{/id}']
    )
    size: Optional[int] = None
    ssh_url: Optional[str] = None
    stargazers_count: Optional[int] = None
    stargazers_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/stargazers']
    )
    statuses_url: str = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/statuses/{sha}']
    )
    subscribers_count: Optional[int] = None
    subscribers_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/subscribers']
    )
    subscription_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/subscription']
    )
    svn_url: Optional[str] = None
    tags_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/tags']
    )
    teams_url: AnyUrl = Field(
        ..., examples=['http://api.github.com/repos/octocat/Hello-World/teams']
    )
    template_repository: Optional[NullableRepository] = None
    topics: Optional[List[str]] = None
    trees_url: str = Field(
        ...,
        examples=['http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}'],
    )
    updated_at: Optional[datetime] = Field(None, examples=['2011-01-26T19:14:43Z'])
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World']
    )
    visibility: Optional[str] = None
    watchers: Optional[int] = Field(None, examples=[0])
    watchers_count: Optional[int] = None


class MovedColumnInProjectIssueEvent(BaseModel):
    actor: SimpleUser
    commit_id: str
    commit_url: str
    created_at: str
    event: str
    id: int
    node_id: str
    performed_via_github_app: NullableIntegration
    project_card: Optional[ProjectCard] = None
    url: str


class NullableAuthorization(BaseModel):
    app: App3
    created_at: datetime
    fingerprint: str
    hashed_token: str
    id: int
    installation: Optional[NullableScopedInstallation] = None
    note: str
    note_url: AnyUrl
    scopes: List[str] = Field(
        ..., description='A list of scopes that this authorization is in.'
    )
    token: str
    token_last_eight: str
    updated_at: datetime
    url: AnyUrl
    user: Optional[NullableSimpleUser] = None


class Base2(BaseModel):
    label: str
    ref: str
    repo: Repository
    sha: str
    user: NullableSimpleUser


class Head2(BaseModel):
    label: str
    ref: str
    repo: Repository
    sha: str
    user: NullableSimpleUser


class PullRequestSimple(BaseModel):
    field_links: FieldLinks13 = Field(..., alias='_links')
    active_lock_reason: Optional[str] = Field(None, examples=['too heated'])
    assignee: NullableSimpleUser
    assignees: Optional[List[SimpleUser]] = None
    author_association: AuthorAssociation
    base: Base2
    body: str = Field(..., examples=['Please pull these awesome changes'])
    closed_at: datetime = Field(..., examples=['2011-01-26T19:01:12Z'])
    comments_url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/issues/1347/comments'
        ],
    )
    commits_url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits'
        ],
    )
    created_at: datetime = Field(..., examples=['2011-01-26T19:01:12Z'])
    diff_url: AnyUrl = Field(
        ..., examples=['https://github.com/octocat/Hello-World/pull/1347.diff']
    )
    draft: Optional[bool] = Field(
        None,
        description='Indicates whether or not the pull request is a draft.',
        examples=[False],
    )
    head: Head2
    html_url: AnyUrl = Field(
        ..., examples=['https://github.com/octocat/Hello-World/pull/1347']
    )
    id: int = Field(..., examples=[1])
    issue_url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World/issues/1347']
    )
    labels: List[Label2]
    locked: bool = Field(..., examples=[True])
    merge_commit_sha: str = Field(
        ..., examples=['e5bd3914e2e596debea16f433f57875b5b90bcd6']
    )
    merged_at: datetime = Field(..., examples=['2011-01-26T19:01:12Z'])
    milestone: NullableMilestone
    node_id: str = Field(..., examples=['MDExOlB1bGxSZXF1ZXN0MQ=='])
    number: int = Field(..., examples=[1347])
    patch_url: AnyUrl = Field(
        ..., examples=['https://github.com/octocat/Hello-World/pull/1347.patch']
    )
    requested_reviewers: Optional[List[SimpleUser]] = None
    requested_teams: Optional[List[TeamModel]] = None
    review_comment_url: str = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}'
        ],
    )
    review_comments_url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments'
        ],
    )
    state: str = Field(..., examples=['open'])
    statuses_url: AnyUrl = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e'
        ],
    )
    title: str = Field(..., examples=['new-feature'])
    updated_at: datetime = Field(..., examples=['2011-01-26T19:01:12Z'])
    url: AnyUrl = Field(
        ..., examples=['https://api.github.com/repos/octocat/Hello-World/pulls/1347']
    )
    user: NullableSimpleUser


class RepositoryInvitation(BaseModel):
    created_at: datetime = Field(..., examples=['2016-06-13T14:52:50-05:00'])
    expired: Optional[bool] = Field(
        None, description='Whether or not the invitation has expired'
    )
    html_url: str = Field(
        ..., examples=['https://github.com/octocat/Hello-World/invitations']
    )
    id: int = Field(
        ...,
        description='Unique identifier of the repository invitation.',
        examples=[42],
    )
    invitee: NullableSimpleUser
    inviter: NullableSimpleUser
    node_id: str
    permissions: Permissions15 = Field(
        ...,
        description='The permission associated with the invitation.',
        examples=['read'],
    )
    repository: MinimalRepository
    url: str = Field(
        ...,
        description='URL for the repository invitation',
        examples=['https://api.github.com/user/repository-invitations/1'],
    )


class ShortBranch(BaseModel):
    commit: Commit4
    name: str
    protected: bool
    protection: Optional[BranchProtection] = None
    protection_url: Optional[AnyUrl] = None


class Thread(BaseModel):
    id: str
    last_read_at: str
    reason: str
    repository: MinimalRepository
    subject: Subject
    subscription_url: str = Field(
        ..., examples=['https://api.github.com/notifications/threads/2/subscription']
    )
    unread: bool
    updated_at: str
    url: str


class Source(BaseModel):
    issue: Optional[IssueSimple] = None
    type: Optional[str] = None


class TimelineCrossReferencedEvent(BaseModel):
    actor: Optional[SimpleUser] = None
    created_at: datetime
    event: str
    source: Source
    updated_at: datetime


class TimelineIssueEvents(
    RootModel[
        Union[
            LabeledIssueEvent,
            UnlabeledIssueEvent,
            MilestonedIssueEvent,
            DemilestonedIssueEvent,
            RenamedIssueEvent,
            ReviewRequestedIssueEvent,
            ReviewRequestRemovedIssueEvent,
            ReviewDismissedIssueEvent,
            LockedIssueEvent,
            AddedToProjectIssueEvent,
            MovedColumnInProjectIssueEvent,
            RemovedFromProjectIssueEvent,
            ConvertedNoteToIssueIssueEvent,
            TimelineCommentEvent,
            TimelineCrossReferencedEvent,
            TimelineCommittedEvent,
            TimelineReviewedEvent,
            TimelineLineCommentedEvent,
            TimelineCommitCommentedEvent,
            TimelineAssignedIssueEvent,
            TimelineUnassignedIssueEvent,
        ]
    ]
):
    root: Union[
        LabeledIssueEvent,
        UnlabeledIssueEvent,
        MilestonedIssueEvent,
        DemilestonedIssueEvent,
        RenamedIssueEvent,
        ReviewRequestedIssueEvent,
        ReviewRequestRemovedIssueEvent,
        ReviewDismissedIssueEvent,
        LockedIssueEvent,
        AddedToProjectIssueEvent,
        MovedColumnInProjectIssueEvent,
        RemovedFromProjectIssueEvent,
        ConvertedNoteToIssueIssueEvent,
        TimelineCommentEvent,
        TimelineCrossReferencedEvent,
        TimelineCommittedEvent,
        TimelineReviewedEvent,
        TimelineLineCommentedEvent,
        TimelineCommitCommentedEvent,
        TimelineAssignedIssueEvent,
        TimelineUnassignedIssueEvent,
    ] = Field(..., description='Timeline Event', title='Timeline Event')


class AdminTokensGetResponse(RootModel[List[Authorization]]):
    root: List[Authorization]


class AuthorizationsGetResponse(RootModel[List[Authorization]]):
    root: List[Authorization]


class IssuesGetResponse(RootModel[List[Issue]]):
    root: List[Issue]


class NotificationsGetResponse(RootModel[List[Thread]]):
    root: List[Thread]


class OrgsOrgIssuesGetResponse(RootModel[List[Issue]]):
    root: List[Issue]


class OrgsOrgReposGetResponse(RootModel[List[MinimalRepository]]):
    root: List[MinimalRepository]


class OrgsOrgTeamsTeamSlugReposGetResponse(RootModel[List[MinimalRepository]]):
    root: List[MinimalRepository]


class ReposOwnerRepoBranchesGetResponse(RootModel[List[ShortBranch]]):
    root: List[ShortBranch]


class ReposOwnerRepoCommitsCommitShaPullsGetResponse(
    RootModel[List[PullRequestSimple]]
):
    root: List[PullRequestSimple]


class ReposOwnerRepoDeploymentsGetResponse(RootModel[List[Deployment]]):
    root: List[Deployment]


class ReposOwnerRepoDeploymentsDeploymentIdStatusesGetResponse(
    RootModel[List[DeploymentStatus]]
):
    root: List[DeploymentStatus]


class ReposOwnerRepoForksGetResponse(RootModel[List[MinimalRepository]]):
    root: List[MinimalRepository]


class ReposOwnerRepoInvitationsGetResponse(RootModel[List[RepositoryInvitation]]):
    root: List[RepositoryInvitation]


class ReposOwnerRepoIssuesGetResponse(RootModel[List[IssueSimple]]):
    root: List[IssueSimple]


class ReposOwnerRepoIssuesCommentsGetResponse(RootModel[List[IssueComment]]):
    root: List[IssueComment]


class ReposOwnerRepoIssuesIssueNumberCommentsGetResponse(RootModel[List[IssueComment]]):
    root: List[IssueComment]


class ReposOwnerRepoIssuesIssueNumberTimelineGetResponse(
    RootModel[List[TimelineIssueEvents]]
):
    root: List[TimelineIssueEvents]


class ReposOwnerRepoNotificationsGetResponse(RootModel[List[Thread]]):
    root: List[Thread]


class ReposOwnerRepoPullsGetResponse(RootModel[List[PullRequestSimple]]):
    root: List[PullRequestSimple]


class RepositoriesGetResponse(RootModel[List[MinimalRepository]]):
    root: List[MinimalRepository]


class SearchIssuesGetResponse(BaseModel):
    incomplete_results: bool
    items: List[IssueSearchResultItem]
    total_count: int


class TeamsTeamIdReposGetResponse(RootModel[List[MinimalRepository]]):
    root: List[MinimalRepository]


class UserIssuesGetResponse(RootModel[List[Issue]]):
    root: List[Issue]


class UserRepositoryInvitationsGetResponse(RootModel[List[RepositoryInvitation]]):
    root: List[RepositoryInvitation]


class UserSubscriptionsGetResponse(RootModel[List[MinimalRepository]]):
    root: List[MinimalRepository]


class UsersUsernameReposGetResponse(RootModel[List[MinimalRepository]]):
    root: List[MinimalRepository]


class UsersUsernameSubscriptionsGetResponse(RootModel[List[MinimalRepository]]):
    root: List[MinimalRepository]


class CheckRun(BaseModel):
    app: NullableIntegration
    check_suite: CheckSuite
    completed_at: datetime = Field(..., examples=['2018-05-04T01:14:52Z'])
    conclusion: Conclusion = Field(..., examples=['neutral'])
    deployment: Optional[DeploymentSimple] = None
    details_url: str = Field(..., examples=['https://example.com'])
    external_id: str = Field(..., examples=['42'])
    head_sha: str = Field(
        ...,
        description='The SHA of the commit that is being checked.',
        examples=['009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d'],
    )
    html_url: str = Field(
        ..., examples=['https://github.com/github/hello-world/runs/4']
    )
    id: int = Field(..., description='The id of the check.', examples=[21])
    name: str = Field(
        ..., description='The name of the check.', examples=['test-coverage']
    )
    node_id: str = Field(..., examples=['MDg6Q2hlY2tSdW40'])
    output: Output
    pull_requests: List[PullRequestMinimal]
    started_at: datetime = Field(..., examples=['2018-05-04T01:14:52Z'])
    status: Status = Field(
        ...,
        description='The phase of the lifecycle that the check is currently in.',
        examples=['queued'],
    )
    url: str = Field(
        ..., examples=['https://api.github.com/repos/github/hello-world/check-runs/4']
    )


class CheckSuite1(BaseModel):
    after: str = Field(..., examples=['d6fde92930d4715a2b49857d24b940956b26d2d3'])
    app: NullableIntegration
    before: str = Field(..., examples=['146e867f55c26428e5f9fade55a9bbf5e95a7912'])
    check_runs_url: str
    conclusion: Conclusion = Field(..., examples=['neutral'])
    created_at: datetime
    head_branch: str = Field(..., examples=['master'])
    head_commit: SimpleCommit
    head_sha: str = Field(
        ...,
        description='The SHA of the head commit that is being checked.',
        examples=['009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d'],
    )
    id: int = Field(..., examples=[5])
    latest_check_runs_count: int
    node_id: str = Field(..., examples=['MDEwOkNoZWNrU3VpdGU1'])
    pull_requests: List[PullRequestMinimal]
    repository: MinimalRepository
    status: Status = Field(..., examples=['completed'])
    updated_at: datetime
    url: str = Field(
        ..., examples=['https://api.github.com/repos/github/hello-world/check-suites/5']
    )


class CheckSuitePreference(BaseModel):
    preferences: Preferences
    repository: MinimalRepository


class CodeSearchResultItem(BaseModel):
    file_size: Optional[int] = None
    git_url: AnyUrl
    html_url: AnyUrl
    language: Optional[str] = None
    last_modified_at: Optional[datetime] = None
    line_numbers: Optional[List[str]] = Field(None, examples=[['73..77', '77..78']])
    name: str
    path: str
    repository: MinimalRepository
    score: float
    sha: str
    text_matches: Optional[SearchResultTextMatches] = None
    url: AnyUrl


class CombinedCommitStatus(BaseModel):
    commit_url: AnyUrl
    repository: MinimalRepository
    sha: str
    state: str
    statuses: List[SimpleCommitStatus]
    total_count: int
    url: AnyUrl


class CommitSearchResultItem(BaseModel):
    author: NullableSimpleUser
    comments_url: AnyUrl
    commit: Commit2
    committer: NullableGitUser
    html_url: AnyUrl
    node_id: str
    parents: List[Parent1]
    repository: MinimalRepository
    score: float
    sha: str
    text_matches: Optional[SearchResultTextMatches] = None
    url: AnyUrl


class Payload(BaseModel):
    action: Optional[str] = None
    comment: Optional[IssueComment] = None
    issue: Optional[IssueSimple] = None
    pages: Optional[List[Page]] = None


class Event(BaseModel):
    actor: Actor
    created_at: datetime
    id: str
    org: Optional[Actor] = None
    payload: Payload
    public: bool
    repo: Repo
    type: str


class IssueEvent(BaseModel):
    actor: NullableSimpleUser
    assignee: Optional[NullableSimpleUser] = None
    assigner: Optional[NullableSimpleUser] = None
    author_association: Optional[AuthorAssociation] = None
    commit_id: str = Field(..., examples=['6dcb09b5b57875f334f61aebed695e2e4193db5e'])
    commit_url: str = Field(
        ...,
        examples=[
            'https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e'
        ],
    )
    created_at: datetime = Field(..., examples=['2011-04-14T16:00:49Z'])
    dismissed_review: Optional[IssueEventDismissedReview] = None
    event: str = Field(..., examples=['closed'])
    id: int = Field(..., examples=[1])
    issue: Optional[IssueSimple] = None
    label: Optional[IssueEventLabel] = None
    lock_reason: Optional[str] = None
    milestone: Optional[IssueEventMilestone] = None
    node_id: str = Field(..., examples=['MDEwOklzc3VlRXZlbnQx'])
    performed_via_github_app: Optional[NullableIntegration] = None
    project_card: Optional[IssueEventProjectCard] = None
    rename: Optional[IssueEventRename] = None
    requested_reviewer: Optional[NullableSimpleUser] = None
    requested_team: Optional[TeamModel] = None
    review_requester: Optional[NullableSimpleUser] = None
    url: AnyUrl = Field(
        ...,
        examples=['https://api.github.com/repos/octocat/Hello-World/issues/events/1'],
    )


class IssueEventForIssue(
    RootModel[
        Union[
            LabeledIssueEvent,
            UnlabeledIssueEvent,
            AssignedIssueEvent,
            UnassignedIssueEvent,
            MilestonedIssueEvent,
            DemilestonedIssueEvent,
            RenamedIssueEvent,
            ReviewRequestedIssueEvent,
            ReviewRequestRemovedIssueEvent,
            ReviewDismissedIssueEvent,
            LockedIssueEvent,
            AddedToProjectIssueEvent,
            MovedColumnInProjectIssueEvent,
            RemovedFromProjectIssueEvent,
            ConvertedNoteToIssueIssueEvent,
        ]
    ]
):
    root: Union[
        LabeledIssueEvent,
        UnlabeledIssueEvent,
        AssignedIssueEvent,
        UnassignedIssueEvent,
        MilestonedIssueEvent,
        DemilestonedIssueEvent,
        RenamedIssueEvent,
        ReviewRequestedIssueEvent,
        ReviewRequestRemovedIssueEvent,
        ReviewDismissedIssueEvent,
        LockedIssueEvent,
        AddedToProjectIssueEvent,
        MovedColumnInProjectIssueEvent,
        RemovedFromProjectIssueEvent,
        ConvertedNoteToIssueIssueEvent,
    ] = Field(..., description='Issue Event for Issue', title='Issue Event for Issue')


class EventsGetResponse(RootModel[List[Event]]):
    root: List[Event]


class NetworksOwnerRepoEventsGetResponse(RootModel[List[Event]]):
    root: List[Event]


class OrgsOrgEventsGetResponse(RootModel[List[Event]]):
    root: List[Event]


class ReposOwnerRepoCheckSuitesCheckSuiteIdCheckRunsGetResponse(BaseModel):
    check_runs: List[CheckRun]
    total_count: int


class ReposOwnerRepoCommitsRefCheckRunsGetResponse(BaseModel):
    check_runs: List[CheckRun]
    total_count: int


class ReposOwnerRepoCommitsRefCheckSuitesGetResponse(BaseModel):
    check_suites: List[CheckSuite1]
    total_count: int


class ReposOwnerRepoEventsGetResponse(RootModel[List[Event]]):
    root: List[Event]


class ReposOwnerRepoIssuesEventsGetResponse(RootModel[List[IssueEvent]]):
    root: List[IssueEvent]


class ReposOwnerRepoIssuesIssueNumberEventsGetResponse(
    RootModel[List[IssueEventForIssue]]
):
    root: List[IssueEventForIssue]


class SearchCodeGetResponse(BaseModel):
    incomplete_results: bool
    items: List[CodeSearchResultItem]
    total_count: int


class SearchCommitsGetResponse(BaseModel):
    incomplete_results: bool
    items: List[CommitSearchResultItem]
    total_count: int


class UsersUsernameEventsGetResponse(RootModel[List[Event]]):
    root: List[Event]


class UsersUsernameEventsOrgsOrgGetResponse(RootModel[List[Event]]):
    root: List[Event]


class UsersUsernameEventsPublicGetResponse(RootModel[List[Event]]):
    root: List[Event]


class UsersUsernameReceivedEventsGetResponse(RootModel[List[Event]]):
    root: List[Event]


class UsersUsernameReceivedEventsPublicGetResponse(RootModel[List[Event]]):
    root: List[Event]
