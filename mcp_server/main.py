# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T21:52:44+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from starlette.requests import Request

from models import (
    AdminHooksGetResponse,
    AdminHooksHookIdPatchRequest,
    AdminHooksPostRequest,
    AdminKeysGetResponse,
    AdminLdapTeamsTeamIdMappingPatchRequest,
    AdminLdapTeamsTeamIdSyncPostResponse,
    AdminLdapUsersUsernameMappingPatchRequest,
    AdminLdapUsersUsernameSyncPostResponse,
    AdminOrganizationsOrgPatchRequest,
    AdminOrganizationsOrgPatchResponse,
    AdminOrganizationsPostRequest,
    AdminPreReceiveEnvironmentsGetResponse,
    AdminPreReceiveEnvironmentsPostRequest,
    AdminPreReceiveEnvironmentsPreReceiveEnvironmentIdDeleteResponse,
    AdminPreReceiveEnvironmentsPreReceiveEnvironmentIdDownloadsPostResponse,
    AdminPreReceiveEnvironmentsPreReceiveEnvironmentIdPatchRequest,
    AdminPreReceiveEnvironmentsPreReceiveEnvironmentIdPatchResponse,
    AdminPreReceiveHooksGetResponse,
    AdminPreReceiveHooksPostRequest,
    AdminPreReceiveHooksPreReceiveHookIdPatchRequest,
    AdminTokensGetResponse,
    AdminUsersPostRequest,
    AdminUsersUsernameAuthorizationsPostRequest,
    AdminUsersUsernamePatchRequest,
    AdminUsersUsernamePatchResponse,
    Affiliation,
    ApiOverview,
    AppInstallationsGetResponse,
    AppInstallationsInstallationIdAccessTokensPostRequest,
    AppInstallationsInstallationIdAccessTokensPostResponse,
    AppInstallationsInstallationIdGetResponse,
    ApplicationGrant,
    ApplicationsClientIdGrantDeleteRequest,
    ApplicationsClientIdTokenDeleteRequest,
    ApplicationsClientIdTokenPatchRequest,
    ApplicationsClientIdTokenPostRequest,
    ApplicationsGrantsGetResponse,
    AppManifestsCodeConversionsPostRequest,
    AppManifestsCodeConversionsPostResponse,
    AppsAppSlugGetResponse,
    ArchivedState,
    Authorization,
    AuthorizationsAuthorizationIdPatchRequest,
    AuthorizationsClientsClientIdFingerprintPutRequest,
    AuthorizationsClientsClientIdPutRequest,
    AuthorizationsGetResponse,
    AuthorizationsPostRequest,
    BaseGist,
    BasicError,
    Blob,
    BranchProtection,
    BranchRestrictionPolicy,
    BranchWithProtection,
    CheckRun,
    CheckSuite1,
    CheckSuitePreference,
    CodeOfConduct,
    CodesOfConductGetResponse,
    CombinedCommitStatus,
    CommitComment,
    CommitComparison,
    CommitModel,
    ConfigurationStatus,
    Content1,
    ContentFile,
    ContentReferenceAttachment,
    DeployKey,
    Deployment,
    DeploymentStatus,
    Direction,
    EmojisGetResponse,
    EnterpriseCommentOverview,
    EnterpriseGistOverview,
    EnterpriseHookOverview,
    EnterpriseIssueOverview,
    EnterpriseMilestoneOverview,
    EnterpriseOrganizationOverview,
    EnterpriseOverview,
    EnterprisePageOverview,
    EnterprisePullRequestOverview,
    EnterpriseRepositoryOverview,
    EnterpriseSettings,
    EnterpriseUserOverview,
    EventsGetResponse,
    EventsGetResponse1,
    Feed,
    FieldDatamodelCodeGeneratorRootSpecialGetResponse,
    FileCommit,
    Filter,
    Filter4,
    Filter8,
    Filter12,
    FullRepository,
    GistComment,
    GistsGetResponse,
    GistsGistIdCommentsCommentIdGetResponse,
    GistsGistIdCommentsCommentIdPatchRequest,
    GistsGistIdCommentsGetResponse,
    GistsGistIdCommentsPostRequest,
    GistsGistIdCommitsGetResponse,
    GistsGistIdForksGetResponse,
    GistsGistIdGetResponse,
    GistsGistIdPatchRequest,
    GistsGistIdStarGetResponse,
    GistSimple,
    GistsPostRequest,
    GistsPublicGetResponse,
    GistsStarredGetResponse,
    GitCommit,
    GitignoreTemplate,
    GitignoreTemplatesGetResponse,
    GitRef,
    GitTag,
    GitTree,
    GlobalHook,
    GlobalHook2,
    GpgKey,
    Hook,
    Hovercard,
    InstallationGhes2,
    InstallationRepositoriesGetResponse,
    InstallationToken,
    Integration,
    Issue,
    IssueComment,
    IssueEvent,
    IssuesGetResponse,
    IssueSimple,
    Key,
    LabelModel,
    Language,
    LdapMappingTeam,
    LdapMappingUser,
    License1,
    LicenseContent,
    LicenseInfo,
    LicensesGetResponse,
    MaintenanceStatus,
    MarkdownPostRequest,
    Milestone1,
    MinimalRepository,
    NetworksOwnerRepoEventsGetResponse,
    NotificationsGetResponse,
    NotificationsPutRequest,
    NotificationsPutResponse,
    NotificationsThreadsThreadIdSubscriptionPutRequest,
    NullableAuthorization,
    Order,
    OrganizationFull,
    OrganizationsGetResponse,
    OrganizationSimple,
    OrgHook,
    OrgMembership,
    OrgPreReceiveHook,
    OrgsOrgEventsGetResponse,
    OrgsOrgHooksGetResponse,
    OrgsOrgHooksHookIdPatchRequest,
    OrgsOrgHooksPostRequest,
    OrgsOrgInstallationsGetResponse,
    OrgsOrgIssuesGetResponse,
    OrgsOrgMembersGetResponse,
    OrgsOrgMembershipsUsernamePutRequest,
    OrgsOrgOutsideCollaboratorsGetResponse,
    OrgsOrgOutsideCollaboratorsUsernameDeleteResponse,
    OrgsOrgOutsideCollaboratorsUsernamePutResponse,
    OrgsOrgPatchRequest,
    OrgsOrgPatchResponse,
    OrgsOrgPatchResponse1,
    OrgsOrgPreReceiveHooksGetResponse,
    OrgsOrgPreReceiveHooksPreReceiveHookIdPatchRequest,
    OrgsOrgProjectsGetResponse,
    OrgsOrgProjectsPostRequest,
    OrgsOrgPublicMembersGetResponse,
    OrgsOrgReposGetResponse,
    OrgsOrgReposPostRequest,
    OrgsOrgTeamsGetResponse,
    OrgsOrgTeamsPostRequest,
    OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberPatchRequest,
    OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberReactionsGetResponse,
    OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostRequest,
    OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsGetResponse,
    OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsPostRequest,
    OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberPatchRequest,
    OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberReactionsGetResponse,
    OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberReactionsPostRequest,
    OrgsOrgTeamsTeamSlugDiscussionsGetResponse,
    OrgsOrgTeamsTeamSlugDiscussionsPostRequest,
    OrgsOrgTeamsTeamSlugMembersGetResponse,
    OrgsOrgTeamsTeamSlugMembershipsUsernamePutRequest,
    OrgsOrgTeamsTeamSlugPatchRequest,
    OrgsOrgTeamsTeamSlugProjectsGetResponse,
    OrgsOrgTeamsTeamSlugProjectsProjectIdPutRequest,
    OrgsOrgTeamsTeamSlugProjectsProjectIdPutResponse,
    OrgsOrgTeamsTeamSlugReposGetResponse,
    OrgsOrgTeamsTeamSlugReposOwnerRepoPutRequest,
    OrgsOrgTeamsTeamSlugTeamsGetResponse,
    Page1,
    PageBuild,
    PageBuildStatus,
    ParticipationStats,
    PreReceiveEnvironment,
    PreReceiveEnvironmentDownloadStatus,
    PreReceiveHook,
    PrivateUser,
    Project,
    ProjectCard3,
    ProjectColumn,
    ProjectsColumnsCardsCardIdDeleteResponse,
    ProjectsColumnsCardsCardIdMovesPostRequest,
    ProjectsColumnsCardsCardIdMovesPostResponse,
    ProjectsColumnsCardsCardIdMovesPostResponse1,
    ProjectsColumnsCardsCardIdMovesPostResponse2,
    ProjectsColumnsCardsCardIdPatchRequest,
    ProjectsColumnsColumnIdCardsGetResponse,
    ProjectsColumnsColumnIdCardsPostRequest,
    ProjectsColumnsColumnIdCardsPostResponse,
    ProjectsColumnsColumnIdCardsPostResponse1,
    ProjectsColumnsColumnIdMovesPostRequest,
    ProjectsColumnsColumnIdMovesPostResponse,
    ProjectsColumnsColumnIdPatchRequest,
    ProjectsProjectIdCollaboratorsGetResponse,
    ProjectsProjectIdCollaboratorsGetResponse1,
    ProjectsProjectIdCollaboratorsUsernameDeleteResponse,
    ProjectsProjectIdCollaboratorsUsernamePermissionGetResponse,
    ProjectsProjectIdCollaboratorsUsernamePutRequest,
    ProjectsProjectIdCollaboratorsUsernamePutResponse,
    ProjectsProjectIdColumnsGetResponse,
    ProjectsProjectIdColumnsPostRequest,
    ProjectsProjectIdDeleteResponse,
    ProjectsProjectIdPatchRequest,
    ProjectsProjectIdPatchResponse,
    ProtectedBranch,
    ProtectedBranchAdminEnforced,
    ProtectedBranchPullRequestReview,
    PullRequest3,
    PullRequestMergeResult,
    PullRequestReview,
    PullRequestReviewComment,
    PullRequestReviewRequest,
    PullRequestSimple,
    RateLimitOverview,
    Reaction,
    ReactionsReactionIdDeleteResponse,
    Release,
    ReleaseAsset,
    RepositoriesGetResponse,
    Repository,
    RepositoryCollaboratorPermission,
    RepositoryInvitation,
    RepositoryPreReceiveHook,
    RepositorySubscription,
    ReposOwnerRepoAssigneesGetResponse,
    ReposOwnerRepoBranchesBranchGetResponse,
    ReposOwnerRepoBranchesBranchProtectionPutRequest,
    ReposOwnerRepoBranchesBranchProtectionPutResponse,
    ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchRequest,
    ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteRequest,
    ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteResponse,
    ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsGetResponse,
    ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostRequest,
    ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostResponse,
    ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutRequest,
    ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutResponse,
    ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchRequest,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteRequest,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteResponse,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsGetResponse,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostRequest,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostResponse,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutRequest,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutResponse,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteRequest,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteResponse,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsGetResponse,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostRequest,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostResponse,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutRequest,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutResponse,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteRequest,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteResponse,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersGetResponse,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostRequest,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostResponse,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutRequest,
    ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutResponse,
    ReposOwnerRepoBranchesGetResponse,
    ReposOwnerRepoCheckRunsCheckRunIdAnnotationsGetResponse,
    ReposOwnerRepoCheckRunsCheckRunIdPatchRequest,
    ReposOwnerRepoCheckRunsPostRequest,
    ReposOwnerRepoCheckSuitesCheckSuiteIdCheckRunsGetResponse,
    ReposOwnerRepoCheckSuitesCheckSuiteIdRerequestPostResponse,
    ReposOwnerRepoCheckSuitesPostRequest,
    ReposOwnerRepoCheckSuitesPreferencesPatchRequest,
    ReposOwnerRepoCollaboratorsGetResponse,
    ReposOwnerRepoCollaboratorsUsernamePutRequest,
    ReposOwnerRepoCommentsCommentIdPatchRequest,
    ReposOwnerRepoCommentsCommentIdReactionsGetResponse,
    ReposOwnerRepoCommentsCommentIdReactionsGetResponse1,
    ReposOwnerRepoCommentsCommentIdReactionsPostRequest,
    ReposOwnerRepoCommentsCommentIdReactionsPostResponse,
    ReposOwnerRepoCommentsGetResponse,
    ReposOwnerRepoCommitsCommitShaBranchesWhereHeadGetResponse,
    ReposOwnerRepoCommitsCommitShaBranchesWhereHeadGetResponse1,
    ReposOwnerRepoCommitsCommitShaCommentsGetResponse,
    ReposOwnerRepoCommitsCommitShaCommentsPostRequest,
    ReposOwnerRepoCommitsCommitShaPullsGetResponse,
    ReposOwnerRepoCommitsCommitShaPullsGetResponse1,
    ReposOwnerRepoCommitsGetResponse,
    ReposOwnerRepoCommitsRefCheckRunsGetResponse,
    ReposOwnerRepoCommitsRefCheckSuitesGetResponse,
    ReposOwnerRepoCommitsRefStatusesGetResponse,
    ReposOwnerRepoContentReferencesContentReferenceIdAttachmentsPostRequest,
    ReposOwnerRepoContentReferencesContentReferenceIdAttachmentsPostResponse,
    ReposOwnerRepoContentsPathDeleteRequest,
    ReposOwnerRepoContentsPathDeleteResponse,
    ReposOwnerRepoContentsPathGetResponse,
    ReposOwnerRepoContentsPathPutRequest,
    ReposOwnerRepoContributorsGetResponse,
    ReposOwnerRepoDeleteResponse,
    ReposOwnerRepoDeploymentsDeploymentIdStatusesGetResponse,
    ReposOwnerRepoDeploymentsDeploymentIdStatusesPostRequest,
    ReposOwnerRepoDeploymentsDeploymentIdStatusesStatusIdGetResponse,
    ReposOwnerRepoDeploymentsGetResponse,
    ReposOwnerRepoDeploymentsPostRequest,
    ReposOwnerRepoDeploymentsPostResponse,
    ReposOwnerRepoDispatchesPostRequest,
    ReposOwnerRepoEventsGetResponse,
    ReposOwnerRepoForksGetResponse,
    ReposOwnerRepoForksPostRequest,
    ReposOwnerRepoGitBlobsPostRequest,
    ReposOwnerRepoGitCommitsPostRequest,
    ReposOwnerRepoGitMatchingRefsRefGetResponse,
    ReposOwnerRepoGitRefsPostRequest,
    ReposOwnerRepoGitRefsRefPatchRequest,
    ReposOwnerRepoGitTagsPostRequest,
    ReposOwnerRepoGitTreesPostRequest,
    ReposOwnerRepoHooksGetResponse,
    ReposOwnerRepoHooksHookIdPatchRequest,
    ReposOwnerRepoHooksPostRequest,
    ReposOwnerRepoInvitationsGetResponse,
    ReposOwnerRepoInvitationsInvitationIdPatchRequest,
    ReposOwnerRepoIssuesCommentsCommentIdPatchRequest,
    ReposOwnerRepoIssuesCommentsCommentIdReactionsGetResponse,
    ReposOwnerRepoIssuesCommentsCommentIdReactionsGetResponse1,
    ReposOwnerRepoIssuesCommentsCommentIdReactionsPostRequest,
    ReposOwnerRepoIssuesCommentsCommentIdReactionsPostResponse,
    ReposOwnerRepoIssuesCommentsGetResponse,
    ReposOwnerRepoIssuesEventsGetResponse,
    ReposOwnerRepoIssuesGetResponse,
    ReposOwnerRepoIssuesIssueNumberAssigneesDeleteRequest,
    ReposOwnerRepoIssuesIssueNumberAssigneesPostRequest,
    ReposOwnerRepoIssuesIssueNumberCommentsGetResponse,
    ReposOwnerRepoIssuesIssueNumberCommentsPostRequest,
    ReposOwnerRepoIssuesIssueNumberEventsGetResponse,
    ReposOwnerRepoIssuesIssueNumberLabelsGetResponse,
    ReposOwnerRepoIssuesIssueNumberLabelsNameDeleteResponse,
    ReposOwnerRepoIssuesIssueNumberLabelsPostRequest,
    ReposOwnerRepoIssuesIssueNumberLabelsPostResponse,
    ReposOwnerRepoIssuesIssueNumberLabelsPutRequest,
    ReposOwnerRepoIssuesIssueNumberLabelsPutResponse,
    ReposOwnerRepoIssuesIssueNumberLockPutRequest,
    ReposOwnerRepoIssuesIssueNumberPatchRequest,
    ReposOwnerRepoIssuesIssueNumberPatchResponse,
    ReposOwnerRepoIssuesIssueNumberReactionsGetResponse,
    ReposOwnerRepoIssuesIssueNumberReactionsGetResponse1,
    ReposOwnerRepoIssuesIssueNumberReactionsPostRequest,
    ReposOwnerRepoIssuesIssueNumberReactionsPostResponse,
    ReposOwnerRepoIssuesIssueNumberTimelineGetResponse,
    ReposOwnerRepoIssuesPostRequest,
    ReposOwnerRepoIssuesPostResponse,
    ReposOwnerRepoKeysGetResponse,
    ReposOwnerRepoKeysPostRequest,
    ReposOwnerRepoLabelsGetResponse,
    ReposOwnerRepoLabelsNamePatchRequest,
    ReposOwnerRepoLabelsPostRequest,
    ReposOwnerRepoMergesPostRequest,
    ReposOwnerRepoMilestonesGetResponse,
    ReposOwnerRepoMilestonesMilestoneNumberLabelsGetResponse,
    ReposOwnerRepoMilestonesMilestoneNumberPatchRequest,
    ReposOwnerRepoMilestonesPostRequest,
    ReposOwnerRepoNotificationsGetResponse,
    ReposOwnerRepoNotificationsPutRequest,
    ReposOwnerRepoNotificationsPutResponse,
    ReposOwnerRepoPagesBuildsGetResponse,
    ReposOwnerRepoPagesDeleteResponse,
    ReposOwnerRepoPagesPostRequest,
    ReposOwnerRepoPagesPostResponse,
    ReposOwnerRepoPagesPutRequest,
    ReposOwnerRepoPatchRequest,
    ReposOwnerRepoPreReceiveHooksGetResponse,
    ReposOwnerRepoPreReceiveHooksPreReceiveHookIdPatchRequest,
    ReposOwnerRepoProjectsGetResponse,
    ReposOwnerRepoProjectsPostRequest,
    ReposOwnerRepoPullsCommentsCommentIdPatchRequest,
    ReposOwnerRepoPullsCommentsCommentIdReactionsGetResponse,
    ReposOwnerRepoPullsCommentsCommentIdReactionsGetResponse1,
    ReposOwnerRepoPullsCommentsCommentIdReactionsPostRequest,
    ReposOwnerRepoPullsCommentsCommentIdReactionsPostResponse,
    ReposOwnerRepoPullsCommentsGetResponse,
    ReposOwnerRepoPullsGetResponse,
    ReposOwnerRepoPullsPostRequest,
    ReposOwnerRepoPullsPullNumberCommentsCommentIdRepliesPostRequest,
    ReposOwnerRepoPullsPullNumberCommentsGetResponse,
    ReposOwnerRepoPullsPullNumberCommentsPostRequest,
    ReposOwnerRepoPullsPullNumberCommitsGetResponse,
    ReposOwnerRepoPullsPullNumberFilesGetResponse,
    ReposOwnerRepoPullsPullNumberMergePutRequest,
    ReposOwnerRepoPullsPullNumberMergePutResponse,
    ReposOwnerRepoPullsPullNumberPatchRequest,
    ReposOwnerRepoPullsPullNumberRequestedReviewersDeleteRequest,
    ReposOwnerRepoPullsPullNumberRequestedReviewersPostRequest,
    ReposOwnerRepoPullsPullNumberReviewsGetResponse,
    ReposOwnerRepoPullsPullNumberReviewsPostRequest,
    ReposOwnerRepoPullsPullNumberReviewsReviewIdCommentsGetResponse,
    ReposOwnerRepoPullsPullNumberReviewsReviewIdDismissalsPutRequest,
    ReposOwnerRepoPullsPullNumberReviewsReviewIdEventsPostRequest,
    ReposOwnerRepoPullsPullNumberReviewsReviewIdPutRequest,
    ReposOwnerRepoPullsPullNumberUpdateBranchPutRequest,
    ReposOwnerRepoPullsPullNumberUpdateBranchPutResponse,
    ReposOwnerRepoPullsPullNumberUpdateBranchPutResponse1,
    ReposOwnerRepoReleasesAssetsAssetIdGetResponse,
    ReposOwnerRepoReleasesAssetsAssetIdPatchRequest,
    ReposOwnerRepoReleasesGetResponse,
    ReposOwnerRepoReleasesPostRequest,
    ReposOwnerRepoReleasesReleaseIdAssetsGetResponse,
    ReposOwnerRepoReleasesReleaseIdPatchRequest,
    ReposOwnerRepoStargazersGetResponse,
    ReposOwnerRepoStatsCodeFrequencyGetResponse,
    ReposOwnerRepoStatsCodeFrequencyGetResponse1,
    ReposOwnerRepoStatsCommitActivityGetResponse,
    ReposOwnerRepoStatsCommitActivityGetResponse1,
    ReposOwnerRepoStatsContributorsGetResponse,
    ReposOwnerRepoStatsContributorsGetResponse1,
    ReposOwnerRepoStatsPunchCardGetResponse,
    ReposOwnerRepoStatusesShaPostRequest,
    ReposOwnerRepoSubscribersGetResponse,
    ReposOwnerRepoSubscriptionPutRequest,
    ReposOwnerRepoTagsGetResponse,
    ReposOwnerRepoTeamsGetResponse,
    ReposOwnerRepoTopicsGetResponse,
    ReposOwnerRepoTopicsPutRequest,
    ReposOwnerRepoTopicsPutResponse,
    ReposOwnerRepoTransferPostRequest,
    ReposTemplateOwnerTemplateRepoGeneratePostRequest,
    Role2,
    Role5,
    Role8,
    SearchCodeGetResponse,
    SearchCodeGetResponse1,
    SearchCommitsGetResponse,
    SearchCommitsGetResponse1,
    SearchIssuesGetResponse,
    SearchIssuesGetResponse1,
    SearchLabelsGetResponse,
    SearchRepositoriesGetResponse,
    SearchRepositoriesGetResponse1,
    SearchTopicsGetResponse,
    SearchTopicsGetResponse1,
    SearchUsersGetResponse,
    SearchUsersGetResponse1,
    SetupApiSettingsAuthorizedKeysDeleteResponse,
    SetupApiSettingsAuthorizedKeysGetResponse,
    SetupApiSettingsAuthorizedKeysPostResponse,
    ShortBlob,
    SimpleUser,
    Sort,
    Sort2,
    Sort6,
    Sort10,
    Sort12,
    Sort14,
    Sort16,
    Sort18,
    Sort20,
    Sort22,
    Sort24,
    Sort26,
    Sort28,
    Sort30,
    Sort32,
    Sort34,
    Sort36,
    Sort38,
    Sort40,
    Sort42,
    Sort44,
    Sort46,
    Sort48,
    Sort50,
    State8,
    State15,
    State18,
    State22,
    State28,
    State30,
    State33,
    Status5,
    Status10,
    StatusCheckPolicy,
    SubjectType,
    TeamDiscussion,
    TeamDiscussionComment,
    TeamFull,
    TeamMembership,
    TeamProject,
    TeamRepository,
    TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberPatchRequest,
    TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberReactionsGetResponse,
    TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostRequest,
    TeamsTeamIdDiscussionsDiscussionNumberCommentsGetResponse,
    TeamsTeamIdDiscussionsDiscussionNumberCommentsPostRequest,
    TeamsTeamIdDiscussionsDiscussionNumberPatchRequest,
    TeamsTeamIdDiscussionsDiscussionNumberReactionsGetResponse,
    TeamsTeamIdDiscussionsDiscussionNumberReactionsPostRequest,
    TeamsTeamIdDiscussionsGetResponse,
    TeamsTeamIdDiscussionsPostRequest,
    TeamsTeamIdMembersGetResponse,
    TeamsTeamIdMembershipsUsernamePutRequest,
    TeamsTeamIdPatchRequest,
    TeamsTeamIdProjectsGetResponse,
    TeamsTeamIdProjectsGetResponse1,
    TeamsTeamIdProjectsProjectIdDeleteResponse,
    TeamsTeamIdProjectsProjectIdGetResponse,
    TeamsTeamIdProjectsProjectIdPutRequest,
    TeamsTeamIdProjectsProjectIdPutResponse,
    TeamsTeamIdProjectsProjectIdPutResponse1,
    TeamsTeamIdReposGetResponse,
    TeamsTeamIdReposOwnerRepoPutRequest,
    TeamsTeamIdTeamsGetResponse,
    Thread,
    ThreadSubscription,
    Topic,
    Type,
    Type4,
    Type6,
    UserEmailsDeleteRequest,
    UserEmailsGetResponse,
    UserEmailsPostRequest,
    UserEmailsPostResponse,
    UserFollowersGetResponse,
    UserFollowingGetResponse,
    UserGetResponse,
    UserGpgKeysGetResponse,
    UserGpgKeysPostRequest,
    UserInstallationsGetResponse,
    UserInstallationsGetResponse1,
    UserInstallationsInstallationIdRepositoriesGetResponse,
    UserIssuesGetResponse,
    UserKeysGetResponse,
    UserKeysPostRequest,
    UserMembershipsOrgsGetResponse,
    UserMembershipsOrgsOrgPatchRequest,
    UserOrgsGetResponse,
    UserPatchRequest,
    UserProjectsPostRequest,
    UserProjectsPostResponse,
    UserPublicEmailsGetResponse,
    UserReposGetResponse,
    UserRepositoryInvitationsGetResponse,
    UserReposPostRequest,
    UsersGetResponse,
    UserStarredGetResponse,
    UserSubscriptionsGetResponse,
    UsersUsernameEventsGetResponse,
    UsersUsernameEventsOrgsOrgGetResponse,
    UsersUsernameEventsPublicGetResponse,
    UsersUsernameFollowersGetResponse,
    UsersUsernameFollowingGetResponse,
    UsersUsernameGetResponse,
    UsersUsernameGetResponse1,
    UsersUsernameGistsGetResponse,
    UsersUsernameGpgKeysGetResponse,
    UsersUsernameKeysGetResponse,
    UsersUsernameOrgsGetResponse,
    UsersUsernameProjectsGetResponse,
    UsersUsernameProjectsGetResponse1,
    UsersUsernameReceivedEventsGetResponse,
    UsersUsernameReceivedEventsPublicGetResponse,
    UsersUsernameReposGetResponse,
    UsersUsernameStarredGetResponse,
    UsersUsernameSubscriptionsGetResponse,
    UsersUsernameSuspendedDeleteRequest,
    UsersUsernameSuspendedPutRequest,
    UserTeamsGetResponse,
    ValidationError,
    ValidationErrorSimple,
    Visibility2,
    Visibility4,
)

app = MCPProxy(
    contact={
        'name': 'Support',
        'url': 'https://support.github.com/contact?tags=dotcom-rest-api',
    },
    description="GitHub's v3 REST API.",
    license={'name': 'MIT', 'url': 'https://spdx.org/licenses/MIT'},
    termsOfService='https://docs.github.com/articles/github-terms-of-service',
    title='GitHub v3 REST API',
    version='1.1.4',
    servers=[
        {
            'url': '{protocol}://{hostname}/api/v3',
            'variables': {
                'hostname': {
                    'default': 'HOSTNAME',
                    'description': 'Self-hosted Enterprise Server or Enterprise Cloud hostname',
                },
                'protocol': {
                    'default': 'http',
                    'description': 'Self-hosted Enterprise Server or Enterprise Cloud protocol',
                },
            },
        }
    ],
)


@app.get(
    '/#-datamodel-code-generator-#-root-#-special-#',
    description=""" Get Hypermedia links to resources accessible in GitHub's REST API """,
    tags=['meta_information_management'],
)
def meta_root():
    """
    GitHub API Root
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/admin/hooks', tags=['webhook_management', 'orgs_management'])
def enterprise_admin_list_global_webhooks(
    accept: str = 'application/vnd.github.superpro-preview+json',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List global webhooks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/admin/hooks', tags=['webhook_management', 'orgs_management'])
def enterprise_admin_create_global_webhook(
    accept: str = 'application/vnd.github.superpro-preview+json',
    body: AdminHooksPostRequest = ...,
):
    """
    Create a global webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/admin/hooks/{hook_id}', tags=['webhook_management', 'orgs_management'])
def enterprise_admin_delete_global_webhook(
    accept: str = 'application/vnd.github.superpro-preview+json', hook_id: int = ...
):
    """
    Delete a global webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/admin/hooks/{hook_id}', tags=['webhook_management', 'orgs_management'])
def enterprise_admin_get_global_webhook(
    accept: str = 'application/vnd.github.superpro-preview+json', hook_id: int = ...
):
    """
    Get a global webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/admin/hooks/{hook_id}',
    description=""" Parameters that are not provided will be overwritten with the default value or removed if no default exists. """,
    tags=['webhook_management', 'orgs_management'],
)
def enterprise_admin_update_global_webhook(
    accept: str = 'application/vnd.github.superpro-preview+json',
    hook_id: int = ...,
    body: AdminHooksHookIdPatchRequest = None,
):
    """
    Update a global webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin/hooks/{hook_id}/pings',
    description=""" This will trigger a [ping event](https://docs.github.com/enterprise-server@2.21/webhooks/#ping-event) to be sent to the webhook. """,
    tags=['webhook_management', 'orgs_management'],
)
def enterprise_admin_ping_global_webhook(
    accept: str = 'application/vnd.github.superpro-preview+json', hook_id: int = ...
):
    """
    Ping a global webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/admin/keys', tags=['user_ssh_key_management'])
def enterprise_admin_list_public_keys(
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
    direction: Optional[Direction] = 'desc',
    sort: Optional[Sort] = 'created',
    since: Optional[str] = None,
):
    """
    List public keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/admin/keys/{key_ids}', tags=['user_ssh_key_management'])
def enterprise_admin_delete_public_key(key_ids: str):
    """
    Delete a public key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/admin/ldap/teams/{team_id}/mapping',
    description=""" Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://help.github.com/enterprise/admin/guides/user-management/using-ldap/#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@2.21/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping.

You can also update the LDAP mapping of a child team. """,
    tags=['ldap_management', 'team_management'],
)
def enterprise_admin_update_ldap_mapping_for_team(
    team_id: int, body: AdminLdapTeamsTeamIdMappingPatchRequest = None
):
    """
    Update LDAP mapping for a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin/ldap/teams/{team_id}/sync',
    description=""" Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready. """,
    tags=['ldap_management', 'team_management'],
)
def enterprise_admin_sync_ldap_mapping_for_team(team_id: int):
    """
    Sync LDAP mapping for a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/admin/ldap/users/{username}/mapping',
    tags=['ldap_management', 'user_management', 'admin_user_management'],
)
def enterprise_admin_update_ldap_mapping_for_user(
    username: str, body: AdminLdapUsersUsernameMappingPatchRequest = None
):
    """
    Update LDAP mapping for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin/ldap/users/{username}/sync',
    description=""" Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready. """,
    tags=['ldap_management', 'user_management'],
)
def enterprise_admin_sync_ldap_mapping_for_user(username: str):
    """
    Sync LDAP mapping for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/admin/organizations', tags=['organization_management', 'orgs_management'])
def enterprise_admin_create_org(body: AdminOrganizationsPostRequest = None):
    """
    Create an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/admin/organizations/{org}',
    tags=[
        'organization_management',
        'orgs_management',
        'organization_member_management',
    ],
)
def enterprise_admin_update_org_name(
    org: str, body: AdminOrganizationsOrgPatchRequest = ...
):
    """
    Update an organization name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/admin/pre-receive-environments', tags=['pre_receive_environment_management'])
def enterprise_admin_list_pre_receive_environments(
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
    direction: Optional[Direction] = 'desc',
    sort: Optional[Sort2] = 'created',
):
    """
    List pre-receive environments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin/pre-receive-environments',
    tags=['pre_receive_environment_management', 'pre_receive_hook_management'],
)
def enterprise_admin_create_pre_receive_environment(
    body: AdminPreReceiveEnvironmentsPostRequest,
):
    """
    Create a pre-receive environment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/admin/pre-receive-environments/{pre_receive_environment_id}',
    description=""" If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.

The possible error messages are:

*   _Cannot modify or delete the default environment_
*   _Cannot delete environment that has hooks_
*   _Cannot delete environment when download is in progress_ """,
    tags=['pre_receive_environment_management'],
)
def enterprise_admin_delete_pre_receive_environment(pre_receive_environment_id: int):
    """
    Delete a pre-receive environment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin/pre-receive-environments/{pre_receive_environment_id}',
    tags=['pre_receive_environment_management', 'pre_receive_hook_management'],
)
def enterprise_admin_get_pre_receive_environment(pre_receive_environment_id: int):
    """
    Get a pre-receive environment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/admin/pre-receive-environments/{pre_receive_environment_id}',
    description=""" You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response. """,
    tags=['pre_receive_environment_management'],
)
def enterprise_admin_update_pre_receive_environment(
    pre_receive_environment_id: int,
    body: AdminPreReceiveEnvironmentsPreReceiveEnvironmentIdPatchRequest = None,
):
    """
    Update a pre-receive environment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin/pre-receive-environments/{pre_receive_environment_id}/downloads',
    description=""" Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.

If a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.

The possible error messages are:

* _Cannot modify or delete the default environment_
* _Can not start a new download when a download is in progress_ """,
    tags=['pre_receive_environment_management'],
)
def enterprise_admin_start_pre_receive_environment_download(
    pre_receive_environment_id: int,
):
    """
    Start a pre-receive environment download
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest',
    description=""" In addition to seeing the download status at the "[Get a pre-receive environment](#get-a-pre-receive-environment)" endpoint, there is also this separate endpoint for just the download status. """,
    tags=['pre_receive_environment_management', 'pre_receive_hook_management'],
)
def enterprise_admin_get_download_status_for_pre_receive_environment(
    pre_receive_environment_id: int,
):
    """
    Get the download status for a pre-receive environment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin/pre-receive-hooks',
    tags=['pre_receive_hook_management', 'pre_receive_environment_management'],
)
def enterprise_admin_list_pre_receive_hooks(
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
    direction: Optional[Direction] = 'desc',
    sort: Optional[Sort2] = 'created',
):
    """
    List pre-receive hooks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin/pre-receive-hooks',
    tags=['pre_receive_hook_management', 'pre_receive_environment_management'],
)
def enterprise_admin_create_pre_receive_hook(body: AdminPreReceiveHooksPostRequest):
    """
    Create a pre-receive hook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/admin/pre-receive-hooks/{pre_receive_hook_id}',
    tags=['pre_receive_hook_management', 'pre_receive_environment_management'],
)
def enterprise_admin_delete_pre_receive_hook(pre_receive_hook_id: int):
    """
    Delete a pre-receive hook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin/pre-receive-hooks/{pre_receive_hook_id}',
    tags=['pre_receive_hook_management', 'pre_receive_environment_management'],
)
def enterprise_admin_get_pre_receive_hook(pre_receive_hook_id: int):
    """
    Get a pre-receive hook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/admin/pre-receive-hooks/{pre_receive_hook_id}',
    tags=['pre_receive_hook_management', 'pre_receive_environment_management'],
)
def enterprise_admin_update_pre_receive_hook(
    pre_receive_hook_id: int,
    body: AdminPreReceiveHooksPreReceiveHookIdPatchRequest = None,
):
    """
    Update a pre-receive hook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin/tokens',
    description=""" Lists personal access tokens for all users, including admin users. """,
    tags=['personal_access_token_management'],
)
def enterprise_admin_list_personal_access_tokens(
    per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List personal access tokens
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/admin/tokens/{token_id}',
    description=""" Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error. """,
    tags=['personal_access_token_management'],
)
def enterprise_admin_delete_personal_access_token(token_id: int):
    """
    Delete a personal access token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin/users',
    description=""" If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@2.21/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.

The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send `"octo_cat"` as the login, a user named `"octo-cat"` will be created.

If the login name or email address is already associated with an account, the server will return a `422` response. """,
    tags=['user_management', 'admin_user_management'],
)
def enterprise_admin_create_user(body: AdminUsersPostRequest):
    """
    Create a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/admin/users/{username}',
    description=""" Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@2.21/rest/reference/enterprise-admin#suspend-a-user) is often a better option.

You can delete any user account except your own. """,
    tags=['user_management', 'admin_user_management'],
)
def enterprise_admin_delete_user(username: str):
    """
    Delete a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/admin/users/{username}', tags=['user_management', 'admin_user_management'])
def enterprise_admin_update_username_for_user(
    username: str, body: AdminUsersUsernamePatchRequest = ...
):
    """
    Update the username for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/admin/users/{username}/authorizations',
    tags=['oauth_management', 'user_management'],
)
def enterprise_admin_delete_impersonation_o_auth_token(username: str):
    """
    Delete an impersonation OAuth token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin/users/{username}/authorizations',
    tags=['oauth_management', 'user_management'],
)
def enterprise_admin_create_impersonation_o_auth_token(
    username: str, body: AdminUsersUsernameAuthorizationsPostRequest = None
):
    """
    Create an impersonation OAuth token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/app',
    description=""" Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/enterprise-server@2.21/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.

You must use a [JWT](https://docs.github.com/enterprise-server@2.21/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. """,
    tags=['app_management', 'app_installation_management'],
)
def apps_get_authenticated():
    """
    Get the authenticated app
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/app-manifests/{code}/conversions',
    description=""" Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/enterprise-server@2.21/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`. """,
    tags=['app_management', 'app_installation_management'],
)
def apps_create_from_manifest(
    code: str, body: AppManifestsCodeConversionsPostRequest = None
):
    """
    Create a GitHub App from a manifest
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/app/installations',
    description=""" You must use a [JWT](https://docs.github.com/enterprise-server@2.21/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.

The permissions the installation has are included under the `permissions` key. """,
    tags=['app_management', 'app_installation_management', 'apps_management'],
)
def apps_list_installations(
    accept: str = 'application/vnd.github.machine-man-preview+json',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List installations for the authenticated app
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/app/installations/{installation_id}',
    description=""" Uninstalls a GitHub App on a user, organization, or business account. You must use a [JWT](https://docs.github.com/enterprise-server@2.21/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. """,
    tags=['app_management', 'app_installation_management'],
)
def apps_delete_installation(
    accept: str = 'application/vnd.github.machine-man-preview+json',
    installation_id: int = ...,
):
    """
    Delete an installation for the authenticated app
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/app/installations/{installation_id}',
    description=""" Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.

You must use a [JWT](https://docs.github.com/enterprise-server@2.21/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. """,
    tags=['app_management', 'app_installation_management'],
)
def apps_get_installation(
    accept: str = 'application/vnd.github.machine-man-preview+json',
    installation_id: int = ...,
):
    """
    Get an installation for the authenticated app
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/app/installations/{installation_id}/access_tokens',
    description=""" Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.

You must use a [JWT](https://docs.github.com/enterprise-server@2.21/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. """,
    tags=['app_management', 'apps_management', 'app_installation_management'],
)
def apps_create_installation_access_token(
    accept: str = 'application/vnd.github.machine-man-preview+json',
    installation_id: int = ...,
    body: AppInstallationsInstallationIdAccessTokensPostRequest = None,
):
    """
    Create an installation access token for an app
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/applications/grants',
    description=""" **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@2.21/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).

You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`. """,
    tags=['oauth_management', 'organization_management'],
)
def oauth_authorizations_list_grants(
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
    client_id: Optional[str] = None,
):
    """
    List your grants
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/applications/grants/{grant_id}',
    description=""" **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@2.21/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).

Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). """,
    tags=['oauth_management'],
)
def oauth_authorizations_delete_grant(grant_id: int):
    """
    Delete a grant
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/applications/grants/{grant_id}',
    description=""" **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). """,
    tags=['oauth_management'],
)
def oauth_authorizations_get_grant(grant_id: int):
    """
    Get a single grant
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/applications/{client_id}/grant',
    description=""" OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/enterprise-server@2.21/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). """,
    tags=['oauth_management', 'app_management'],
)
def apps_delete_authorization(
    client_id: str, body: ApplicationsClientIdGrantDeleteRequest = None
):
    """
    Delete an app authorization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/applications/{client_id}/grants/{access_token}',
    description=""" **Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).

OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/enterprise-server@2.21/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.

Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under "Authorized OAuth Apps" on GitHub Enterprise Server](https://github.com/settings/applications#authorized). """,
    tags=['oauth_management', 'app_management'],
)
def apps_revoke_grant_for_application(client_id: str, access_token: str = ...):
    """
    Revoke a grant for an application
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/applications/{client_id}/token',
    description=""" OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/enterprise-server@2.21/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. """,
    tags=['app_management', 'personal_access_token_management'],
)
def apps_delete_token(
    client_id: str, body: ApplicationsClientIdTokenDeleteRequest = ...
):
    """
    Delete an app token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/applications/{client_id}/token',
    description=""" OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/enterprise-server@2.21/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`. """,
    tags=['oauth_management', 'user_management', 'app_management'],
)
def apps_reset_token(client_id: str, body: ApplicationsClientIdTokenPatchRequest = ...):
    """
    Reset a token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/applications/{client_id}/token',
    description=""" OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/enterprise-server@2.21/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`. """,
    tags=['oauth_management', 'user_management'],
)
def apps_check_token(client_id: str, body: ApplicationsClientIdTokenPostRequest = ...):
    """
    Check a token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/applications/{client_id}/tokens/{access_token}',
    description=""" **Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).

OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/enterprise-server@2.21/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. """,
    tags=['app_management', 'oauth_management', 'user_management'],
)
def apps_revoke_authorization_for_application(client_id: str, access_token: str = ...):
    """
    Revoke an authorization for an application
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/applications/{client_id}/tokens/{access_token}',
    description=""" **Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).

OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/enterprise-server@2.21/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`. """,
    tags=['oauth_management', 'user_management'],
)
def apps_check_authorization(client_id: str, access_token: str = ...):
    """
    Check an authorization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/applications/{client_id}/tokens/{access_token}',
    description=""" **Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).

OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/enterprise-server@2.21/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`. """,
    tags=['oauth_management', 'user_management'],
)
def apps_reset_authorization(client_id: str, access_token: str = ...):
    """
    Reset an authorization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps/{app_slug}',
    description=""" **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).

If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/enterprise-server@2.21/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint. """,
    tags=['app_management', 'apps_management', 'app_installation_management'],
)
def apps_get_by_slug(app_slug: str):
    """
    Get an app
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/authorizations',
    description=""" **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). """,
    tags=['oauth_management', 'user_management'],
)
def oauth_authorizations_list_authorizations(
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
    client_id: Optional[str] = None,
):
    """
    List your authorizations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/authorizations',
    description=""" **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@2.21/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).

**Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).

Creates OAuth tokens using [Basic Authentication](https://docs.github.com/enterprise-server@2.21/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@2.21/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."

To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.

You can also create tokens on GitHub Enterprise Server from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://help.github.com/articles/creating-an-access-token-for-command-line-use).

Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on). """,
    tags=['oauth_management', 'user_management', 'app_management'],
)
def oauth_authorizations_create_authorization(body: AuthorizationsPostRequest = None):
    """
    Create a new authorization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/authorizations/clients/{client_id}',
    description=""" **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@2.21/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).

**Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).

Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.

If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@2.21/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."

**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@2.21/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). """,
    tags=['app_management', 'oauth_management'],
)
def oauth_authorizations_get_or_create_authorization_for_app(
    client_id: str, body: AuthorizationsClientsClientIdPutRequest = ...
):
    """
    Get-or-create an authorization for a specific app
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/authorizations/clients/{client_id}/{fingerprint}',
    description=""" **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@2.21/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).

**Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).

This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.

If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@2.21/rest/overview/other-authentication-methods#working-with-two-factor-authentication)." """,
    tags=['app_management', 'oauth_management'],
)
def get_or_create_auth_for_app_fingerprint(
    client_id: str,
    fingerprint: str = ...,
    body: AuthorizationsClientsClientIdFingerprintPutRequest = ...,
):
    """
    Get-or-create an authorization for a specific app and fingerprint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/authorizations/{authorization_id}',
    description=""" **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). """,
    tags=['oauth_management', 'user_management', 'app_management'],
)
def oauth_authorizations_delete_authorization(authorization_id: int):
    """
    Delete an authorization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/authorizations/{authorization_id}',
    description=""" **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). """,
    tags=['oauth_management', 'user_management', 'app_management'],
)
def oauth_authorizations_get_authorization(authorization_id: int):
    """
    Get a single authorization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/authorizations/{authorization_id}',
    description=""" **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@2.21/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@2.21/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).

If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@2.21/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."

You can only send one of these scope keys at a time. """,
    tags=['oauth_management', 'user_management'],
)
def oauth_authorizations_update_authorization(
    authorization_id: int, body: AuthorizationsAuthorizationIdPatchRequest = None
):
    """
    Update an existing authorization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/codes_of_conduct',
    tags=['codes_of_conduct_management', 'conduct_access_management'],
)
def codes_of_conduct_get_all_codes_of_conduct():
    """
    Get all codes of conduct
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/codes_of_conduct/{key}',
    tags=['codes_of_conduct_management', 'conduct_access_management'],
)
def codes_of_conduct_get_conduct_code(key: str):
    """
    Get a code of conduct
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/emojis',
    description=""" Lists all the emojis available to use on GitHub Enterprise Server. """,
    tags=['emoji_management'],
)
def emojis_get():
    """
    Get emojis
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/enterprise/settings/license', tags=['license_management', 'repository_management']
)
def enterprise_admin_get_license_information():
    """
    Get license information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/enterprise/stats/all',
    tags=['repository_activity_management', 'enterprise_statistics_management'],
)
def enterprise_admin_get_all_stats():
    """
    Get all statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/enterprise/stats/comments',
    tags=[
        'comment_management',
        'issue_comment_management',
        'pull_request_comments_management',
    ],
)
def enterprise_admin_get_comment_stats():
    """
    Get comment statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/enterprise/stats/gists',
    tags=['gists_management', 'enterprise_statistics_management'],
)
def get_enterprise_stats_gists():
    """
    Get gist statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/enterprise/stats/hooks',
    tags=['repository_activity_management', 'enterprise_statistics_management'],
)
def enterprise_admin_get_hooks_stats():
    """
    Get hooks statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/enterprise/stats/issues',
    tags=['issue_tracking_management', 'issue_management', 'user_issue_management'],
)
def enterprise_admin_get_issue_stats():
    """
    Get issue statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/enterprise/stats/milestones',
    tags=['milestone_management', 'issue_management', 'repository_management'],
)
def enterprise_admin_get_milestone_stats():
    """
    Get milestone statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/enterprise/stats/orgs',
    tags=[
        'organization_management',
        'enterprise_statistics_management',
        'repository_activity_management',
    ],
)
def enterprise_admin_get_org_stats():
    """
    Get organization statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/enterprise/stats/pages',
    tags=['enterprise_statistics_management', 'repository_activity_management'],
)
def enterprise_admin_get_pages_stats():
    """
    Get pages statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/enterprise/stats/pulls',
    tags=['repository_activity_management', 'pull_request_management'],
)
def enterprise_admin_get_pull_request_stats():
    """
    Get pull request statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/enterprise/stats/repos',
    tags=[
        'repository_management',
        'repository_activity_management',
        'enterprise_statistics_management',
    ],
)
def enterprise_admin_get_repo_stats():
    """
    Get repository statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/enterprise/stats/users', tags=['user_management', 'user_activity_management']
)
def enterprise_admin_get_user_stats():
    """
    Get users statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/events',
    description=""" We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago. """,
    tags=['activity_feed_management', 'user_activity_management'],
)
def activity_list_public_events(per_page: Optional[int] = 30, page: Optional[int] = 1):
    """
    List public events
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/feeds',
    description=""" GitHub Enterprise Server provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:

*   **Timeline**: The GitHub Enterprise Server global public timeline
*   **User**: The public timeline for any user, using [URI template](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#hypermedia)
*   **Current user public**: The public timeline for the authenticated user
*   **Current user**: The private timeline for the authenticated user
*   **Current user actor**: The private timeline for activity created by the authenticated user
*   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
*   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub Enterprise Server.

**Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/enterprise-server@2.21/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens. """,
    tags=['activity_feed_management'],
)
def activity_get_feeds():
    """
    Get feeds
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/gists',
    description=""" Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists: """,
    tags=['gists_management', 'user_management'],
)
def gists_list(
    since: Optional[datetime] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List gists for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/gists',
    description=""" Allows you to add a new gist with one or more files.

**Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally. """,
    tags=['gists_management'],
)
def gists_create(body: GistsPostRequest):
    """
    Create a gist
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/gists/public',
    description=""" List public gists sorted by most recently updated to least recently updated.

Note: With [pagination](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page. """,
    tags=['gists_management', 'user_management', 'user_activity_management'],
)
def gists_list_public(
    since: Optional[datetime] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List public gists
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/gists/starred',
    description=""" List the authenticated user's starred gists: """,
    tags=['gists_management', 'user_management'],
)
def gists_list_starred(
    since: Optional[datetime] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List starred gists
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/gists/{gist_id}', tags=['gists_management'])
def gists_delete(gist_id: str):
    """
    Delete a gist
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/gists/{gist_id}', tags=['gists_management'])
def gists_get(gist_id: str):
    """
    Get a gist
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/gists/{gist_id}',
    description=""" Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged. """,
    tags=['gists_management'],
)
def gists_update(gist_id: str, body: GistsGistIdPatchRequest = ...):
    """
    Update a gist
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/gists/{gist_id}/comments', tags=['gists_management', 'comment_management'])
def gists_list_comments(
    gist_id: str, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List gist comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/gists/{gist_id}/comments', tags=['gists_management', 'comment_management'])
def gists_create_comment(gist_id: str, body: GistsGistIdCommentsPostRequest = ...):
    """
    Create a gist comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/gists/{gist_id}/comments/{comment_id}',
    tags=['gists_management', 'comment_management'],
)
def gists_delete_comment(gist_id: str, comment_id: int = ...):
    """
    Delete a gist comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/gists/{gist_id}/comments/{comment_id}',
    tags=['gists_management', 'comment_management'],
)
def gists_get_comment(gist_id: str, comment_id: int = ...):
    """
    Get a gist comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/gists/{gist_id}/comments/{comment_id}',
    tags=['gists_management', 'comment_management'],
)
def gists_update_comment(
    gist_id: str,
    comment_id: int = ...,
    body: GistsGistIdCommentsCommentIdPatchRequest = ...,
):
    """
    Update a gist comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/gists/{gist_id}/commits', tags=['gists_management'])
def gists_list_commits(
    gist_id: str, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List gist commits
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/gists/{gist_id}/forks', tags=['gists_management'])
def gists_list_forks(
    gist_id: str, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List gist forks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/gists/{gist_id}/forks',
    description=""" **Note**: This was previously `/gists/:gist_id/fork`. """,
    tags=['gists_management', 'fork_management'],
)
def gists_fork(gist_id: str):
    """
    Fork a gist
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/gists/{gist_id}/star', tags=['gists_management'])
def gists_unstar(gist_id: str):
    """
    Unstar a gist
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/gists/{gist_id}/star', tags=['gists_management'])
def gists_check_is_starred(gist_id: str):
    """
    Check if a gist is starred
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/gists/{gist_id}/star',
    description=""" Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-verbs)." """,
    tags=['gists_management'],
)
def gists_star(gist_id: str):
    """
    Star a gist
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/gists/{gist_id}/{sha}', tags=['gists_management'])
def gists_get_revision(gist_id: str, sha: str = ...):
    """
    Get a gist revision
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/gitignore/templates',
    description=""" List all templates available to pass as an option when [creating a repository](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#create-a-repository-for-the-authenticated-user). """,
    tags=['gitignore_template_management'],
)
def gitignore_get_all_templates():
    """
    Get all gitignore templates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/gitignore/templates/{name}',
    description=""" The API also allows fetching the source of a single template.
Use the raw [media type](https://docs.github.com/enterprise-server@2.21/rest/overview/media-types/) to get the raw contents. """,
    tags=['gitignore_template_management'],
)
def gitignore_get_template(name: str):
    """
    Get a gitignore template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/installation/repositories',
    description=""" List repositories that an app installation can access.

You must use an [installation access token](https://docs.github.com/enterprise-server@2.21/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint. """,
    tags=[
        'app_management',
        'app_installation_management',
        'apps_management',
        'organization_installation_management',
    ],
)
def apps_list_repos_accessible_to_installation(
    accept: str = 'application/vnd.github.machine-man-preview+json',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List repositories accessible to the app installation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/installation/token',
    description=""" Revokes the installation token you're using to authenticate as an installation and access this endpoint.

Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/enterprise-server@2.21/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.

You must use an [installation access token](https://docs.github.com/enterprise-server@2.21/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint. """,
    tags=['app_management', 'app_installation_management'],
)
def apps_revoke_installation_access_token():
    """
    Revoke an installation access token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/issues',
    description=""" List issues assigned to the authenticated user across all visible repositories including owned repositories, member
repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
necessarily assigned to you.


**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
request id, use the "[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)" endpoint. """,
    tags=['issue_tracking_management', 'user_issue_management'],
)
def issues_list(
    filter: Optional[Filter] = 'assigned',
    state: Optional[State8] = 'open',
    labels: Optional[str] = None,
    sort: Optional[Sort6] = 'created',
    direction: Optional[Direction] = 'desc',
    since: Optional[datetime] = None,
    collab: Optional[bool] = None,
    orgs: Optional[bool] = None,
    owned: Optional[bool] = None,
    pulls: Optional[bool] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List issues assigned to the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/licenses', tags=['license_management', 'repository_management'])
def licenses_get_all_commonly_used(
    featured: Optional[bool] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    Get all commonly used licenses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/licenses/{license}', tags=['license_management'])
def licenses_get(license: str):
    """
    Get a license
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/markdown', tags=['markdown_processing_management'])
def markdown_render(body: MarkdownPostRequest):
    """
    Render a Markdown document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/markdown/raw',
    description=""" You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less. """,
    tags=['markdown_processing_management'],
)
def markdown_render_raw():
    """
    Render a Markdown document in raw mode
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/meta', tags=['meta_information_management', 'enterprise_statistics_management']
)
def meta_get():
    """
    Get GitHub Enterprise Server meta information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/networks/{owner}/{repo}/events', tags=['activity_feed_management'])
def activity_list_public_events_for_repo_network(
    owner: str, repo: str = ..., per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List public events for a network of repositories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/notifications',
    description=""" List all notifications for the current user, sorted by most recently updated. """,
    tags=['notification_management', 'user_activity_management'],
)
def activity_list_notifications_for_authenticated_user(
    all: Optional[bool] = False,
    participating: Optional[bool] = False,
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List notifications for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/notifications',
    description=""" Marks all notifications as "read" removes it from the [default view on GitHub Enterprise Server](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub Enterprise Server will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/enterprise-server@2.21/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`. """,
    tags=['notification_management'],
)
def activity_mark_notifications_as_read(body: NotificationsPutRequest = None):
    """
    Mark notifications as read
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/notifications/threads/{thread_id}',
    tags=[
        'notification_management',
        'discussion_management',
        'activity_feed_management',
    ],
)
def activity_get_thread(thread_id: int):
    """
    Get a thread
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/notifications/threads/{thread_id}', tags=['notification_management'])
def activity_mark_thread_as_read(thread_id: int):
    """
    Mark a thread as read
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/notifications/threads/{thread_id}/subscription',
    description=""" Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/enterprise-server@2.21/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`. """,
    tags=['notification_management', 'repository_subscription_management'],
)
def activity_delete_thread_subscription(thread_id: int):
    """
    Delete a thread subscription
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/notifications/threads/{thread_id}/subscription',
    description=""" This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/enterprise-server@2.21/rest/reference/activity#get-a-repository-subscription).

Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread. """,
    tags=['notification_management', 'user_management'],
)
def activity_get_thread_subscription_for_authenticated_user(thread_id: int):
    """
    Get a thread subscription for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/notifications/threads/{thread_id}/subscription',
    description=""" If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.

You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.

Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/enterprise-server@2.21/rest/reference/activity#delete-a-thread-subscription) endpoint. """,
    tags=['notification_management', 'user_activity_management'],
)
def activity_set_thread_subscription(
    thread_id: int, body: NotificationsThreadsThreadIdSubscriptionPutRequest = None
):
    """
    Set a thread subscription
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/octocat',
    description=""" Get the octocat as ASCII art """,
    tags=['user_management', 'meta_information_management'],
)
def meta_get_octocat(s: Optional[str] = None):
    """
    Get Octocat
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations',
    description=""" Lists all organizations, in the order that they were created on GitHub Enterprise Server.

**Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations. """,
    tags=['organization_management', 'orgs_management'],
)
def orgs_list(since: Optional[int] = None, per_page: Optional[int] = 30):
    """
    List organizations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}',
    description=""" To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).

GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub Enterprise Server plan. See "[Authenticating with GitHub Apps](https://docs.github.com/enterprise-server@2.21/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub Enterprise Server plan information' below." """,
    tags=[
        'organization_management',
        'orgs_management',
        'organization_member_management',
    ],
)
def orgs_get(org: str):
    """
    Get an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/orgs/{org}',
    description=""" **Parameter Deprecation Notice:** GitHub Enterprise Server will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).

Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges. """,
    tags=['organization_management', 'orgs_management'],
)
def orgs_update(org: str, body: OrgsOrgPatchRequest = None):
    """
    Update an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/events', tags=['activity_feed_management', 'organization_management']
)
def activity_list_public_org_events(
    org: str, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List public organization events
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/hooks',
    tags=['webhook_management', 'organization_management', 'orgs_management'],
)
def orgs_list_webhooks(org: str, per_page: Optional[int] = 30, page: Optional[int] = 1):
    """
    List organization webhooks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/orgs/{org}/hooks',
    description=""" Here's how you can create a hook that posts payloads in JSON format: """,
    tags=['webhook_management', 'orgs_management', 'organization_management'],
)
def orgs_create_webhook(org: str, body: OrgsOrgHooksPostRequest = ...):
    """
    Create an organization webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}/hooks/{hook_id}', tags=['webhook_management', 'orgs_management']
)
def orgs_delete_webhook(org: str, hook_id: int = ...):
    """
    Delete an organization webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/hooks/{hook_id}',
    description=""" Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)." """,
    tags=['webhook_management', 'organization_management', 'orgs_management'],
)
def orgs_get_webhook(org: str, hook_id: int = ...):
    """
    Get an organization webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/orgs/{org}/hooks/{hook_id}',
    description=""" Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)." """,
    tags=['webhook_management', 'orgs_management', 'organization_management'],
)
def orgs_update_webhook(
    org: str, hook_id: int = ..., body: OrgsOrgHooksHookIdPatchRequest = None
):
    """
    Update an organization webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/orgs/{org}/hooks/{hook_id}/pings',
    description=""" This will trigger a [ping event](https://docs.github.com/enterprise-server@2.21/webhooks/#ping-event) to be sent to the hook. """,
    tags=[
        'webhook_management',
        'orgs_management',
        'organization_management',
        'pre_receive_hook_management',
    ],
)
def orgs_ping_webhook(org: str, hook_id: int = ...):
    """
    Ping an organization webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/installation',
    description=""" Enables an authenticated GitHub App to find the organization's installation information.

You must use a [JWT](https://docs.github.com/enterprise-server@2.21/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. """,
    tags=['organization_installation_management', 'app_management', 'orgs_management'],
)
def apps_get_org_installation(
    accept: str = 'application/vnd.github.machine-man-preview+json', org: str = ...
):
    """
    Get an organization installation for the authenticated app
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/installations',
    description=""" Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint. """,
    tags=[
        'organization_installation_management',
        'app_management',
        'app_installation_management',
        'apps_management',
    ],
)
def orgs_list_app_installations(
    accept: str = 'application/vnd.github.machine-man-preview+json',
    org: str = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List app installations for an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/issues',
    description=""" List issues in an organization assigned to the authenticated user.

**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
request id, use the "[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)" endpoint. """,
    tags=[
        'issue_tracking_management',
        'user_issue_management',
        'organization_management',
    ],
)
def issues_list_for_org(
    org: str,
    filter: Optional[Filter] = 'assigned',
    state: Optional[State8] = 'open',
    labels: Optional[str] = None,
    sort: Optional[Sort6] = 'created',
    direction: Optional[Direction] = 'desc',
    since: Optional[datetime] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List organization issues assigned to the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/members',
    description=""" List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned. """,
    tags=['organization_management', 'organization_member_management'],
)
def orgs_list_members(
    org: str,
    filter: Optional[Filter4] = 'all',
    role: Optional[Role2] = 'all',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List organization members
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}/members/{username}',
    description=""" Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories. """,
    tags=['organization_member_management', 'user_management'],
)
def orgs_remove_member(org: str, username: str = ...):
    """
    Remove an organization member
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/members/{username}',
    description=""" Check if a user is, publicly or privately, a member of the organization. """,
    tags=['organization_member_management', 'organization_management'],
)
def orgs_check_membership_for_user(org: str, username: str = ...):
    """
    Check organization membership for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}/memberships/{username}',
    description=""" In order to remove a user's membership with an organization, the authenticated user must be an organization owner.

If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases. """,
    tags=[
        'organization_member_management',
        'user_management',
        'organization_management',
    ],
)
def orgs_remove_membership_for_user(org: str, username: str = ...):
    """
    Remove organization membership for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/memberships/{username}',
    description=""" In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status. """,
    tags=['organization_management', 'organization_member_management'],
)
def orgs_get_membership_for_user(org: str, username: str = ...):
    """
    Get organization membership for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/orgs/{org}/memberships/{username}',
    description=""" Only authenticated organization owners can add a member to the organization or update the member's role.

*   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/enterprise-server@2.21/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
    
*   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.

**Rate limits**

To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period. """,
    tags=['organization_management', 'organization_member_management'],
)
def orgs_set_membership_for_user(
    org: str, username: str = ..., body: OrgsOrgMembershipsUsernamePutRequest = None
):
    """
    Set organization membership for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/outside_collaborators',
    description=""" List all users who are outside collaborators of an organization. """,
    tags=[
        'outside_collaborator_management',
        'organization_management',
        'organization_member_management',
    ],
)
def orgs_list_outside_collaborators(
    org: str,
    filter: Optional[Filter4] = 'all',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List outside collaborators for an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}/outside_collaborators/{username}',
    description=""" Removing a user from this list will remove them from all the organization's repositories. """,
    tags=['organization_member_management', 'outside_collaborator_management'],
)
def orgs_remove_outside_collaborator(org: str, username: str = ...):
    """
    Remove outside collaborator from an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/orgs/{org}/outside_collaborators/{username}',
    description=""" When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". """,
    tags=['organization_member_management', 'outside_collaborator_management'],
)
def orgs_convert_member_to_outside_collaborator(org: str, username: str = ...):
    """
    Convert an organization member to outside collaborator
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/pre-receive-hooks',
    description=""" List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed. """,
    tags=[
        'pre_receive_hook_management',
        'organization_management',
        'pre_receive_environment_management',
    ],
)
def enterprise_admin_list_pre_receive_hooks_for_org(
    org: str,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
    direction: Optional[Direction] = 'desc',
    sort: Optional[Sort10] = 'created',
):
    """
    List pre-receive hooks for an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}',
    description=""" Removes any overrides for this hook at the org level for this org. """,
    tags=['pre_receive_hook_management', 'organization_management'],
)
def enterprise_admin_remove_pre_receive_hook_enforcement_for_org(
    org: str, pre_receive_hook_id: int = ...
):
    """
    Remove pre-receive hook enforcement for an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}',
    tags=['pre_receive_hook_management', 'organization_management'],
)
def enterprise_admin_get_pre_receive_hook_for_org(
    org: str, pre_receive_hook_id: int = ...
):
    """
    Get a pre-receive hook for an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}',
    description=""" For pre-receive hooks which are allowed to be configured at the org level, you can set `enforcement` and `allow_downstream_configuration` """,
    tags=['pre_receive_hook_management', 'organization_management', 'orgs_management'],
)
def enterprise_admin_update_pre_receive_hook_enforcement_for_org(
    org: str,
    pre_receive_hook_id: int = ...,
    body: OrgsOrgPreReceiveHooksPreReceiveHookIdPatchRequest = None,
):
    """
    Update pre-receive hook enforcement for an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/projects',
    description=""" Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. """,
    tags=['organization_project_management', 'organization_management'],
)
def projects_list_for_org(
    org: str,
    state: Optional[State8] = 'open',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List organization projects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/orgs/{org}/projects',
    description=""" Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. """,
    tags=['organization_management', 'organization_project_management'],
)
def projects_create_for_org(org: str, body: OrgsOrgProjectsPostRequest = ...):
    """
    Create an organization project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/public_members',
    description=""" Members of an organization can choose to have their membership publicized or not. """,
    tags=[
        'organization_member_management',
        'public_member_management',
        'organization_management',
    ],
)
def orgs_list_public_members(
    org: str, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List public organization members
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}/public_members/{username}',
    tags=[
        'organization_member_management',
        'public_member_management',
        'organization_management',
    ],
)
def orgs_remove_public_membership_for_authenticated_user(org: str, username: str = ...):
    """
    Remove public organization membership for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/public_members/{username}',
    tags=[
        'organization_management',
        'organization_member_management',
        'public_member_management',
    ],
)
def orgs_check_public_membership_for_user(org: str, username: str = ...):
    """
    Check public organization membership for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/orgs/{org}/public_members/{username}',
    description=""" The user can publicize their own membership. (A user cannot publicize the membership for another user.)

Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-verbs)." """,
    tags=[
        'organization_management',
        'public_member_management',
        'organization_member_management',
    ],
)
def orgs_set_public_membership_for_authenticated_user(org: str, username: str = ...):
    """
    Set public organization membership for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/repos',
    description=""" Lists repositories for the specified organization. """,
    tags=['organization_management', 'repository_management', 'orgs_management'],
)
def repos_list_for_org(
    org: str,
    type: Optional[Type] = None,
    sort: Optional[Sort12] = 'created',
    direction: Optional[Direction] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List organization repositories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/orgs/{org}/repos',
    description=""" Creates a new repository in the specified organization. The authenticated user must be a member of the organization.

**OAuth scope requirements**

When using [OAuth](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:

*   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
*   `repo` scope to create a private repository """,
    tags=[
        'organization_management',
        'orgs_management',
        'repository_creation_management',
    ],
)
def repos_create_in_org(org: str, body: OrgsOrgReposPostRequest = ...):
    """
    Create an organization repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/teams',
    description=""" Lists all teams in an organization that are visible to the authenticated user. """,
    tags=[
        'organization_management',
        'team_management',
        'organization_member_management',
        'user_management',
    ],
)
def teams_list(org: str, per_page: Optional[int] = 30, page: Optional[int] = 1):
    """
    List teams
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/orgs/{org}/teams',
    description=""" To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."

When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)". """,
    tags=[
        'organization_management',
        'team_management',
        'organization_member_management',
        'legacy_teams_management',
    ],
)
def teams_create(org: str, body: OrgsOrgTeamsPostRequest = ...):
    """
    Create a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}/teams/{team_slug}',
    description=""" To delete a team, the authenticated user must be an organization owner or team maintainer.

If you are an organization owner, deleting a parent team will delete all of its child teams as well.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`. """,
    tags=['team_management', 'organization_member_management'],
)
def teams_delete_in_org(org: str, team_slug: str = ...):
    """
    Delete a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/teams/{team_slug}',
    description=""" Gets a team using the team's `slug`. GitHub Enterprise Server generates the `slug` from the team `name`.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`. """,
    tags=[
        'organization_management',
        'team_management',
        'organization_member_management',
        'user_management',
    ],
)
def teams_get_by_name(org: str, team_slug: str = ...):
    """
    Get a team by name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/orgs/{org}/teams/{team_slug}',
    description=""" To edit a team, the authenticated user must either be an organization owner or a team maintainer.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`. """,
    tags=['organization_management', 'team_management', 'team_membership_management'],
)
def teams_update_in_org(
    org: str, team_slug: str = ..., body: OrgsOrgTeamsTeamSlugPatchRequest = None
):
    """
    Update a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/teams/{team_slug}/discussions',
    description=""" List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`. """,
    tags=['discussion_management', 'activity_feed_management', 'team_management'],
)
def teams_list_discussions_in_org(
    org: str,
    team_slug: str = ...,
    direction: Optional[Direction] = 'desc',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
    pinned: Optional[str] = None,
):
    """
    List discussions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/orgs/{org}/teams/{team_slug}/discussions',
    description=""" Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`. """,
    tags=['discussion_management', 'team_management', 'organization_management'],
)
def teams_create_discussion_in_org(
    org: str,
    team_slug: str = ...,
    body: OrgsOrgTeamsTeamSlugDiscussionsPostRequest = ...,
):
    """
    Create a discussion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}',
    description=""" Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`. """,
    tags=['discussion_management'],
)
def teams_delete_discussion_in_org(
    org: str, team_slug: str = ..., discussion_number: int = ...
):
    """
    Delete a discussion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}',
    description=""" Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`. """,
    tags=['discussion_management'],
)
def teams_get_discussion_in_org(
    org: str, team_slug: str = ..., discussion_number: int = ...
):
    """
    Get a discussion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}',
    description=""" Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`. """,
    tags=['discussion_management', 'team_management'],
)
def teams_update_discussion_in_org(
    org: str,
    team_slug: str = ...,
    discussion_number: int = ...,
    body: OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberPatchRequest = None,
):
    """
    Update a discussion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments',
    description=""" List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`. """,
    tags=['discussion_management', 'comment_management'],
)
def teams_list_discussion_comments_in_org(
    org: str,
    team_slug: str = ...,
    discussion_number: int = ...,
    direction: Optional[Direction] = 'desc',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List discussion comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments',
    description=""" Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`. """,
    tags=['discussion_management', 'comment_management'],
)
def teams_create_discussion_comment_in_org(
    org: str,
    team_slug: str = ...,
    discussion_number: int = ...,
    body: OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsPostRequest = ...,
):
    """
    Create a discussion comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}',
    description=""" Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`. """,
    tags=['discussion_management', 'comment_management'],
)
def teams_delete_discussion_comment_in_org(
    org: str,
    team_slug: str = ...,
    discussion_number: int = ...,
    comment_number: int = ...,
):
    """
    Delete a discussion comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}',
    description=""" Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`. """,
    tags=['discussion_management', 'comment_management'],
)
def teams_get_discussion_comment_in_org(
    org: str,
    team_slug: str = ...,
    discussion_number: int = ...,
    comment_number: int = ...,
):
    """
    Get a discussion comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}',
    description=""" Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`. """,
    tags=['discussion_management', 'comment_management'],
)
def teams_update_discussion_comment_in_org(
    org: str,
    team_slug: str = ...,
    discussion_number: int = ...,
    comment_number: int = ...,
    body: OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberPatchRequest = ...,
):
    """
    Update a discussion comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions',
    description=""" List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`. """,
    tags=['discussion_management', 'comment_management', 'team_management'],
)
def reactions_list_for_team_discussion_comment_in_org(
    org: str,
    team_slug: str = ...,
    discussion_number: int = ...,
    comment_number: int = ...,
    content: Optional[Content1] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List reactions for a team discussion comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions',
    description=""" Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`. """,
    tags=['discussion_management', 'comment_management'],
)
def reactions_create_for_team_discussion_comment_in_org(
    org: str,
    team_slug: str = ...,
    discussion_number: int = ...,
    comment_number: int = ...,
    body: OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostRequest = ...,
):
    """
    Create reaction for a team discussion comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}',
    description=""" **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.

Delete a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['discussion_management', 'comment_management', 'legacy_reaction_management'],
)
def reactions_delete_for_team_discussion_comment(
    org: str,
    team_slug: str = ...,
    discussion_number: int = ...,
    comment_number: int = ...,
    reaction_id: int = ...,
):
    """
    Delete team discussion comment reaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions',
    description=""" List the reactions to a [team discussion](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`. """,
    tags=['discussion_management', 'team_management', 'notification_management'],
)
def reactions_list_for_team_discussion_in_org(
    org: str,
    team_slug: str = ...,
    discussion_number: int = ...,
    content: Optional[Content1] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List reactions for a team discussion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions',
    description=""" Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`. """,
    tags=['discussion_management', 'comment_management', 'team_management'],
)
def reactions_create_for_team_discussion_in_org(
    org: str,
    team_slug: str = ...,
    discussion_number: int = ...,
    body: OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberReactionsPostRequest = ...,
):
    """
    Create reaction for a team discussion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}',
    description=""" **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.

Delete a reaction to a [team discussion](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['discussion_management', 'team_management', 'legacy_reaction_management'],
)
def reactions_delete_for_team_discussion(
    org: str, team_slug: str = ..., discussion_number: int = ..., reaction_id: int = ...
):
    """
    Delete team discussion reaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/teams/{team_slug}/members',
    description=""" Team members will include the members of child teams.

To list members in a team, the team must be visible to the authenticated user. """,
    tags=[
        'organization_member_management',
        'team_management',
        'team_membership_management',
    ],
)
def teams_list_members_in_org(
    org: str,
    team_slug: str = ...,
    role: Optional[Role5] = 'all',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List team members
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}/teams/{team_slug}/memberships/{username}',
    description=""" Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.

**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."

**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`. """,
    tags=[
        'organization_member_management',
        'team_management',
        'team_membership_management',
    ],
)
def teams_remove_membership_for_user_in_org(
    org: str, team_slug: str = ..., username: str = ...
):
    """
    Remove team membership for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/teams/{team_slug}/memberships/{username}',
    description=""" Team members will include the members of child teams.

To get a user's membership with a team, the team must be visible to the authenticated user.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.

**Note:**
The response contains the `state` of the membership and the member's `role`.

The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#create-a-team). """,
    tags=[
        'organization_management',
        'organization_member_management',
        'team_management',
        'team_membership_management',
    ],
)
def teams_get_membership_for_user_in_org(
    org: str, team_slug: str = ..., username: str = ...
):
    """
    Get team membership for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/orgs/{org}/teams/{team_slug}/memberships/{username}',
    description=""" Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.

**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."

An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.

If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`. """,
    tags=[
        'organization_management',
        'team_management',
        'team_membership_management',
        'organization_member_management',
    ],
)
def teams_add_or_update_membership_for_user_in_org(
    org: str,
    team_slug: str = ...,
    username: str = ...,
    body: OrgsOrgTeamsTeamSlugMembershipsUsernamePutRequest = None,
):
    """
    Add or update team membership for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/teams/{team_slug}/projects',
    description=""" Lists the organization projects for a team.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`. """,
    tags=['organization_project_management', 'team_management'],
)
def teams_list_projects_in_org(
    org: str,
    team_slug: str = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List team projects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}/teams/{team_slug}/projects/{project_id}',
    description=""" Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`. """,
    tags=['team_management', 'organization_project_management'],
)
def teams_remove_project_in_org(org: str, team_slug: str = ..., project_id: int = ...):
    """
    Remove a project from a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/teams/{team_slug}/projects/{project_id}',
    description=""" Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`. """,
    tags=[
        'organization_management',
        'team_management',
        'organization_member_management',
        'organization_project_management',
    ],
)
def teams_check_permissions_for_project_in_org(
    org: str, team_slug: str = ..., project_id: int = ...
):
    """
    Check team permissions for a project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/orgs/{org}/teams/{team_slug}/projects/{project_id}',
    description=""" Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`. """,
    tags=['team_management', 'organization_project_management'],
)
def teams_add_or_update_project_permissions_in_org(
    org: str,
    team_slug: str = ...,
    project_id: int = ...,
    body: OrgsOrgTeamsTeamSlugProjectsProjectIdPutRequest = None,
):
    """
    Add or update team project permissions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/teams/{team_slug}/repos',
    description=""" Lists a team's repositories visible to the authenticated user.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`. """,
    tags=['organization_management', 'team_management', 'repository_management'],
)
def teams_list_repos_in_org(
    org: str,
    team_slug: str = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List team repositories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}',
    description=""" If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`. """,
    tags=['organization_member_management', 'team_management'],
)
def teams_remove_repo_in_org(
    org: str, team_slug: str = ..., owner: str = ..., repo: str = ...
):
    """
    Remove a repository from a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}',
    description=""" Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.

You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@2.21/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.

If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`. """,
    tags=[
        'organization_member_management',
        'team_management',
        'collaborator_management',
    ],
)
def teams_check_permissions_for_repo_in_org(
    org: str, team_slug: str = ..., owner: str = ..., repo: str = ...
):
    """
    Check team permissions for a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}',
    description=""" To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-verbs)."

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.

For more information about the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". """,
    tags=['organization_management', 'team_management', 'collaborator_management'],
)
def teams_add_or_update_repo_permissions_in_org(
    org: str,
    team_slug: str = ...,
    owner: str = ...,
    repo: str = ...,
    body: OrgsOrgTeamsTeamSlugReposOwnerRepoPutRequest = None,
):
    """
    Add or update team repository permissions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/teams/{team_slug}/teams',
    description=""" Lists the child teams of the team specified by `{team_slug}`.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`. """,
    tags=[
        'organization_management',
        'team_management',
        'organization_member_management',
    ],
)
def teams_list_child_in_org(
    org: str,
    team_slug: str = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List child teams
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/projects/columns/cards/{card_id}', tags=['project_card_management'])
def projects_delete_card(card_id: int):
    """
    Delete a project card
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/columns/cards/{card_id}',
    tags=['project_card_management', 'project_management'],
)
def projects_get_card(card_id: int):
    """
    Get a project card
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/projects/columns/cards/{card_id}', tags=['project_card_management'])
def projects_update_card(
    card_id: int, body: ProjectsColumnsCardsCardIdPatchRequest = None
):
    """
    Update an existing project card
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/projects/columns/cards/{card_id}/moves',
    tags=['project_card_management', 'organization_project_management'],
)
def projects_move_card(
    card_id: int, body: ProjectsColumnsCardsCardIdMovesPostRequest = ...
):
    """
    Move a project card
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/projects/columns/{column_id}',
    tags=['project_column_management', 'project_management'],
)
def projects_delete_column(column_id: int):
    """
    Delete a project column
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/projects/columns/{column_id}', tags=['project_column_management'])
def projects_get_column(column_id: int):
    """
    Get a project column
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/projects/columns/{column_id}',
    tags=['project_column_management', 'project_management'],
)
def projects_update_column(
    column_id: int, body: ProjectsColumnsColumnIdPatchRequest = ...
):
    """
    Update an existing project column
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/columns/{column_id}/cards',
    tags=[
        'project_management',
        'project_card_management',
        'organization_project_management',
    ],
)
def projects_list_cards(
    column_id: int,
    archived_state: Optional[ArchivedState] = 'not_archived',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List project cards
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/projects/columns/{column_id}/cards',
    tags=['project_card_management', 'project_management'],
)
def projects_create_card(
    column_id: int, body: ProjectsColumnsColumnIdCardsPostRequest = ...
):
    """
    Create a project card
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/projects/columns/{column_id}/moves',
    tags=[
        'project_column_management',
        'organization_project_management',
        'project_management',
    ],
)
def projects_move_column(
    column_id: int, body: ProjectsColumnsColumnIdMovesPostRequest = ...
):
    """
    Move a project column
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/projects/{project_id}',
    description=""" Deletes a project board. Returns a `404 Not Found` status if projects are disabled. """,
    tags=['organization_project_management', 'project_management'],
)
def projects_delete(project_id: int):
    """
    Delete a project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/{project_id}',
    description=""" Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. """,
    tags=[
        'organization_project_management',
        'project_management',
        'repository_management',
    ],
)
def projects_get(project_id: int):
    """
    Get a project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/projects/{project_id}',
    description=""" Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. """,
    tags=['organization_project_management', 'project_management'],
)
def projects_update(project_id: int, body: ProjectsProjectIdPatchRequest = None):
    """
    Update a project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/{project_id}/collaborators',
    description=""" Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators. """,
    tags=[
        'organization_membership_management',
        'project_collaboration_management',
        'collaborator_management',
    ],
)
def projects_list_collaborators(
    project_id: int,
    affiliation: Optional[Affiliation] = 'all',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List project collaborators
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/projects/{project_id}/collaborators/{username}',
    description=""" Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator. """,
    tags=[
        'organization_member_management',
        'outside_collaborator_management',
        'collaborator_management',
    ],
)
def projects_remove_collaborator(project_id: int, username: str = ...):
    """
    Remove user as a collaborator
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/projects/{project_id}/collaborators/{username}',
    description=""" Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator. """,
    tags=['project_collaboration_management', 'organization_member_management'],
)
def projects_add_collaborator(
    project_id: int,
    username: str = ...,
    body: ProjectsProjectIdCollaboratorsUsernamePutRequest = None,
):
    """
    Add project collaborator
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/{project_id}/collaborators/{username}/permission',
    description=""" Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level. """,
    tags=['project_management', 'user_management', 'organization_project_management'],
)
def projects_get_permission_for_user(project_id: int, username: str = ...):
    """
    Get project permission for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/{project_id}/columns',
    tags=[
        'project_management',
        'project_column_management',
        'organization_project_management',
    ],
)
def projects_list_columns(
    project_id: int, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List project columns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/projects/{project_id}/columns',
    tags=['project_management', 'project_column_management'],
)
def projects_create_column(
    project_id: int, body: ProjectsProjectIdColumnsPostRequest = ...
):
    """
    Create a project column
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rate_limit',
    description=""" **Note:** Accessing this endpoint does not count against your REST API rate limit.

**Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object. """,
    tags=['rate_limiting_management'],
)
def rate_limit_get():
    """
    Get rate limit status for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/reactions/{reaction_id}',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).

OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#discussion-comments). """,
    tags=['legacy_reaction_management'],
)
def reactions_delete_legacy(reaction_id: int):
    """
    Delete a reaction (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}',
    description=""" Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.

If an organization owner has configured the organization to prevent members from deleting organization-owned
repositories, you will get a `403 Forbidden` response. """,
    tags=[
        'repository_management',
        'repository_creation_management',
        'public_repository_management',
    ],
)
def repos_delete(owner: str, repo: str = ...):
    """
    Delete a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}',
    description=""" When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.

The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network. """,
    tags=['repository_management'],
)
def repos_get(owner: str, repo: str = ...):
    """
    Get a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}',
    description=""" **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#replace-all-repository-topics) endpoint. """,
    tags=['repository_management'],
)
def repos_update(owner: str, repo: str = ..., body: ReposOwnerRepoPatchRequest = None):
    """
    Update a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/assignees',
    description=""" Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository. """,
    tags=['user_management', 'issue_assignee_management'],
)
def issues_list_assignees(
    owner: str, repo: str = ..., per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List assignees
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/assignees/{assignee}',
    description=""" Checks if a user has permission to be assigned to an issue in this repository.

If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.

Otherwise a `404` status code is returned. """,
    tags=['user_management', 'issue_assignee_management'],
)
def issues_check_user_can_be_assigned(owner: str, repo: str = ..., assignee: str = ...):
    """
    Check if a user can be assigned
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/branches',
    tags=['branch_management', 'repository_management'],
)
def repos_list_branches(
    owner: str,
    repo: str = ...,
    protected: Optional[bool] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List branches
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/branches/{branch}',
    tags=['branch_management', 'repository_management'],
)
def repos_get_branch(owner: str, repo: str = ..., branch: str = ...):
    """
    Get a branch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/branches/{branch}/protection',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. """,
    tags=[
        'branch_protection_management',
        'branch_access_management',
        'repository_management',
    ],
)
def repos_delete_branch_protection(owner: str, repo: str = ..., branch: str = ...):
    """
    Delete branch protection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/branches/{branch}/protection',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. """,
    tags=['branch_protection_management', 'branch_access_management'],
)
def repos_get_branch_protection(owner: str, repo: str = ..., branch: str = ...):
    """
    Get branch protection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/branches/{branch}/protection',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Protecting a branch requires admin or owner permissions to the repository.

**Note**: Passing new arrays of `users` and `teams` replaces their previous values.

**Note**: The list of users, apps, and teams in total is limited to 100 items. """,
    tags=['branch_protection_management', 'repository_management', 'branch_management'],
)
def repos_update_branch_protection(
    owner: str,
    repo: str = ...,
    branch: str = ...,
    body: ReposOwnerRepoBranchesBranchProtectionPutRequest = ...,
):
    """
    Update branch protection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled. """,
    tags=['branch_protection_management', 'repository_management'],
)
def repos_delete_admin_branch_protection(
    owner: str, repo: str = ..., branch: str = ...
):
    """
    Delete admin branch protection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. """,
    tags=['branch_protection_management'],
)
def repos_get_admin_branch_protection(owner: str, repo: str = ..., branch: str = ...):
    """
    Get admin branch protection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled. """,
    tags=[
        'branch_protection_management',
        'branch_access_management',
        'repository_management',
    ],
)
def repos_set_admin_branch_protection(owner: str, repo: str = ..., branch: str = ...):
    """
    Set admin branch protection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. """,
    tags=['branch_protection_management', 'pull_request_review_management'],
)
def repos_delete_pull_request_review_protection(
    owner: str, repo: str = ..., branch: str = ...
):
    """
    Delete pull request review protection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. """,
    tags=['branch_protection_management', 'pull_request_review_management'],
)
def repos_get_pull_request_review_protection(
    owner: str, repo: str = ..., branch: str = ...
):
    """
    Get pull request review protection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.

**Note**: Passing new arrays of `users` and `teams` replaces their previous values. """,
    tags=['branch_protection_management', 'pull_request_review_management'],
)
def repos_update_pull_request_review_protection(
    owner: str,
    repo: str = ...,
    branch: str = ...,
    body: ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchRequest = None,
):
    """
    Update pull request review protection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits. """,
    tags=['branch_protection_management', 'repository_management'],
)
def repos_delete_commit_signature_protection(
    owner: str, repo: str = ..., branch: str = ...
):
    """
    Delete commit signature protection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.

**Note**: You must enable branch protection to require signed commits. """,
    tags=[
        'branch_protection_management',
        'branch_access_management',
        'repository_management',
    ],
)
def repos_get_commit_signature_protection(
    owner: str, repo: str = ..., branch: str = ...
):
    """
    Get commit signature protection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits. """,
    tags=[
        'branch_management',
        'branch_protection_management',
        'access_restriction_management',
        'branch_access_management',
    ],
)
def repos_create_commit_signature_protection(
    owner: str, repo: str = ..., branch: str = ...
):
    """
    Create commit signature protection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. """,
    tags=['branch_protection_management', 'access_restriction_management'],
)
def repos_remove_status_check_protection(
    owner: str, repo: str = ..., branch: str = ...
):
    """
    Remove status check protection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. """,
    tags=['branch_protection_management', 'checks_management'],
)
def repos_get_status_checks_protection(owner: str, repo: str = ..., branch: str = ...):
    """
    Get status checks protection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled. """,
    tags=['branch_protection_management', 'checks_management'],
)
def repos_update_status_check_protection(
    owner: str,
    repo: str = ...,
    branch: str = ...,
    body: ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchRequest = None,
):
    """
    Update status check protection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. """,
    tags=['branch_protection_management', 'checks_management'],
)
def repos_remove_status_check_contexts(
    owner: str,
    repo: str = ...,
    branch: str = ...,
    body: ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteRequest = None,
):
    """
    Remove status check contexts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. """,
    tags=['checks_management'],
)
def repos_get_all_status_check_contexts(owner: str, repo: str = ..., branch: str = ...):
    """
    Get all status check contexts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. """,
    tags=['branch_protection_management', 'checks_management'],
)
def repos_add_status_check_contexts(
    owner: str,
    repo: str = ...,
    branch: str = ...,
    body: ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostRequest = None,
):
    """
    Add status check contexts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. """,
    tags=['branch_protection_management', 'checks_management'],
)
def repos_set_status_check_contexts(
    owner: str,
    repo: str = ...,
    branch: str = ...,
    body: ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutRequest = None,
):
    """
    Set status check contexts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Disables the ability to restrict who can push to this branch. """,
    tags=['access_restriction_management'],
)
def repos_delete_access_restrictions(owner: str, repo: str = ..., branch: str = ...):
    """
    Delete access restrictions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists who has access to this protected branch.

**Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories. """,
    tags=['access_restriction_management'],
)
def repos_get_access_restrictions(owner: str, repo: str = ..., branch: str = ...):
    """
    Get access restrictions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.

| Type    | Description                                                                                                                                                |
| ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. | """,
    tags=['app_management', 'apps_management', 'access_restriction_management'],
)
def repos_remove_app_access_restrictions(
    owner: str,
    repo: str = ...,
    branch: str = ...,
    body: ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteRequest = None,
):
    """
    Remove app access restrictions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch. """,
    tags=['app_management', 'apps_management', 'branch_access_management'],
)
def repos_get_apps_with_access_to_protected_branch(
    owner: str, repo: str = ..., branch: str = ...
):
    """
    Get apps with access to the protected branch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.

| Type    | Description                                                                                                                                                |
| ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. | """,
    tags=[
        'app_management',
        'access_restriction_management',
        'branch_protection_management',
    ],
)
def repos_add_app_access_restrictions(
    owner: str,
    repo: str = ...,
    branch: str = ...,
    body: ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostRequest = None,
):
    """
    Add app access restrictions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.

| Type    | Description                                                                                                                                                |
| ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. | """,
    tags=[
        'access_restriction_management',
        'app_management',
        'apps_management',
        'branch_protection_management',
    ],
)
def repos_set_app_access_restrictions(
    owner: str,
    repo: str = ...,
    branch: str = ...,
    body: ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutRequest = None,
):
    """
    Set app access restrictions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Removes the ability of a team to push to this branch. You can also remove push access for child teams.

| Type    | Description                                                                                                                                         |
| ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
| `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. | """,
    tags=[
        'branch_protection_management',
        'access_restriction_management',
        'branch_access_management',
        'team_management',
    ],
)
def repos_remove_team_access_restrictions(
    owner: str,
    repo: str = ...,
    branch: str = ...,
    body: ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteRequest = None,
):
    """
    Remove team access restrictions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists the teams who have push access to this branch. The list includes child teams. """,
    tags=['branch_access_management', 'team_management', 'organization_management'],
)
def repos_get_teams_with_access_to_protected_branch(
    owner: str, repo: str = ..., branch: str = ...
):
    """
    Get teams with access to the protected branch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Grants the specified teams push access for this branch. You can also give push access to child teams.

| Type    | Description                                                                                                                                |
| ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
| `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. | """,
    tags=[
        'access_restriction_management',
        'branch_protection_management',
        'team_management',
    ],
)
def repos_add_team_access_restrictions(
    owner: str,
    repo: str = ...,
    branch: str = ...,
    body: ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostRequest = None,
):
    """
    Add team access restrictions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.

| Type    | Description                                                                                                                                |
| ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
| `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. | """,
    tags=[
        'branch_protection_management',
        'access_restriction_management',
        'branch_access_management',
        'team_management',
    ],
)
def repos_set_team_access_restrictions(
    owner: str,
    repo: str = ...,
    branch: str = ...,
    body: ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutRequest = None,
):
    """
    Set team access restrictions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Removes the ability of a user to push to this branch.

| Type    | Description                                                                                                                                   |
| ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
| `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. | """,
    tags=['access_restriction_management', 'branch_access_management'],
)
def repos_remove_user_access_restrictions(
    owner: str,
    repo: str = ...,
    branch: str = ...,
    body: ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteRequest = None,
):
    """
    Remove user access restrictions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists the people who have push access to this branch. """,
    tags=['branch_access_management', 'repository_management', 'user_management'],
)
def repos_get_users_with_access_to_protected_branch(
    owner: str, repo: str = ..., branch: str = ...
):
    """
    Get users with access to the protected branch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Grants the specified people push access for this branch.

| Type    | Description                                                                                                                   |
| ------- | ----------------------------------------------------------------------------------------------------------------------------- |
| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. | """,
    tags=[
        'access_restriction_management',
        'branch_protection_management',
        'branch_access_management',
    ],
)
def repos_add_user_access_restrictions(
    owner: str,
    repo: str = ...,
    branch: str = ...,
    body: ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostRequest = None,
):
    """
    Add user access restrictions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.

| Type    | Description                                                                                                                   |
| ------- | ----------------------------------------------------------------------------------------------------------------------------- |
| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. | """,
    tags=[
        'access_restriction_management',
        'branch_protection_management',
        'branch_access_management',
    ],
)
def repos_set_user_access_restrictions(
    owner: str,
    repo: str = ...,
    branch: str = ...,
    body: ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutRequest = None,
):
    """
    Set user access restrictions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/check-runs',
    description=""" **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.

Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.

In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs. """,
    tags=['checks_management'],
)
def checks_create(
    owner: str, repo: str = ..., body: ReposOwnerRepoCheckRunsPostRequest = ...
):
    """
    Create a check run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/check-runs/{check_run_id}',
    description=""" **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.

Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository. """,
    tags=['checks_management'],
)
def checks_get(owner: str, repo: str = ..., check_run_id: int = ...):
    """
    Get a check run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/check-runs/{check_run_id}',
    description=""" **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.

Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs. """,
    tags=['checks_management'],
)
def checks_update(
    owner: str,
    repo: str = ...,
    check_run_id: int = ...,
    body: ReposOwnerRepoCheckRunsCheckRunIdPatchRequest = None,
):
    """
    Update a check run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations',
    description=""" Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository. """,
    tags=['checks_management', 'repository_management'],
)
def checks_list_annotations(
    owner: str,
    repo: str = ...,
    check_run_id: int = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List check run annotations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/check-suites',
    description=""" **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.

By default, check suites are automatically created when you create a [check run](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites. """,
    tags=['checks_management'],
)
def checks_create_suite(
    owner: str, repo: str = ..., body: ReposOwnerRepoCheckSuitesPostRequest = None
):
    """
    Create a check suite
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/check-suites/preferences',
    description=""" Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/enterprise-server@2.21/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites. """,
    tags=['repository_management', 'checks_management'],
)
def checks_set_suites_preferences(
    owner: str,
    repo: str = ...,
    body: ReposOwnerRepoCheckSuitesPreferencesPatchRequest = ...,
):
    """
    Update repository preferences for check suites
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/check-suites/{check_suite_id}',
    description=""" **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.

Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository. """,
    tags=['checks_management', 'repository_management'],
)
def checks_get_suite(owner: str, repo: str = ..., check_suite_id: int = ...):
    """
    Get a check suite
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs',
    description=""" **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.

Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository. """,
    tags=['checks_management'],
)
def checks_list_for_suite(
    owner: str,
    repo: str = ...,
    check_suite_id: int = ...,
    check_name: Optional[str] = None,
    status: Optional[Status10] = None,
    filter: Optional[Filter8] = 'latest',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List check runs in a check suite
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest',
    description=""" Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.

To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository. """,
    tags=['checks_management'],
)
def checks_rerequest_suite(owner: str, repo: str = ..., check_suite_id: int = ...):
    """
    Rerequest a check suite
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/collaborators',
    description=""" For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.

Team members will include the members of child teams. """,
    tags=['collaborator_management', 'repository_management'],
)
def repos_list_collaborators(
    owner: str,
    repo: str = ...,
    affiliation: Optional[Affiliation] = 'all',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List repository collaborators
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/collaborators/{username}',
    tags=[
        'collaborator_management',
        'outside_collaborator_management',
        'organization_member_management',
    ],
)
def repos_remove_collaborator(owner: str, repo: str = ..., username: str = ...):
    """
    Remove a repository collaborator
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/collaborators/{username}',
    description=""" For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.

Team members will include the members of child teams. """,
    tags=[
        'collaborator_management',
        'organization_member_management',
        'outside_collaborator_management',
    ],
)
def repos_check_collaborator(owner: str, repo: str = ..., username: str = ...):
    """
    Check if a user is a repository collaborator
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/collaborators/{username}',
    description=""" This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.

For more information the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".

Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-verbs)."

The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#invitations).

**Rate limits**

You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository. """,
    tags=[
        'collaborator_management',
        'organization_member_management',
        'outside_collaborator_management',
    ],
)
def repos_add_collaborator(
    owner: str,
    repo: str = ...,
    username: str = ...,
    body: ReposOwnerRepoCollaboratorsUsernamePutRequest = None,
):
    """
    Add a repository collaborator
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/collaborators/{username}/permission',
    description=""" Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`. """,
    tags=['user_management', 'collaborator_management', 'repository_management'],
)
def repos_get_collaborator_permission_level(
    owner: str, repo: str = ..., username: str = ...
):
    """
    Get repository permissions for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/comments',
    description=""" Commit Comments use [these custom media types](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/enterprise-server@2.21/rest/overview/media-types/).

Comments are ordered by ascending ID. """,
    tags=['commit_comment_management', 'commit_tracking_management'],
)
def repos_list_commit_comments_for_repo(
    owner: str, repo: str = ..., per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List commit comments for a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/comments/{comment_id}',
    tags=['commit_comment_management', 'comment_management'],
)
def repos_delete_commit_comment(owner: str, repo: str = ..., comment_id: int = ...):
    """
    Delete a commit comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/comments/{comment_id}', tags=['commit_comment_management']
)
def repos_get_commit_comment(owner: str, repo: str = ..., comment_id: int = ...):
    """
    Get a commit comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/comments/{comment_id}', tags=['commit_comment_management']
)
def repos_update_commit_comment(
    owner: str,
    repo: str = ...,
    comment_id: int = ...,
    body: ReposOwnerRepoCommentsCommentIdPatchRequest = ...,
):
    """
    Update a commit comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/comments/{comment_id}/reactions',
    description=""" List the reactions to a [commit comment](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#comments). """,
    tags=[
        'commit_comment_management',
        'issue_comment_reaction_management',
        'discussion_management',
    ],
)
def reactions_list_for_commit_comment(
    owner: str,
    repo: str = ...,
    comment_id: int = ...,
    content: Optional[Content1] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List reactions for a commit comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/comments/{comment_id}/reactions',
    description=""" Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment. """,
    tags=['commit_comment_management', 'comment_management'],
)
def reactions_create_for_commit_comment(
    owner: str,
    repo: str = ...,
    comment_id: int = ...,
    body: ReposOwnerRepoCommentsCommentIdReactionsPostRequest = ...,
):
    """
    Create reaction for a commit comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}',
    description=""" **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.

Delete a reaction to a [commit comment](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#comments). """,
    tags=[
        'comment_management',
        'commit_comment_management',
        'issue_comment_reaction_management',
        'issue_reaction_management',
        'legacy_reaction_management',
    ],
)
def reactions_delete_for_commit_comment(
    owner: str, repo: str = ..., comment_id: int = ..., reaction_id: int = ...
):
    """
    Delete a commit comment reaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/commits',
    description=""" **Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. | """,
    tags=[
        'commit_tracking_management',
        'repository_management',
        'repository_activity_management',
    ],
)
def repos_list_commits(
    owner: str,
    repo: str = ...,
    sha: Optional[str] = None,
    path: Optional[str] = None,
    author: Optional[str] = None,
    since: Optional[datetime] = None,
    until: Optional[datetime] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List commits
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head',
    description=""" Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch. """,
    tags=['branch_management', 'repository_management', 'commit_tracking_management'],
)
def repos_list_branches_for_head_commit(
    owner: str, repo: str = ..., commit_sha: str = ...
):
    """
    List branches for HEAD commit
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/commits/{commit_sha}/comments',
    description=""" Use the `:commit_sha` to specify the commit that will have its comments listed. """,
    tags=['commit_comment_management', 'commit_tracking_management'],
)
def repos_list_comments_for_commit(
    owner: str,
    repo: str = ...,
    commit_sha: str = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List commit comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/commits/{commit_sha}/comments',
    description=""" Create a comment for a commit using its `:commit_sha`.

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. """,
    tags=['commit_comment_management'],
)
def repos_create_commit_comment(
    owner: str,
    repo: str = ...,
    commit_sha: str = ...,
    body: ReposOwnerRepoCommitsCommitShaCommentsPostRequest = ...,
):
    """
    Create a commit comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/commits/{commit_sha}/pulls',
    description=""" Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests) endpoint. """,
    tags=[
        'pull_request_management',
        'commit_tracking_management',
        'repository_management',
    ],
)
def repos_list_pull_requests_associated_with_commit(
    owner: str,
    repo: str = ...,
    commit_sha: str = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List pull requests associated with a commit
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/commits/{ref}',
    description=""" Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.

**Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.

You can pass the appropriate [media type](https://docs.github.com/enterprise-server@2.21/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.

To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/enterprise-server@2.21/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.

**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. | """,
    tags=['repository_management', 'commit_tracking_management'],
)
def repos_get_commit(
    owner: str,
    repo: str = ...,
    page: Optional[int] = 1,
    per_page: Optional[int] = 30,
    ref: str = ...,
):
    """
    Get a commit
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/commits/{ref}/check-runs',
    description=""" **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.

Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository. """,
    tags=['checks_management', 'repository_management'],
)
def checks_list_for_ref(
    owner: str,
    repo: str = ...,
    ref: str = ...,
    check_name: Optional[str] = None,
    status: Optional[Status10] = None,
    filter: Optional[Filter8] = 'latest',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
    app_id: Optional[int] = None,
):
    """
    List check runs for a Git reference
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/commits/{ref}/check-suites',
    description=""" **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.

Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository. """,
    tags=['checks_management', 'repository_management'],
)
def checks_list_suites_for_ref(
    owner: str,
    repo: str = ...,
    ref: str = ...,
    app_id: Optional[int] = None,
    check_name: Optional[str] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List check suites for a Git reference
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/commits/{ref}/status',
    description=""" Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.

The most recent status for each context is returned, up to 100. This field [paginates](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#pagination) if there are over 100 contexts.

Additionally, a combined `state` is returned. The `state` is one of:

*   **failure** if any of the contexts report as `error` or `failure`
*   **pending** if there are no statuses or a context is `pending`
*   **success** if the latest status for all contexts is `success` """,
    tags=['repository_management', 'commit_status_management', 'checks_management'],
)
def repos_get_combined_status_for_ref(
    owner: str,
    repo: str = ...,
    ref: str = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    Get the combined status for a specific reference
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/commits/{ref}/statuses',
    description=""" Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.

This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`. """,
    tags=['commit_status_management', 'repository_management'],
)
def repos_list_commit_statuses_for_ref(
    owner: str,
    repo: str = ...,
    ref: str = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List commit statuses for a reference
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/compare/{basehead}',
    description=""" The `basehead` param is comprised of two parts: `base` and `head`. Both must be branch names in `repo`. To compare branches across other repositories in the same network as `repo`, use the format `<USERNAME>:branch`.

The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/enterprise-server@2.21/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.

The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.

**Working with large comparisons**

The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#list-commits) to enumerate all commits in the range.

For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long
to generate. You can typically resolve this error by using a smaller commit range.

**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. | """,
    tags=['commit_tracking_management', 'repository_management'],
)
def repos_compare_commits(owner: str, repo: str = ..., basehead: str = ...):
    """
    Compare two commits
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/content_references/{content_reference_id}/attachments',
    description=""" Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` and `repository` `full_name` of the content reference from the [`content_reference` event](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads/#content_reference) to create an attachment.

The app must create a content attachment within six hours of the content reference URL being posted. See "[Using content attachments](https://docs.github.com/enterprise-server@2.21/apps/using-content-attachments/)" for details about content attachments.

You must use an [installation access token](https://docs.github.com/enterprise-server@2.21/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint. """,
    tags=['repository_management', 'file_content_management'],
)
def apps_create_content_attachment(
    owner: str,
    repo: str = ...,
    content_reference_id: int = ...,
    body: ReposOwnerRepoContentReferencesContentReferenceIdAttachmentsPostRequest = ...,
):
    """
    Create a content attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/contents/{path}',
    description=""" Deletes a file in a repository.

You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.

The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.

You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code. """,
    tags=['file_content_management', 'repository_management'],
)
def repos_delete_file(
    owner: str,
    repo: str = ...,
    path: str = ...,
    body: ReposOwnerRepoContentsPathDeleteRequest = ...,
):
    """
    Delete a file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/contents/{path}',
    description=""" Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
`:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories. 

Files and symlinks support [a custom media type](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#custom-media-types) for
retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
type](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
object format.

**Note**:
*   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/enterprise-server@2.21/rest/reference/git#trees).
*   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
API](https://docs.github.com/enterprise-server@2.21/rest/reference/git#get-a-tree).
*   This API supports files up to 1 megabyte in size.

#### If the content is a directory
The response will be an array of objects, one object for each item in the directory.
When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
_should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
In the next major version of the API, the type will be returned as "submodule".

#### If the content is a symlink 
If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object 
describing the symlink itself.

#### If the content is a submodule
The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
the submodule at that specific commit.

If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
github.com URLs (`html_url` and `_links["html"]`) will have null values. """,
    tags=['repository_management', 'file_content_management'],
)
def repos_get_content(
    owner: str, repo: str = ..., path: str = ..., ref: Optional[str] = None
):
    """
    Get repository content
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/contents/{path}',
    description=""" Creates a new file or replaces an existing file in a repository. """,
    tags=['file_content_management'],
)
def repos_create_or_update_file_contents(
    owner: str,
    repo: str = ...,
    path: str = ...,
    body: ReposOwnerRepoContentsPathPutRequest = ...,
):
    """
    Create or update file contents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/contributors',
    description=""" Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.

GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information. """,
    tags=[
        'repository_management',
        'collaborator_management',
        'repository_activity_management',
    ],
)
def repos_list_contributors(
    owner: str,
    repo: str = ...,
    anon: Optional[str] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List repository contributors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/deployments',
    description=""" Simple filtering of deployments is available via query parameters: """,
    tags=['deployment_management', 'repository_management'],
)
def repos_list_deployments(
    owner: str,
    repo: str = ...,
    sha: Optional[str] = 'none',
    ref: Optional[str] = 'none',
    task: Optional[str] = 'none',
    environment: Optional[str] = 'none',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List deployments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/deployments',
    description=""" Deployments offer a few configurable parameters with certain defaults.

The `ref` parameter can be any named branch, tag, or SHA. At GitHub Enterprise Server we often deploy branches and verify them
before we merge a pull request.

The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
makes it easier to track which environments have requested deployments. The default environment is `production`.

The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
return a failure response.

By default, [commit statuses](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#statuses) for every submitted context must be in a `success`
state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
not require any contexts or create any commit statuses, the deployment will always succeed.

The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
field that will be passed on when a deployment event is dispatched.

The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
application with debugging enabled.

Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.

#### Merged branch response
You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
a deployment. This auto-merge happens when:
*   Auto-merge option is enabled in the repository
*   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
*   There are no merge conflicts

If there are no new commits in the base branch, a new request to create a deployment should give a successful
response.

#### Merge conflict response
This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.

#### Failed commit status checks
This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`. """,
    tags=['deployment_management'],
)
def repos_create_deployment(
    owner: str, repo: str = ..., body: ReposOwnerRepoDeploymentsPostRequest = ...
):
    """
    Create a deployment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/deployments/{deployment_id}',
    description=""" To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.

To set a deployment as inactive, you must:

*   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
*   Mark the active deployment as inactive by adding any non-successful deployment status.

For more information, see "[Create a deployment](https://docs.github.com/enterprise-server@2.21/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#create-a-deployment-status)." """,
    tags=['deployment_management'],
)
def repos_delete_deployment(owner: str, repo: str = ..., deployment_id: int = ...):
    """
    Delete a deployment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/deployments/{deployment_id}',
    tags=['deployment_management', 'repository_management'],
)
def repos_get_deployment(owner: str, repo: str = ..., deployment_id: int = ...):
    """
    Get a deployment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses',
    description=""" Users with pull access can view deployment statuses for a deployment: """,
    tags=['deployment_management'],
)
def repos_list_deployment_statuses(
    owner: str,
    repo: str = ...,
    deployment_id: int = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List deployment statuses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses',
    description=""" Users with `push` access can create deployment statuses for a given deployment.

GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope. """,
    tags=['deployment_management'],
)
def repos_create_deployment_status(
    owner: str,
    repo: str = ...,
    deployment_id: int = ...,
    body: ReposOwnerRepoDeploymentsDeploymentIdStatusesPostRequest = ...,
):
    """
    Create a deployment status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}',
    description=""" Users with pull access can view a deployment status for a deployment: """,
    tags=['deployment_management', 'repository_management'],
)
def repos_get_deployment_status(
    owner: str, repo: str = ..., deployment_id: int = ..., status_id: int = ...
):
    """
    Get a deployment status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/dispatches',
    description=""" You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub Enterprise Server to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads/#repository_dispatch)."

The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.

This endpoint requires write access to the repository by providing either:

  - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
  - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.

This input example shows how you can use the `client_payload` as a test to debug your workflow. """,
    tags=['repository_event_management', 'repository_management'],
)
def repos_create_dispatch_event(
    owner: str, repo: str = ..., body: ReposOwnerRepoDispatchesPostRequest = ...
):
    """
    Create a repository dispatch event
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/events',
    tags=['repository_event_management', 'activity_feed_management'],
)
def activity_list_repo_events(
    owner: str, repo: str = ..., per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List repository events
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/forks', tags=['fork_management', 'repository_management']
)
def repos_list_forks(
    owner: str,
    repo: str = ...,
    sort: Optional[Sort14] = 'newest',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List forks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/forks',
    description=""" Create a fork for the authenticated user.

**Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags=dotcom-rest-api). """,
    tags=['fork_management', 'repository_management'],
)
def repos_create_fork(
    owner: str, repo: str = ..., body: ReposOwnerRepoForksPostRequest = None
):
    """
    Create a fork
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/git/blobs',
    tags=[
        'file_content_management',
        'repository_management',
        'repository_creation_management',
    ],
)
def git_create_blob(
    owner: str, repo: str = ..., body: ReposOwnerRepoGitBlobsPostRequest = ...
):
    """
    Create a blob
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/git/blobs/{file_sha}',
    description=""" The `content` in the response will always be Base64 encoded.

_Note_: This API supports blobs up to 100 megabytes in size. """,
    tags=['file_content_management', 'repository_management'],
)
def git_get_blob(owner: str, repo: str = ..., file_sha: str = ...):
    """
    Get a blob
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/git/commits',
    description=""" Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).

**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. | """,
    tags=[
        'repository_management',
        'commit_tracking_management',
        'commit_status_management',
    ],
)
def git_create_commit(
    owner: str, repo: str = ..., body: ReposOwnerRepoGitCommitsPostRequest = ...
):
    """
    Create a commit
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/git/commits/{commit_sha}',
    description=""" Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).

**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. | """,
    tags=['commit_tracking_management', 'repository_management'],
)
def git_get_commit(owner: str, repo: str = ..., commit_sha: str = ...):
    """
    Get a commit
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/git/matching-refs/{ref}',
    description=""" Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.

When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.

**Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@2.21/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".

If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`. """,
    tags=['repository_management', 'git_reference_management'],
)
def git_list_matching_refs(
    owner: str,
    repo: str = ...,
    ref: str = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List matching references
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/git/ref/{ref}',
    description=""" Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.

**Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@2.21/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)". """,
    tags=['git_reference_management', 'repository_management'],
)
def git_get_ref(owner: str, repo: str = ..., ref: str = ...):
    """
    Get a reference
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/git/refs',
    description=""" Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches. """,
    tags=['git_reference_management', 'repository_management'],
)
def git_create_ref(
    owner: str, repo: str = ..., body: ReposOwnerRepoGitRefsPostRequest = ...
):
    """
    Create a reference
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/repos/{owner}/{repo}/git/refs/{ref}', tags=['git_reference_management'])
def git_delete_ref(owner: str, repo: str = ..., ref: str = ...):
    """
    Delete a reference
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/git/refs/{ref}',
    tags=['git_reference_management', 'repository_management'],
)
def git_update_ref(
    owner: str,
    repo: str = ...,
    ref: str = ...,
    body: ReposOwnerRepoGitRefsRefPatchRequest = ...,
):
    """
    Update a reference
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/git/tags',
    description=""" Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/enterprise-server@2.21/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/enterprise-server@2.21/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.

**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. | """,
    tags=['git_tag_management', 'repository_tag_management'],
)
def git_create_tag(
    owner: str, repo: str = ..., body: ReposOwnerRepoGitTagsPostRequest = ...
):
    """
    Create a tag object
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/git/tags/{tag_sha}',
    description=""" **Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. | """,
    tags=['git_tag_management', 'repository_management'],
)
def git_get_tag(owner: str, repo: str = ..., tag_sha: str = ...):
    """
    Get a tag
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/git/trees',
    description=""" The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.

If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/enterprise-server@2.21/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/enterprise-server@2.21/rest/reference/git#update-a-reference)." """,
    tags=['git_tree_management', 'repository_management'],
)
def git_create_tree(
    owner: str, repo: str = ..., body: ReposOwnerRepoGitTreesPostRequest = ...
):
    """
    Create a tree
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/git/trees/{tree_sha}',
    description=""" Returns a single tree using the SHA1 value for that tree.

If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time. """,
    tags=['git_tree_management', 'repository_management'],
)
def git_get_tree(
    owner: str, repo: str = ..., tree_sha: str = ..., recursive: Optional[str] = None
):
    """
    Get a tree
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/hooks',
    tags=[
        'webhook_management',
        'repository_management',
        'orgs_management',
        'repository_activity_management',
    ],
)
def repos_list_webhooks(
    owner: str, repo: str = ..., per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List repository webhooks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/hooks',
    description=""" Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
share the same `config` as long as those webhooks do not have any `events` that overlap. """,
    tags=['webhook_management', 'orgs_management', 'repository_management'],
)
def repos_create_webhook(
    owner: str, repo: str = ..., body: ReposOwnerRepoHooksPostRequest = None
):
    """
    Create a repository webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/hooks/{hook_id}',
    tags=['webhook_management', 'repository_management'],
)
def repos_delete_webhook(owner: str, repo: str = ..., hook_id: int = ...):
    """
    Delete a repository webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/hooks/{hook_id}',
    description=""" Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)." """,
    tags=['webhook_management', 'orgs_management', 'repository_management'],
)
def repos_get_webhook(owner: str, repo: str = ..., hook_id: int = ...):
    """
    Get a repository webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/hooks/{hook_id}',
    description=""" Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)." """,
    tags=['webhook_management', 'orgs_management'],
)
def repos_update_webhook(
    owner: str,
    repo: str = ...,
    hook_id: int = ...,
    body: ReposOwnerRepoHooksHookIdPatchRequest = None,
):
    """
    Update a repository webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/hooks/{hook_id}/pings',
    description=""" This will trigger a [ping event](https://docs.github.com/enterprise-server@2.21/webhooks/#ping-event) to be sent to the hook. """,
    tags=['webhook_management', 'repository_management'],
)
def repos_ping_webhook(owner: str, repo: str = ..., hook_id: int = ...):
    """
    Ping a repository webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/hooks/{hook_id}/tests',
    description=""" This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.

**Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test` """,
    tags=['webhook_management', 'repository_management', 'pre_receive_hook_management'],
)
def repos_test_push_webhook(owner: str, repo: str = ..., hook_id: int = ...):
    """
    Test the push repository webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/installation',
    description=""" Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.

You must use a [JWT](https://docs.github.com/enterprise-server@2.21/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. """,
    tags=['app_management', 'apps_management', 'app_installation_management'],
)
def apps_get_repo_installation(
    accept: str = 'application/vnd.github.machine-man-preview+json',
    owner: str = ...,
    repo: str = ...,
):
    """
    Get a repository installation for the authenticated app
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/invitations',
    description=""" When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations. """,
    tags=['repository_invitation_management'],
)
def repos_list_invitations(
    owner: str, repo: str = ..., per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List repository invitations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/invitations/{invitation_id}',
    tags=['repository_invitation_management', 'collaborator_management'],
)
def repos_delete_invitation(owner: str, repo: str = ..., invitation_id: int = ...):
    """
    Delete a repository invitation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/invitations/{invitation_id}',
    tags=['repository_invitation_management'],
)
def repos_update_invitation(
    owner: str,
    repo: str = ...,
    invitation_id: int = ...,
    body: ReposOwnerRepoInvitationsInvitationIdPatchRequest = None,
):
    """
    Update a repository invitation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues',
    description=""" List issues in a repository.

**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
request id, use the "[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)" endpoint. """,
    tags=['issue_management', 'issue_tracking_management', 'user_issue_management'],
)
def issues_list_for_repo(
    owner: str,
    repo: str = ...,
    milestone: Optional[str] = None,
    state: Optional[State15] = 'open',
    assignee: Optional[str] = None,
    creator: Optional[str] = None,
    mentioned: Optional[str] = None,
    labels: Optional[str] = None,
    sort: Optional[Sort16] = 'created',
    direction: Optional[Direction] = 'desc',
    since: Optional[datetime] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List repository issues
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/issues',
    description=""" Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. """,
    tags=['issue_management', 'issue_tracking_management', 'user_issue_management'],
)
def issues_create(
    owner: str, repo: str = ..., body: ReposOwnerRepoIssuesPostRequest = ...
):
    """
    Create an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/comments',
    description=""" By default, Issue Comments are ordered by ascending ID. """,
    tags=['issue_comment_management', 'issue_management', 'issue_tracking_management'],
)
def issues_list_comments_for_repo(
    owner: str,
    repo: str = ...,
    sort: Optional[Sort18] = 'created',
    direction: Optional[Direction] = None,
    since: Optional[datetime] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List issue comments for a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/comments/{comment_id}',
    tags=['issue_comment_management', 'issue_management'],
)
def issues_delete_comment(owner: str, repo: str = ..., comment_id: int = ...):
    """
    Delete an issue comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/comments/{comment_id}',
    tags=['issue_comment_management', 'issue_management'],
)
def issues_get_comment(owner: str, repo: str = ..., comment_id: int = ...):
    """
    Get an issue comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/issues/comments/{comment_id}',
    tags=['issue_comment_management', 'issue_management'],
)
def issues_update_comment(
    owner: str,
    repo: str = ...,
    comment_id: int = ...,
    body: ReposOwnerRepoIssuesCommentsCommentIdPatchRequest = ...,
):
    """
    Update an issue comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions',
    description=""" List the reactions to an [issue comment](https://docs.github.com/enterprise-server@2.21/rest/reference/issues#comments). """,
    tags=[
        'issue_comment_reaction_management',
        'issue_reaction_management',
        'comment_management',
    ],
)
def reactions_list_for_issue_comment(
    owner: str,
    repo: str = ...,
    comment_id: int = ...,
    content: Optional[Content1] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List reactions for an issue comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions',
    description=""" Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@2.21/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment. """,
    tags=[
        'issue_comment_reaction_management',
        'issue_management',
        'issue_comment_management',
        'issue_reaction_management',
    ],
)
def reactions_create_for_issue_comment(
    owner: str,
    repo: str = ...,
    comment_id: int = ...,
    body: ReposOwnerRepoIssuesCommentsCommentIdReactionsPostRequest = ...,
):
    """
    Create reaction for an issue comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}',
    description=""" **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.

Delete a reaction to an [issue comment](https://docs.github.com/enterprise-server@2.21/rest/reference/issues#comments). """,
    tags=['issue_comment_reaction_management', 'issue_management'],
)
def reactions_delete_for_issue_comment(
    owner: str, repo: str = ..., comment_id: int = ..., reaction_id: int = ...
):
    """
    Delete an issue comment reaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/events',
    tags=['issue_event_management', 'issue_management', 'user_issue_management'],
)
def issues_list_events_for_repo(
    owner: str, repo: str = ..., per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List issue events for a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/events/{event_id}', tags=['issue_event_management']
)
def issues_get_event(owner: str, repo: str = ..., event_id: int = ...):
    """
    Get an issue event
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/{issue_number}',
    description=""" The API returns a [`301 Moved Permanently` status](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
[transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
to the [`issues`](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads/#issues) webhook.

**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
request id, use the "[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)" endpoint. """,
    tags=['issue_management', 'issue_tracking_management', 'user_issue_management'],
)
def issues_get(owner: str, repo: str = ..., issue_number: int = ...):
    """
    Get an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/issues/{issue_number}',
    description=""" Issue owners and users with push access can edit an issue. """,
    tags=['issue_management', 'issue_tracking_management'],
)
def issues_update(
    owner: str,
    repo: str = ...,
    issue_number: int = ...,
    body: ReposOwnerRepoIssuesIssueNumberPatchRequest = None,
):
    """
    Update an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/{issue_number}/assignees',
    description=""" Removes one or more assignees from an issue. """,
    tags=['issue_assignee_management', 'issue_management'],
)
def issues_remove_assignees(
    owner: str,
    repo: str = ...,
    issue_number: int = ...,
    body: ReposOwnerRepoIssuesIssueNumberAssigneesDeleteRequest = None,
):
    """
    Remove assignees from an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/issues/{issue_number}/assignees',
    description=""" Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced. """,
    tags=['issue_assignee_management', 'issue_management', 'user_issue_management'],
)
def issues_add_assignees(
    owner: str,
    repo: str = ...,
    issue_number: int = ...,
    body: ReposOwnerRepoIssuesIssueNumberAssigneesPostRequest = None,
):
    """
    Add assignees to an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/{issue_number}/comments',
    description=""" Issue Comments are ordered by ascending ID. """,
    tags=['issue_management', 'issue_comment_management', 'user_issue_management'],
)
def issues_list_comments(
    owner: str,
    repo: str = ...,
    issue_number: int = ...,
    since: Optional[datetime] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List issue comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/issues/{issue_number}/comments',
    description=""" This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. """,
    tags=['issue_comment_management', 'issue_tracking_management', 'issue_management'],
)
def issues_create_comment(
    owner: str,
    repo: str = ...,
    issue_number: int = ...,
    body: ReposOwnerRepoIssuesIssueNumberCommentsPostRequest = ...,
):
    """
    Create an issue comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/{issue_number}/events',
    tags=['issue_event_management', 'issue_tracking_management', 'issue_management'],
)
def issues_list_events(
    owner: str,
    repo: str = ...,
    issue_number: int = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List issue events
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/{issue_number}/labels',
    tags=['issue_management', 'issue_label_management'],
)
def issues_remove_all_labels(owner: str, repo: str = ..., issue_number: int = ...):
    """
    Remove all labels from an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/{issue_number}/labels',
    tags=['issue_management', 'issue_label_management', 'user_issue_management'],
)
def issues_list_labels_on_issue(
    owner: str,
    repo: str = ...,
    issue_number: int = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List labels for an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/issues/{issue_number}/labels',
    tags=['issue_management', 'issue_label_management'],
)
def issues_add_labels(
    owner: str,
    repo: str = ...,
    issue_number: int = ...,
    body: ReposOwnerRepoIssuesIssueNumberLabelsPostRequest = None,
):
    """
    Add labels to an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/issues/{issue_number}/labels',
    description=""" Removes any previous labels and sets the new labels for an issue. """,
    tags=['issue_management', 'issue_label_management'],
)
def issues_set_labels(
    owner: str,
    repo: str = ...,
    issue_number: int = ...,
    body: ReposOwnerRepoIssuesIssueNumberLabelsPutRequest = None,
):
    """
    Set labels for an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}',
    description=""" Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist. """,
    tags=['issue_management', 'issue_label_management'],
)
def issues_remove_label(
    owner: str, repo: str = ..., issue_number: int = ..., name: str = ...
):
    """
    Remove a label from an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/{issue_number}/lock',
    description=""" Users with push access can unlock an issue's conversation. """,
    tags=['issue_management', 'issue_lock_management', 'user_issue_management'],
)
def issues_unlock(owner: str, repo: str = ..., issue_number: int = ...):
    """
    Unlock an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/issues/{issue_number}/lock',
    description=""" Users with push access can lock an issue or pull request's conversation.

Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-verbs)." """,
    tags=['issue_lock_management', 'issue_management'],
)
def issues_lock(
    owner: str,
    repo: str = ...,
    issue_number: int = ...,
    body: ReposOwnerRepoIssuesIssueNumberLockPutRequest = None,
):
    """
    Lock an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/{issue_number}/reactions',
    description=""" List the reactions to an [issue](https://docs.github.com/enterprise-server@2.21/rest/reference/issues). """,
    tags=['issue_management', 'issue_reaction_management', 'issue_tracking_management'],
)
def reactions_list_for_issue(
    owner: str,
    repo: str = ...,
    issue_number: int = ...,
    content: Optional[Content1] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List reactions for an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/issues/{issue_number}/reactions',
    description=""" Create a reaction to an [issue](https://docs.github.com/enterprise-server@2.21/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue. """,
    tags=['issue_reaction_management', 'issue_management'],
)
def reactions_create_for_issue(
    owner: str,
    repo: str = ...,
    issue_number: int = ...,
    body: ReposOwnerRepoIssuesIssueNumberReactionsPostRequest = ...,
):
    """
    Create reaction for an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}',
    description=""" **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.

Delete a reaction to an [issue](https://docs.github.com/enterprise-server@2.21/rest/reference/issues/). """,
    tags=['issue_reaction_management'],
)
def reactions_delete_for_issue(
    owner: str, repo: str = ..., issue_number: int = ..., reaction_id: int = ...
):
    """
    Delete an issue reaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/{issue_number}/timeline',
    tags=['issue_event_management', 'issue_management'],
)
def issues_list_events_for_timeline(
    owner: str,
    repo: str = ...,
    issue_number: int = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List timeline events for an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/repos/{owner}/{repo}/keys', tags=['deploy_key_management'])
def repos_list_deploy_keys(
    owner: str, repo: str = ..., per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List deploy keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/keys',
    description=""" You can create a read-only deploy key. """,
    tags=['deploy_key_management'],
)
def repos_create_deploy_key(
    owner: str, repo: str = ..., body: ReposOwnerRepoKeysPostRequest = ...
):
    """
    Create a deploy key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/keys/{key_id}',
    description=""" Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead. """,
    tags=['deploy_key_management'],
)
def repos_delete_deploy_key(owner: str, repo: str = ..., key_id: int = ...):
    """
    Delete a deploy key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/repos/{owner}/{repo}/keys/{key_id}', tags=['deploy_key_management'])
def repos_get_deploy_key(owner: str, repo: str = ..., key_id: int = ...):
    """
    Get a deploy key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/labels',
    tags=['repository_management', 'issue_label_management'],
)
def issues_list_labels_for_repo(
    owner: str, repo: str = ..., per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List labels for a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/labels',
    tags=['issue_label_management', 'repository_management'],
)
def issues_create_label(
    owner: str, repo: str = ..., body: ReposOwnerRepoLabelsPostRequest = ...
):
    """
    Create a label
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/repos/{owner}/{repo}/labels/{name}', tags=['issue_label_management'])
def issues_delete_label(owner: str, repo: str = ..., name: str = ...):
    """
    Delete a label
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/repos/{owner}/{repo}/labels/{name}', tags=['repository_management'])
def issues_get_label(owner: str, repo: str = ..., name: str = ...):
    """
    Get a label
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/repos/{owner}/{repo}/labels/{name}', tags=['issue_label_management'])
def issues_update_label(
    owner: str,
    repo: str = ...,
    name: str = ...,
    body: ReposOwnerRepoLabelsNamePatchRequest = None,
):
    """
    Update a label
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/languages',
    description=""" Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language. """,
    tags=['repository_management'],
)
def repos_list_languages(owner: str, repo: str = ...):
    """
    List repository languages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/license',
    description=""" This method returns the contents of the repository's license file, if one is detected.

Similar to [Get repository content](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/enterprise-server@2.21/rest/overview/media-types) for retrieving the raw license content or rendered license HTML. """,
    tags=['license_management', 'repository_management'],
)
def licenses_get_for_repo(owner: str, repo: str = ...):
    """
    Get the license for a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/merges',
    tags=['branch_management', 'pull_request_management'],
)
def repos_merge(
    owner: str, repo: str = ..., body: ReposOwnerRepoMergesPostRequest = ...
):
    """
    Merge a branch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/milestones',
    tags=['issue_management', 'milestone_management'],
)
def issues_list_milestones(
    owner: str,
    repo: str = ...,
    state: Optional[State18] = 'open',
    sort: Optional[Sort20] = 'due_on',
    direction: Optional[Direction] = 'asc',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List milestones
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/milestones',
    tags=['milestone_management', 'issue_management', 'project_management'],
)
def issues_create_milestone(
    owner: str, repo: str = ..., body: ReposOwnerRepoMilestonesPostRequest = ...
):
    """
    Create a milestone
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/milestones/{milestone_number}',
    tags=['issue_management', 'milestone_management'],
)
def issues_delete_milestone(owner: str, repo: str = ..., milestone_number: int = ...):
    """
    Delete a milestone
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/milestones/{milestone_number}',
    tags=['milestone_management', 'issue_management'],
)
def issues_get_milestone(owner: str, repo: str = ..., milestone_number: int = ...):
    """
    Get a milestone
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/milestones/{milestone_number}',
    tags=['issue_management', 'milestone_management'],
)
def issues_update_milestone(
    owner: str,
    repo: str = ...,
    milestone_number: int = ...,
    body: ReposOwnerRepoMilestonesMilestoneNumberPatchRequest = None,
):
    """
    Update a milestone
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/milestones/{milestone_number}/labels',
    tags=['issue_management', 'milestone_management', 'issue_label_management'],
)
def issues_list_labels_for_milestone(
    owner: str,
    repo: str = ...,
    milestone_number: int = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List labels for issues in a milestone
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/notifications',
    description=""" List all notifications for the current user. """,
    tags=['notification_management', 'repository_management'],
)
def activity_list_repo_notifications_for_authenticated_user(
    owner: str,
    repo: str = ...,
    all: Optional[bool] = False,
    participating: Optional[bool] = False,
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List repository notifications for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/notifications',
    description=""" Marks all notifications in a repository as "read" removes them from the [default view on GitHub Enterprise Server](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub Enterprise Server will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/enterprise-server@2.21/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`. """,
    tags=['notification_management'],
)
def activity_mark_repo_notifications_as_read(
    owner: str, repo: str = ..., body: ReposOwnerRepoNotificationsPutRequest = None
):
    """
    Mark repository notifications as read
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/pages', tags=['pages_management', 'repository_management']
)
def repos_delete_pages_site(owner: str, repo: str = ...):
    """
    Delete a GitHub Enterprise Server Pages site
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/repos/{owner}/{repo}/pages', tags=['pages_management'])
def repos_get_pages(owner: str, repo: str = ...):
    """
    Get a GitHub Enterprise Server Pages site
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/pages',
    description=""" Configures a GitHub Enterprise Server Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)." """,
    tags=[
        'pages_management',
        'repository_management',
        'repository_creation_management',
    ],
)
def repos_create_pages_site(
    owner: str, repo: str = ..., body: ReposOwnerRepoPagesPostRequest = ...
):
    """
    Create a GitHub Pages site
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/pages',
    description=""" Updates information for a GitHub Enterprise Server Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages). """,
    tags=['pages_management', 'repository_management'],
)
def repos_update_information_about_pages_site(
    owner: str, repo: str = ..., body: ReposOwnerRepoPagesPutRequest = ...
):
    """
    Update information about a GitHub Pages site
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pages/builds',
    tags=[
        'pages_management',
        'repository_management',
        'repository_activity_management',
    ],
)
def repos_list_pages_builds(
    owner: str, repo: str = ..., per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List GitHub Enterprise Server Pages builds
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/pages/builds',
    description=""" You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.

Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes. """,
    tags=['pages_management', 'repository_management'],
)
def repos_request_pages_build(owner: str, repo: str = ...):
    """
    Request a GitHub Enterprise Server Pages build
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pages/builds/latest',
    tags=['pages_management', 'repository_management'],
)
def repos_get_latest_pages_build(owner: str, repo: str = ...):
    """
    Get latest Pages build
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/repos/{owner}/{repo}/pages/builds/{build_id}', tags=['pages_management'])
def repos_get_pages_build(owner: str, repo: str = ..., build_id: int = ...):
    """
    Get GitHub Enterprise Server Pages build
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pre-receive-hooks',
    description=""" List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed. """,
    tags=['pre_receive_hook_management', 'pre_receive_environment_management'],
)
def enterprise_admin_list_pre_receive_hooks_for_repo(
    owner: str,
    repo: str = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
    direction: Optional[Direction] = 'desc',
    sort: Optional[Sort22] = 'created',
):
    """
    List pre-receive hooks for a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}',
    description=""" Deletes any overridden enforcement on this repository for the specified hook.

Responds with effective values inherited from owner and/or global level. """,
    tags=['pre_receive_environment_management', 'pre_receive_hook_management'],
)
def enterprise_admin_remove_pre_receive_hook_enforcement_for_repo(
    owner: str, repo: str = ..., pre_receive_hook_id: int = ...
):
    """
    Remove pre-receive hook enforcement for a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}',
    tags=['pre_receive_hook_management', 'pre_receive_environment_management'],
)
def enterprise_admin_get_pre_receive_hook_for_repo(
    owner: str, repo: str = ..., pre_receive_hook_id: int = ...
):
    """
    Get a pre-receive hook for a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}',
    description=""" For pre-receive hooks which are allowed to be configured at the repo level, you can set `enforcement` """,
    tags=['pre_receive_environment_management', 'pre_receive_hook_management'],
)
def enterprise_admin_update_pre_receive_hook_enforcement_for_repo(
    owner: str,
    repo: str = ...,
    pre_receive_hook_id: int = ...,
    body: ReposOwnerRepoPreReceiveHooksPreReceiveHookIdPatchRequest = None,
):
    """
    Update pre-receive hook enforcement for a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/projects',
    description=""" Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. """,
    tags=[
        'project_management',
        'organization_project_management',
        'repository_management',
    ],
)
def projects_list_for_repo(
    owner: str,
    repo: str = ...,
    state: Optional[State22] = 'open',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List repository projects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/projects',
    description=""" Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. """,
    tags=['project_management', 'repository_creation_management'],
)
def projects_create_for_repo(
    owner: str, repo: str = ..., body: ReposOwnerRepoProjectsPostRequest = ...
):
    """
    Create a repository project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls',
    description=""" Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team, GitHub Enterprise Server 2.17+, and GitHub Enterprise Cloud. """,
    tags=['pull_request_management'],
)
def pulls_list(
    owner: str,
    repo: str = ...,
    state: Optional[State22] = 'open',
    head: Optional[str] = None,
    base: Optional[str] = None,
    sort: Optional[Sort24] = 'created',
    direction: Optional[Direction] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List pull requests
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/pulls',
    description=""" Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team, GitHub Enterprise Server 2.17+, and GitHub Enterprise Cloud. You can create a new pull request. This endpoint triggers [notifications](https://docs.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" for details. """,
    tags=['pull_request_management'],
)
def pulls_create(
    owner: str, repo: str = ..., body: ReposOwnerRepoPullsPostRequest = ...
):
    """
    Create a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/comments',
    description=""" Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID. """,
    tags=[
        'review_comment_management',
        'pull_request_comments_management',
        'repository_management',
    ],
)
def pulls_list_review_comments_for_repo(
    owner: str,
    repo: str = ...,
    sort: Optional[Sort26] = None,
    direction: Optional[Direction] = None,
    since: Optional[datetime] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List review comments in a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/pulls/comments/{comment_id}',
    description=""" Deletes a review comment. """,
    tags=[
        'pull_request_management',
        'review_comment_management',
        'pull_request_comments_management',
    ],
)
def pulls_delete_review_comment(owner: str, repo: str = ..., comment_id: int = ...):
    """
    Delete a review comment for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/comments/{comment_id}',
    description=""" Provides details for a review comment. """,
    tags=[
        'pull_request_management',
        'review_comment_management',
        'pull_request_comments_management',
    ],
)
def pulls_get_review_comment(owner: str, repo: str = ..., comment_id: int = ...):
    """
    Get a review comment for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/pulls/comments/{comment_id}',
    description=""" Enables you to edit a review comment. """,
    tags=[
        'pull_request_management',
        'review_comment_management',
        'pull_request_comments_management',
    ],
)
def pulls_update_review_comment(
    owner: str,
    repo: str = ...,
    comment_id: int = ...,
    body: ReposOwnerRepoPullsCommentsCommentIdPatchRequest = ...,
):
    """
    Update a review comment for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions',
    description=""" List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#review-comments). """,
    tags=[
        'review_comment_management',
        'pull_request_comments_management',
        'pull_request_review_management',
    ],
)
def reactions_list_for_pull_request_review_comment(
    owner: str,
    repo: str = ...,
    comment_id: int = ...,
    content: Optional[Content1] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List reactions for a pull request review comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions',
    description=""" Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment. """,
    tags=[
        'pull_request_review_management',
        'issue_comment_reaction_management',
        'pull_request_comments_management',
    ],
)
def reactions_create_for_pull_request_review_comment(
    owner: str,
    repo: str = ...,
    comment_id: int = ...,
    body: ReposOwnerRepoPullsCommentsCommentIdReactionsPostRequest = ...,
):
    """
    Create reaction for a pull request review comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}',
    description=""" **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`

Delete a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#review-comments). """,
    tags=[
        'pull_request_comments_management',
        'issue_comment_reaction_management',
        'comment_management',
    ],
)
def reactions_delete_for_pull_request_comment(
    owner: str, repo: str = ..., comment_id: int = ..., reaction_id: int = ...
):
    """
    Delete a pull request comment reaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/{pull_number}',
    description=""" Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists details of a pull request by providing its number.

When you get, [create](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#update-a-pull-request) a pull request, GitHub Enterprise Server creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@2.21/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".

The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub Enterprise Server has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.

The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:

*   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
*   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
*   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.

Pass the appropriate [media type](https://docs.github.com/enterprise-server@2.21/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats. """,
    tags=['pull_request_management'],
)
def pulls_get(owner: str, repo: str = ..., pull_number: int = ...):
    """
    Get a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/pulls/{pull_number}',
    description=""" Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team, GitHub Enterprise Server 2.17+, and GitHub Enterprise Cloud. """,
    tags=['pull_request_management', 'discussion_management', 'comment_management'],
)
def pulls_update(
    owner: str,
    repo: str = ...,
    pull_number: int = ...,
    body: ReposOwnerRepoPullsPullNumberPatchRequest = None,
):
    """
    Update a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/{pull_number}/comments',
    description=""" Lists all review comments for a pull request. By default, review comments are in ascending order by ID. """,
    tags=['pull_request_comments_management', 'review_comment_management'],
)
def pulls_list_review_comments(
    owner: str,
    repo: str = ...,
    pull_number: int = ...,
    sort: Optional[Sort28] = 'created',
    direction: Optional[Direction] = None,
    since: Optional[datetime] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List review comments on a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/pulls/{pull_number}/comments',
    description=""" 
Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/enterprise-server@2.21/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.

You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see the [`comfort-fade` preview notice](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).

**Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. """,
    tags=[
        'pull_request_comments_management',
        'review_comment_management',
        'pull_request_management',
    ],
)
def pulls_create_review_comment(
    owner: str,
    repo: str = ...,
    pull_number: int = ...,
    body: ReposOwnerRepoPullsPullNumberCommentsPostRequest = ...,
):
    """
    Create a review comment for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies',
    description=""" Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. """,
    tags=[
        'comment_management',
        'pull_request_comments_management',
        'review_comment_management',
    ],
)
def pulls_create_reply_for_review_comment(
    owner: str,
    repo: str = ...,
    pull_number: int = ...,
    comment_id: int = ...,
    body: ReposOwnerRepoPullsPullNumberCommentsCommentIdRepliesPostRequest = ...,
):
    """
    Create a reply for a review comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/{pull_number}/commits',
    description=""" Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#list-commits) endpoint. """,
    tags=[
        'commit_tracking_management',
        'pull_request_management',
        'repository_management',
    ],
)
def pulls_list_commits(
    owner: str,
    repo: str = ...,
    pull_number: int = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List commits on a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/{pull_number}/files',
    description=""" **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default. """,
    tags=[
        'pull_request_management',
        'review_comment_management',
        'pull_request_comments_management',
        'pull_request_review_management',
        'pull_request_reviewer_management',
    ],
)
def pulls_list_files(
    owner: str,
    repo: str = ...,
    pull_number: int = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List pull requests files
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/{pull_number}/merge',
    tags=['pull_request_management', 'repository_management'],
)
def pulls_check_if_merged(owner: str, repo: str = ..., pull_number: int = ...):
    """
    Check if a pull request has been merged
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/pulls/{pull_number}/merge',
    description=""" This endpoint triggers [notifications](https://docs.github.com/enterprise-server@2.21/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. """,
    tags=['pull_request_management'],
)
def pulls_merge(
    owner: str,
    repo: str = ...,
    pull_number: int = ...,
    body: ReposOwnerRepoPullsPullNumberMergePutRequest = None,
):
    """
    Merge a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers',
    tags=['pull_request_reviewer_management', 'pull_request_management'],
)
def pulls_remove_requested_reviewers(
    owner: str,
    repo: str = ...,
    pull_number: int = ...,
    body: ReposOwnerRepoPullsPullNumberRequestedReviewersDeleteRequest = ...,
):
    """
    Remove requested reviewers from a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers',
    tags=['pull_request_reviewer_management'],
)
def pulls_list_requested_reviewers(
    owner: str,
    repo: str = ...,
    pull_number: int = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List requested reviewers for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers',
    description=""" This endpoint triggers [notifications](https://docs.github.com/enterprise-server@2.21/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. """,
    tags=['pull_request_reviewer_management', 'pull_request_management'],
)
def pulls_request_reviewers(
    owner: str,
    repo: str = ...,
    pull_number: int = ...,
    body: ReposOwnerRepoPullsPullNumberRequestedReviewersPostRequest = None,
):
    """
    Request reviewers for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/{pull_number}/reviews',
    description=""" The list of reviews returns in chronological order. """,
    tags=[
        'pull_request_management',
        'pull_request_review_management',
        'pull_request_comments_management',
    ],
)
def pulls_list_reviews(
    owner: str,
    repo: str = ...,
    pull_number: int = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List reviews for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/pulls/{pull_number}/reviews',
    description=""" This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.

Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.

**Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/enterprise-server@2.21/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#get-a-pull-request) endpoint.

The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file. """,
    tags=['pull_request_review_management', 'pull_request_management'],
)
def pulls_create_review(
    owner: str,
    repo: str = ...,
    pull_number: int = ...,
    body: ReposOwnerRepoPullsPullNumberReviewsPostRequest = None,
):
    """
    Create a review for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}',
    tags=['pull_request_review_management', 'pull_request_management'],
)
def pulls_delete_pending_review(
    owner: str, repo: str = ..., pull_number: int = ..., review_id: int = ...
):
    """
    Delete a pending review for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}',
    tags=[
        'pull_request_management',
        'pull_request_review_management',
        'review_comment_management',
    ],
)
def pulls_get_review(
    owner: str, repo: str = ..., pull_number: int = ..., review_id: int = ...
):
    """
    Get a review for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}',
    description=""" Update the review summary comment with new text. """,
    tags=['pull_request_review_management', 'pull_request_management'],
)
def pulls_update_review(
    owner: str,
    repo: str = ...,
    pull_number: int = ...,
    review_id: int = ...,
    body: ReposOwnerRepoPullsPullNumberReviewsReviewIdPutRequest = ...,
):
    """
    Update a review for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments',
    description=""" List comments for a specific pull request review. """,
    tags=[
        'pull_request_comments_management',
        'review_comment_management',
        'pull_request_review_management',
    ],
)
def pulls_list_comments_for_review(
    owner: str,
    repo: str = ...,
    pull_number: int = ...,
    review_id: int = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List comments for a pull request review
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals',
    description=""" **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews. """,
    tags=['pull_request_review_management', 'pull_request_management'],
)
def pulls_dismiss_review(
    owner: str,
    repo: str = ...,
    pull_number: int = ...,
    review_id: int = ...,
    body: ReposOwnerRepoPullsPullNumberReviewsReviewIdDismissalsPutRequest = ...,
):
    """
    Dismiss a review for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events',
    tags=['pull_request_review_management', 'pull_request_management'],
)
def pulls_submit_review(
    owner: str,
    repo: str = ...,
    pull_number: int = ...,
    review_id: int = ...,
    body: ReposOwnerRepoPullsPullNumberReviewsReviewIdEventsPostRequest = ...,
):
    """
    Submit a review for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/pulls/{pull_number}/update-branch',
    description=""" Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch. """,
    tags=['pull_request_management', 'branch_management'],
)
def pulls_update_branch(
    owner: str,
    repo: str = ...,
    pull_number: int = ...,
    body: ReposOwnerRepoPullsPullNumberUpdateBranchPutRequest = None,
):
    """
    Update a pull request branch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/readme',
    description=""" Gets the preferred README for a repository.

READMEs support [custom media types](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML. """,
    tags=['repository_readme_management'],
)
def repos_get_readme(owner: str, repo: str = ..., ref: Optional[str] = None):
    """
    Get a repository README
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/readme/{dir}',
    description=""" Gets the README from a repository directory.

READMEs support [custom media types](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML. """,
    tags=['repository_readme_management', 'repository_management'],
)
def repos_get_readme_in_directory(
    owner: str, repo: str = ..., dir: str = ..., ref: Optional[str] = None
):
    """
    Get a repository README for a directory
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/releases',
    description=""" This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#list-repository-tags).

Information about published releases are available to everyone. Only users with push access will receive listings for draft releases. """,
    tags=['repository_release_management'],
)
def repos_list_releases(
    owner: str, repo: str = ..., per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List releases
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/releases',
    description=""" Users with push access to the repository can create a release.

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. """,
    tags=['repository_release_management'],
)
def repos_create_release(
    owner: str, repo: str = ..., body: ReposOwnerRepoReleasesPostRequest = ...
):
    """
    Create a release
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/releases/assets/{asset_id}',
    tags=['repository_release_asset_management'],
)
def repos_delete_release_asset(owner: str, repo: str = ..., asset_id: int = ...):
    """
    Delete a release asset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/releases/assets/{asset_id}',
    description=""" To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/enterprise-server@2.21/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response. """,
    tags=['repository_release_asset_management'],
)
def repos_get_release_asset(owner: str, repo: str = ..., asset_id: int = ...):
    """
    Get a release asset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/releases/assets/{asset_id}',
    description=""" Users with push access to the repository can edit a release asset. """,
    tags=['repository_release_asset_management'],
)
def repos_update_release_asset(
    owner: str,
    repo: str = ...,
    asset_id: int = ...,
    body: ReposOwnerRepoReleasesAssetsAssetIdPatchRequest = None,
):
    """
    Update a release asset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/releases/latest',
    description=""" View the latest published full release for the repository.

The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published. """,
    tags=['repository_release_management'],
)
def repos_get_latest_release(owner: str, repo: str = ...):
    """
    Get the latest release
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/releases/tags/{tag}',
    description=""" Get a published release with the specified tag. """,
    tags=['repository_release_management', 'repository_tag_management'],
)
def repos_get_release_by_tag(owner: str, repo: str = ..., tag: str = ...):
    """
    Get a release by tag name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/releases/{release_id}',
    description=""" Users with push access to the repository can delete a release. """,
    tags=['repository_release_management'],
)
def repos_delete_release(owner: str, repo: str = ..., release_id: int = ...):
    """
    Delete a release
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/releases/{release_id}',
    description=""" **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#hypermedia). """,
    tags=['repository_release_management'],
)
def repos_get_release(owner: str, repo: str = ..., release_id: int = ...):
    """
    Get a release
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/releases/{release_id}',
    description=""" Users with push access to the repository can edit a release. """,
    tags=['repository_release_management', 'repository_management'],
)
def repos_update_release(
    owner: str,
    repo: str = ...,
    release_id: int = ...,
    body: ReposOwnerRepoReleasesReleaseIdPatchRequest = None,
):
    """
    Update a release
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/releases/{release_id}/assets',
    tags=['repository_release_management', 'repository_release_asset_management'],
)
def repos_list_release_assets(
    owner: str,
    repo: str = ...,
    release_id: int = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List release assets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/releases/{release_id}/assets',
    description=""" This endpoint makes use of [a Hypermedia relation](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
the response of the [Create a release endpoint](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#create-a-release) to upload a release asset.

You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.

Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example: 

`application/zip`

GitHub Enterprise Server expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
you'll still need to pass your authentication to be able to upload an asset.

When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.

**Notes:**
*   GitHub Enterprise Server renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#list-assets-for-a-release)"
endpoint lists the renamed filenames. For more information and help, contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags=dotcom-rest-api).
*   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset. """,
    tags=['repository_release_management', 'repository_release_asset_management'],
)
def repos_upload_release_asset(
    owner: str,
    repo: str = ...,
    release_id: int = ...,
    name: str = ...,
    label: Optional[str] = None,
):
    """
    Upload a release asset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/stargazers',
    description=""" Lists the people that have starred the repository.

You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@2.21/rest/overview/media-types/) via the `Accept` header: """,
    tags=['repository_management'],
)
def activity_list_stargazers_for_repo(
    owner: str, repo: str = ..., per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List stargazers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/stats/code_frequency',
    description=""" Returns a weekly aggregate of the number of additions and deletions pushed to a repository. """,
    tags=['repository_activity_management', 'commit_tracking_management'],
)
def repos_get_code_frequency_stats(owner: str, repo: str = ...):
    """
    Get the weekly commit activity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/stats/commit_activity',
    description=""" Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`. """,
    tags=['repository_activity_management', 'commit_tracking_management'],
)
def repos_get_commit_activity_stats(owner: str, repo: str = ...):
    """
    Get the last year of commit activity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/stats/contributors',
    description=""" 
Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:

*   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
*   `a` - Number of additions
*   `d` - Number of deletions
*   `c` - Number of commits """,
    tags=[
        'repository_activity_management',
        'commit_tracking_management',
        'collaborator_management',
    ],
)
def repos_get_contributors_stats(owner: str, repo: str = ...):
    """
    Get all contributor commit activity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/stats/participation',
    description=""" Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.

The array order is oldest week (index 0) to most recent week. """,
    tags=['repository_activity_management', 'commit_tracking_management'],
)
def repos_get_participation_stats(owner: str, repo: str = ...):
    """
    Get the weekly commit count
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/stats/punch_card',
    description=""" Each array contains the day number, hour number, and number of commits:

*   `0-6`: Sunday - Saturday
*   `0-23`: Hour of day
*   Number of commits

For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits. """,
    tags=['repository_activity_management', 'commit_tracking_management'],
)
def repos_get_punch_card_stats(owner: str, repo: str = ...):
    """
    Get the hourly commit count for each day
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/statuses/{sha}',
    description=""" Users with push access in a repository can create commit statuses for a given SHA.

Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error. """,
    tags=['commit_status_management', 'repository_management'],
)
def repos_create_commit_status(
    owner: str,
    repo: str = ...,
    sha: str = ...,
    body: ReposOwnerRepoStatusesShaPostRequest = ...,
):
    """
    Create a commit status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/subscribers',
    description=""" Lists the people watching the specified repository. """,
    tags=['repository_management', 'user_management', 'collaborator_management'],
)
def activity_list_watchers_for_repo(
    owner: str, repo: str = ..., per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List watchers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/subscription',
    description=""" This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/enterprise-server@2.21/rest/reference/activity#set-a-repository-subscription). """,
    tags=['repository_subscription_management'],
)
def activity_delete_repo_subscription(owner: str, repo: str = ...):
    """
    Delete a repository subscription
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/subscription', tags=['repository_subscription_management']
)
def activity_get_repo_subscription(owner: str, repo: str = ...):
    """
    Get a repository subscription
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/subscription',
    description=""" If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/enterprise-server@2.21/rest/reference/activity#delete-a-repository-subscription) completely. """,
    tags=['repository_subscription_management'],
)
def activity_set_repo_subscription(
    owner: str, repo: str = ..., body: ReposOwnerRepoSubscriptionPutRequest = None
):
    """
    Set a repository subscription
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/tags',
    tags=[
        'repository_management',
        'repository_tag_management',
        'repository_activity_management',
    ],
)
def repos_list_tags(
    owner: str, repo: str = ..., per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List repository tags
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/tarball/{ref}',
    description=""" Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
`master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
the `Location` header to make a second `GET` request.
**Note**: For private repositories, these links are temporary and expire after five minutes. """,
    tags=['repository_archive_management'],
)
def repos_download_tarball_archive(owner: str, repo: str = ..., ref: str = ...):
    """
    Download a repository archive (tar)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/teams',
    tags=[
        'team_management',
        'organization_member_management',
        'organization_management',
    ],
)
def repos_list_teams(
    owner: str, repo: str = ..., per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List repository teams
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/topics',
    tags=['repository_management', 'repository_tag_management'],
)
def repos_get_all_topics(
    owner: str, repo: str = ..., page: Optional[int] = 1, per_page: Optional[int] = 30
):
    """
    Get all repository topics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/topics',
    tags=['repository_management', 'repository_tag_management'],
)
def repos_replace_all_topics(
    owner: str, repo: str = ..., body: ReposOwnerRepoTopicsPutRequest = ...
):
    """
    Replace all repository topics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/transfer',
    description=""" A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/). """,
    tags=['repository_management', 'repository_creation_management'],
)
def repos_transfer(
    owner: str, repo: str = ..., body: ReposOwnerRepoTransferPostRequest = ...
):
    """
    Transfer a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/zipball/{ref}',
    description=""" Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
`master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
the `Location` header to make a second `GET` request.
**Note**: For private repositories, these links are temporary and expire after five minutes. """,
    tags=['repository_archive_management'],
)
def repos_download_zipball_archive(owner: str, repo: str = ..., ref: str = ...):
    """
    Download a repository archive (zip)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{template_owner}/{template_repo}/generate',
    description=""" Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/enterprise-server@2.21/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.

**OAuth scope requirements**

When using [OAuth](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:

*   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
*   `repo` scope to create a private repository """,
    tags=['repository_creation_management', 'repository_management'],
)
def repos_create_using_template(
    template_owner: str,
    template_repo: str = ...,
    body: ReposTemplateOwnerTemplateRepoGeneratePostRequest = ...,
):
    """
    Create a repository using a template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repositories',
    description=""" Lists all public repositories in the order that they were created.

Note:
- For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
- Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories. """,
    tags=['public_repository_management', 'repository_management'],
)
def repos_list_public(
    since: Optional[int] = None, visibility: Optional[Visibility2] = 'public'
):
    """
    List public repositories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/search/code',
    description=""" Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#pagination).

When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@2.21/rest/reference/search#text-match-metadata).

For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:

`q=addClass+in:file+language:js+repo:jquery/jquery`

This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.

#### Considerations for code search

Due to the complexity of searching code, there are a few restrictions on how searches are performed:

*   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
*   Only files smaller than 384 KB are searchable.
*   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is. """,
    tags=['repository_search_management'],
)
def search_code(
    q: str,
    sort: Optional[Sort30] = None,
    order: Optional[Order] = 'desc',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    Search code
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/search/commits',
    description=""" Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#pagination).

When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
metadata](https://docs.github.com/enterprise-server@2.21/rest/reference/search#text-match-metadata).

For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:

`q=repo:octocat/Spoon-Knife+css` """,
    tags=['repository_search_management', 'commit_tracking_management'],
)
def search_commits(
    q: str,
    sort: Optional[Sort32] = None,
    order: Optional[Order] = 'desc',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    Search commits
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/search/issues',
    description=""" Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#pagination).

When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
search results, see [Text match metadata](https://docs.github.com/enterprise-server@2.21/rest/reference/search#text-match-metadata).

For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.

`q=windows+label:bug+language:python+state:open&sort=created&order=asc`

This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.

**Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)." """,
    tags=[
        'issue_tracking_management',
        'pull_request_management',
        'repository_search_management',
    ],
)
def search_issues_and_pull_requests(
    q: str,
    sort: Optional[Sort34] = None,
    order: Optional[Order] = 'desc',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    Search issues and pull requests
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/search/labels',
    description=""" Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#pagination).

When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@2.21/rest/reference/search#text-match-metadata).

For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:

`q=bug+defect+enhancement&repository_id=64778136`

The labels that best match the query appear first in the search results. """,
    tags=['repository_search_management'],
)
def search_labels(
    repository_id: int,
    q: str = ...,
    sort: Optional[Sort36] = None,
    order: Optional[Order] = 'desc',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    Search labels
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/search/repositories',
    description=""" Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#pagination).

When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@2.21/rest/reference/search#text-match-metadata).

For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:

`q=tetris+language:assembly&sort=stars&order=desc`

This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.

When you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:

`q=topic:ruby+topic:rails` """,
    tags=['repository_management', 'repository_search_management'],
)
def search_repos(
    q: str,
    sort: Optional[Sort38] = None,
    order: Optional[Order] = 'desc',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    Search repositories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/search/topics',
    description=""" Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://help.github.com/articles/searching-topics/)" for a detailed list of qualifiers.

When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@2.21/rest/reference/search#text-match-metadata).

For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:

`q=ruby+is:featured`

This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results. """,
    tags=['repository_search_management'],
)
def search_topics(q: str, per_page: Optional[int] = 30, page: Optional[int] = 1):
    """
    Search topics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/search/users',
    description=""" Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#pagination).

When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/enterprise-server@2.21/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@2.21/rest/reference/search#text-match-metadata).

For example, if you're looking for a list of popular users, you might try this query:

`q=tom+repos:%3E42+followers:%3E1000`

This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers. """,
    tags=['user_management', 'user_activity_management'],
)
def search_users(
    q: str,
    sort: Optional[Sort40] = None,
    order: Optional[Order] = 'desc',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    Search users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/api/configcheck',
    description=""" This endpoint allows you to check the status of the most recent configuration process:

Note that you may need to wait several seconds after you start a process before you can check its status.

The different statuses are:

| Status        | Description                       |
| ------------- | --------------------------------- |
| `PENDING`     | The job has not started yet       |
| `CONFIGURING` | The job is running                |
| `DONE`        | The job has finished correctly    |
| `FAILED`      | The job has finished unexpectedly | """,
    tags=['enterprise_configuration_management', 'organization_management'],
)
def enterprise_admin_get_configuration_status():
    """
    Get the configuration status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/api/configure',
    description=""" This endpoint allows you to start a configuration process at any time for your updated settings to take effect: """,
    tags=[
        'organization_management',
        'enterprise_configuration_management',
        'organization_installer_management',
    ],
)
def enterprise_admin_start_configuration_process():
    """
    Start a configuration process
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/api/maintenance',
    description=""" Check your installation's maintenance status: """,
    tags=['repository_management', 'repository_activity_management'],
)
def enterprise_admin_get_maintenance_status():
    """
    Get the maintenance status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/api/maintenance',
    description=""" **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode). """,
    tags=['organization_management', 'repository_management', 'app_management'],
)
def enterprise_admin_enable_or_disable_maintenance_mode(request: Request):
    """
    Enable or disable maintenance mode
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/setup/api/settings', tags=['user_management', 'user_profile_management'])
def enterprise_admin_get_settings():
    """
    Get settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/api/settings',
    description=""" For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.21/rest/reference/enterprise-admin#get-settings).

**Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode). """,
    tags=['user_management', 'organization_management', 'admin_user_management'],
)
def enterprise_admin_set_settings(request: Request):
    """
    Set settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/api/settings/authorized-keys',
    description=""" **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode). """,
    tags=['user_ssh_key_management', 'user_management'],
)
def enterprise_admin_remove_authorized_ssh_key(request: Request):
    """
    Remove an authorized SSH key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/api/settings/authorized-keys',
    tags=['user_ssh_key_management', 'user_management'],
)
def enterprise_admin_get_all_authorized_ssh_keys():
    """
    Get all authorized SSH keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/api/settings/authorized-keys',
    description=""" **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode). """,
    tags=['user_ssh_key_management'],
)
def enterprise_admin_add_authorized_ssh_key(request: Request):
    """
    Add an authorized SSH key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/api/start',
    description=""" When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license.

Note that you need to `POST` to [`/setup/api/configure`](https://docs.github.com/enterprise-server@2.21/rest/reference/enterprise-admin#start-a-configuration-process) to start the actual configuration process.

When using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:

1.  If you're working directly with the API before accessing the web interface, you must pass in the password parameter to set your password.
2.  If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.

**Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode). """,
    tags=['license_management', 'repository_management'],
)
def enterprise_admin_create_enterprise_server_license(request: Request):
    """
    Create a GitHub license
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/api/upgrade',
    description=""" This API upgrades your license and also triggers the configuration process.

**Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode). """,
    tags=['license_management'],
)
def enterprise_admin_upgrade_license(request: Request):
    """
    Upgrade a license
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/teams/{team_id}',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#delete-a-team) endpoint.

To delete a team, the authenticated user must be an organization owner or team maintainer.

If you are an organization owner, deleting a parent team will delete all of its child teams as well. """,
    tags=[
        'team_management',
        'legacy_teams_management',
        'legacy_team_member_management',
    ],
)
def teams_delete_legacy(team_id: int):
    """
    Delete a team (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id}',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#get-a-team-by-name) endpoint. """,
    tags=[
        'legacy_teams_management',
        'legacy_team_member_management',
        'team_management',
    ],
)
def teams_get_legacy(team_id: int):
    """
    Get a team (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/teams/{team_id}',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#update-a-team) endpoint.

To edit a team, the authenticated user must either be an organization owner or a team maintainer.

**Note:** With nested teams, the `privacy` for parent teams cannot be `secret`. """,
    tags=[
        'legacy_teams_management',
        'legacy_team_member_management',
        'team_management',
    ],
)
def teams_update_legacy(team_id: int, body: TeamsTeamIdPatchRequest = ...):
    """
    Update a team (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id}/discussions',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#list-discussions) endpoint.

List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['discussion_management', 'legacy_teams_management'],
)
def teams_list_discussions_legacy(
    team_id: int,
    direction: Optional[Direction] = 'desc',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List discussions (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/teams/{team_id}/discussions',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#create-a-discussion) endpoint.

Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. """,
    tags=['team_management', 'discussion_management', 'legacy_teams_management'],
)
def teams_create_discussion_legacy(
    team_id: int, body: TeamsTeamIdDiscussionsPostRequest = ...
):
    """
    Create a discussion (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/teams/{team_id}/discussions/{discussion_number}',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#delete-a-discussion) endpoint.

Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['discussion_management', 'legacy_teams_management'],
)
def teams_delete_discussion_legacy(team_id: int, discussion_number: int = ...):
    """
    Delete a discussion (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id}/discussions/{discussion_number}',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#get-a-discussion) endpoint.

Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['discussion_management', 'legacy_teams_management'],
)
def teams_get_discussion_legacy(team_id: int, discussion_number: int = ...):
    """
    Get a discussion (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/teams/{team_id}/discussions/{discussion_number}',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#update-a-discussion) endpoint.

Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['discussion_management', 'legacy_teams_management'],
)
def teams_update_discussion_legacy(
    team_id: int,
    discussion_number: int = ...,
    body: TeamsTeamIdDiscussionsDiscussionNumberPatchRequest = None,
):
    """
    Update a discussion (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id}/discussions/{discussion_number}/comments',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#list-discussion-comments) endpoint.

List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['discussion_management', 'comment_management', 'legacy_teams_management'],
)
def teams_list_discussion_comments_legacy(
    team_id: int,
    discussion_number: int = ...,
    direction: Optional[Direction] = 'desc',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List discussion comments (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/teams/{team_id}/discussions/{discussion_number}/comments',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#create-a-discussion-comment) endpoint.

Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. """,
    tags=['discussion_management', 'comment_management', 'legacy_teams_management'],
)
def teams_create_discussion_comment_legacy(
    team_id: int,
    discussion_number: int = ...,
    body: TeamsTeamIdDiscussionsDiscussionNumberCommentsPostRequest = ...,
):
    """
    Create a discussion comment (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#delete-a-discussion-comment) endpoint.

Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['discussion_management', 'comment_management'],
)
def teams_delete_discussion_comment_legacy(
    team_id: int, discussion_number: int = ..., comment_number: int = ...
):
    """
    Delete a discussion comment (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#get-a-discussion-comment) endpoint.

Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['discussion_management', 'comment_management', 'legacy_teams_management'],
)
def teams_get_discussion_comment_legacy(
    team_id: int, discussion_number: int = ..., comment_number: int = ...
):
    """
    Get a discussion comment (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#update-a-discussion-comment) endpoint.

Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['discussion_management', 'comment_management', 'legacy_teams_management'],
)
def teams_update_discussion_comment_legacy(
    team_id: int,
    discussion_number: int = ...,
    comment_number: int = ...,
    body: TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberPatchRequest = ...,
):
    """
    Update a discussion comment (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/enterprise-server@2.21/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.

List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['discussion_management', 'comment_management', 'legacy_teams_management'],
)
def reactions_list_for_team_discussion_comment_legacy(
    team_id: int,
    discussion_number: int = ...,
    comment_number: int = ...,
    content: Optional[Content1] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List reactions for a team discussion comment (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/enterprise-server@2.21/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.

Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment. """,
    tags=['discussion_management', 'comment_management', 'legacy_teams_management'],
)
def reactions_create_for_team_discussion_comment_legacy(
    team_id: int,
    discussion_number: int = ...,
    comment_number: int = ...,
    body: TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostRequest = ...,
):
    """
    Create reaction for a team discussion comment (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id}/discussions/{discussion_number}/reactions',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/enterprise-server@2.21/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.

List the reactions to a [team discussion](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['discussion_management', 'legacy_teams_management'],
)
def reactions_list_for_team_discussion_legacy(
    team_id: int,
    discussion_number: int = ...,
    content: Optional[Content1] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List reactions for a team discussion (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/teams/{team_id}/discussions/{discussion_number}/reactions',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/enterprise-server@2.21/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.

Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion. """,
    tags=['discussion_management', 'legacy_teams_management'],
)
def reactions_create_for_team_discussion_legacy(
    team_id: int,
    discussion_number: int = ...,
    body: TeamsTeamIdDiscussionsDiscussionNumberReactionsPostRequest = ...,
):
    """
    Create reaction for a team discussion (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id}/members',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#list-team-members) endpoint.

Team members will include the members of child teams. """,
    tags=[
        'legacy_teams_management',
        'legacy_team_member_management',
        'team_membership_management',
        'team_management',
    ],
)
def teams_list_members_legacy(
    team_id: int,
    role: Optional[Role8] = 'all',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List team members (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/teams/{team_id}/members/{username}',
    description=""" The "Remove team member" endpoint (described below) is deprecated.

We recommend using the [Remove team membership for a user](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.

Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.

**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)." """,
    tags=[
        'team_management',
        'team_membership_management',
        'legacy_team_member_management',
    ],
)
def teams_remove_member_legacy(team_id: int, username: str = ...):
    """
    Remove team member (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id}/members/{username}',
    description=""" The "Get team member" endpoint (described below) is deprecated.

We recommend using the [Get team membership for a user](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.

To list members in a team, the team must be visible to the authenticated user. """,
    tags=['legacy_team_member_management', 'team_management'],
)
def teams_get_member_legacy(team_id: int, username: str = ...):
    """
    Get team member (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/teams/{team_id}/members/{username}',
    description=""" The "Add team member" endpoint (described below) is deprecated.

We recommend using the [Add or update team membership for a user](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.

Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.

**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."

Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-verbs)." """,
    tags=[
        'team_management',
        'legacy_team_member_management',
        'team_membership_management',
    ],
)
def teams_add_member_legacy(team_id: int, username: str = ...):
    """
    Add team member (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/teams/{team_id}/memberships/{username}',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#remove-team-membership-for-a-user) endpoint.

Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.

**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)." """,
    tags=[
        'team_management',
        'organization_member_management',
        'team_membership_management',
    ],
)
def teams_remove_membership_for_user_legacy(team_id: int, username: str = ...):
    """
    Remove team membership for a user (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id}/memberships/{username}',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#get-team-membership-for-a-user) endpoint.

Team members will include the members of child teams.

To get a user's membership with a team, the team must be visible to the authenticated user.

**Note:**
The response contains the `state` of the membership and the member's `role`.

The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#create-a-team). """,
    tags=[
        'team_membership_management',
        'organization_member_management',
        'team_management',
        'legacy_team_member_management',
    ],
)
def teams_get_membership_for_user_legacy(team_id: int, username: str = ...):
    """
    Get team membership for a user (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/teams/{team_id}/memberships/{username}',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.

Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.

**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."

If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.

If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer. """,
    tags=[
        'team_management',
        'team_membership_management',
        'legacy_team_member_management',
    ],
)
def teams_add_or_update_membership_for_user_legacy(
    team_id: int,
    username: str = ...,
    body: TeamsTeamIdMembershipsUsernamePutRequest = None,
):
    """
    Add or update team membership for a user (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id}/projects',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#list-team-projects) endpoint.

Lists the organization projects for a team. """,
    tags=[
        'organization_project_management',
        'team_management',
        'legacy_teams_management',
        'legacy_team_member_management',
    ],
)
def teams_list_projects_legacy(
    team_id: int, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List team projects (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/teams/{team_id}/projects/{project_id}',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#remove-a-project-from-a-team) endpoint.

Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it. """,
    tags=['team_management', 'legacy_teams_management'],
)
def teams_remove_project_legacy(team_id: int, project_id: int = ...):
    """
    Remove a project from a team (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id}/projects/{project_id}',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#check-team-permissions-for-a-project) endpoint.

Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team. """,
    tags=['team_management', 'organization_management'],
)
def teams_check_permissions_for_project_legacy(team_id: int, project_id: int = ...):
    """
    Check team permissions for a project (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/teams/{team_id}/projects/{project_id}',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#add-or-update-team-project-permissions) endpoint.

Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization. """,
    tags=['team_management', 'organization_project_management'],
)
def teams_add_or_update_project_permissions_legacy(
    team_id: int,
    project_id: int = ...,
    body: TeamsTeamIdProjectsProjectIdPutRequest = None,
):
    """
    Add or update team project permissions (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id}/repos',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#list-team-repositories) endpoint. """,
    tags=['team_management', 'repository_management', 'legacy_teams_management'],
)
def teams_list_repos_legacy(
    team_id: int, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List team repositories (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/teams/{team_id}/repos/{owner}/{repo}',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#remove-a-repository-from-a-team) endpoint.

If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team. """,
    tags=[
        'team_management',
        'legacy_teams_management',
        'organization_member_management',
    ],
)
def teams_remove_repo_legacy(team_id: int, owner: str = ..., repo: str = ...):
    """
    Remove a repository from a team (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id}/repos/{owner}/{repo}',
    description=""" **Note**: Repositories inherited through a parent team will also be checked.

**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.

You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@2.21/rest/overview/media-types/) via the `Accept` header: """,
    tags=['team_management', 'organization_member_management'],
)
def teams_check_permissions_for_repo_legacy(
    team_id: int, owner: str = ..., repo: str = ...
):
    """
    Check team permissions for a repository (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/teams/{team_id}/repos/{owner}/{repo}',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.

To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.

Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-verbs)." """,
    tags=[
        'team_management',
        'legacy_teams_management',
        'legacy_team_member_management',
    ],
)
def teams_add_or_update_repo_permissions_legacy(
    team_id: int,
    owner: str = ...,
    repo: str = ...,
    body: TeamsTeamIdReposOwnerRepoPutRequest = None,
):
    """
    Add or update team repository permissions (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id}/teams',
    description=""" **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/enterprise-server@2.21/rest/reference/teams#list-child-teams) endpoint. """,
    tags=[
        'legacy_teams_management',
        'legacy_team_member_management',
        'team_management',
    ],
)
def teams_list_child_legacy(
    team_id: int, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List child teams (Legacy)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user',
    description=""" If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.

If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information. """,
    tags=['user_management', 'user_profile_management', 'user_activity_management'],
)
def users_get_authenticated():
    """
    Get the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/user',
    description=""" **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API. """,
    tags=['user_management', 'user_profile_management'],
)
def users_update_authenticated(body: UserPatchRequest = None):
    """
    Update the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/user/emails',
    description=""" This endpoint is accessible with the `user` scope. """,
    tags=['user_management', 'user_profile_management'],
)
def users_delete_email_for_authenticated(body: UserEmailsDeleteRequest = None):
    """
    Delete an email address for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/emails',
    description=""" Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope. """,
    tags=['user_management', 'user_profile_management'],
)
def users_list_emails_for_authenticated(
    per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List email addresses for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user/emails',
    description=""" This endpoint is accessible with the `user` scope. """,
    tags=['user_management', 'user_profile_management'],
)
def users_add_email_for_authenticated(body: UserEmailsPostRequest = None):
    """
    Add an email address for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/followers',
    description=""" Lists the people following the authenticated user. """,
    tags=['user_follow_management', 'user_management', 'user_activity_management'],
)
def users_list_followers_for_authenticated_user(
    per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List followers of the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/following',
    description=""" Lists the people who the authenticated user follows. """,
    tags=['user_follow_management', 'user_activity_management'],
)
def users_list_followed_by_authenticated(
    per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List the people the authenticated user follows
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/user/following/{username}',
    description=""" Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope. """,
    tags=['user_management', 'user_follow_management'],
)
def users_unfollow(username: str):
    """
    Unfollow a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/user/following/{username}', tags=['user_follow_management'])
def users_check_person_is_followed_by_authenticated(username: str):
    """
    Check if a person is followed by the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/user/following/{username}',
    description=""" Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-verbs)."

Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope. """,
    tags=['user_management', 'user_follow_management'],
)
def users_follow(username: str):
    """
    Follow a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/gpg_keys',
    description=""" Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['user_management', 'user_profile_management', 'user_ssh_key_management'],
)
def users_list_gpg_keys_for_authenticated(
    per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List GPG keys for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user/gpg_keys',
    description=""" Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['user_management', 'user_profile_management', 'user_ssh_key_management'],
)
def users_create_gpg_key_for_authenticated(body: UserGpgKeysPostRequest):
    """
    Create a GPG key for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/user/gpg_keys/{gpg_key_id}',
    description=""" Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['user_management', 'user_profile_management', 'user_ssh_key_management'],
)
def users_delete_gpg_key_for_authenticated(gpg_key_id: int):
    """
    Delete a GPG key for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/gpg_keys/{gpg_key_id}',
    description=""" View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['user_management', 'user_profile_management', 'user_ssh_key_management'],
)
def users_get_gpg_key_for_authenticated(gpg_key_id: int):
    """
    Get a GPG key for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/installations',
    description=""" Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.

You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@2.21/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.

The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.

You can find the permissions for the installation under the `permissions` key. """,
    tags=['app_management', 'app_installation_management', 'apps_management'],
)
def apps_list_installations_for_authenticated_user(
    accept: str = 'application/vnd.github.machine-man-preview+json',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List app installations accessible to the user access token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/installations/{installation_id}/repositories',
    description=""" List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.

The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.

You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@2.21/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.

The access the user has to each repository is included in the hash under the `permissions` key. """,
    tags=['repository_management', 'user_repository_management', 'app_management'],
)
def apps_list_installation_repos_for_authenticated_user(
    accept: str = 'application/vnd.github.machine-man-preview+json',
    installation_id: int = ...,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List repositories accessible to the user access token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/user/installations/{installation_id}/repositories/{repository_id}',
    description=""" Remove a single repository from an installation. The authenticated user must have admin access to the repository.

You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@2.21/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@2.21/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint. """,
    tags=['app_management', 'app_installation_management', 'apps_management'],
)
def apps_remove_repo_from_installation(installation_id: int, repository_id: int = ...):
    """
    Remove a repository from an app installation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/user/installations/{installation_id}/repositories/{repository_id}',
    description=""" Add a single repository to an installation. The authenticated user must have admin access to the repository.

You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@2.21/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@2.21/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint. """,
    tags=['app_management', 'app_installation_management'],
)
def apps_add_repo_to_installation(installation_id: int, repository_id: int = ...):
    """
    Add a repository to an app installation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/issues',
    description=""" List issues across owned and member repositories assigned to the authenticated user.

**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
request id, use the "[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)" endpoint. """,
    tags=['issue_tracking_management', 'user_issue_management', 'user_management'],
)
def issues_list_for_authenticated_user(
    filter: Optional[Filter12] = 'assigned',
    state: Optional[State28] = 'open',
    labels: Optional[str] = None,
    sort: Optional[Sort42] = 'created',
    direction: Optional[Direction] = 'desc',
    since: Optional[datetime] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List user account issues assigned to the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/keys',
    description=""" Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['user_ssh_key_management', 'user_management', 'user_profile_management'],
)
def users_list_public_ssh_keys_for_authenticated(
    per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List public SSH keys for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user/keys',
    description=""" Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['user_management', 'user_ssh_key_management'],
)
def users_create_public_ssh_key_for_authenticated(body: UserKeysPostRequest):
    """
    Create a public SSH key for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/user/keys/{key_id}',
    description=""" Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['user_ssh_key_management', 'user_management'],
)
def users_delete_public_ssh_key_for_authenticated(key_id: int):
    """
    Delete a public SSH key for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/keys/{key_id}',
    description=""" View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). """,
    tags=['user_management', 'user_ssh_key_management'],
)
def users_get_public_ssh_key_for_authenticated(key_id: int):
    """
    Get a public SSH key for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/memberships/orgs',
    tags=['organization_management', 'organization_member_management'],
)
def orgs_list_memberships_for_authenticated_user(
    state: Optional[State30] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List organization memberships for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/memberships/orgs/{org}',
    tags=['organization_management', 'organization_member_management'],
)
def orgs_get_membership_for_authenticated_user(org: str):
    """
    Get an organization membership for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/user/memberships/orgs/{org}',
    tags=['organization_management', 'organization_member_management'],
)
def orgs_update_membership_for_authenticated_user(
    org: str, body: UserMembershipsOrgsOrgPatchRequest = ...
):
    """
    Update an organization membership for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/orgs',
    description=""" List organizations for the authenticated user.

**OAuth scope requirements**

This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response. """,
    tags=[
        'organization_management',
        'orgs_management',
        'organization_member_management',
    ],
)
def orgs_list_for_authenticated_user(
    per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List organizations for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user/projects',
    tags=[
        'user_management',
        'user_project_management',
        'organization_project_management',
    ],
)
def projects_create_for_authenticated_user(body: UserProjectsPostRequest):
    """
    Create a user project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/public_emails',
    description=""" Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/enterprise-server@2.21/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope. """,
    tags=['user_management', 'user_profile_management', 'user_activity_management'],
)
def users_list_public_emails_for_authenticated(
    per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List public email addresses for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/repos',
    description=""" Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.

The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership. """,
    tags=['repository_management', 'user_repository_management'],
)
def repos_list_for_authenticated_user(
    visibility: Optional[Visibility4] = 'all',
    affiliation: Optional[str] = 'owner,collaborator,organization_member',
    type: Optional[Type4] = 'all',
    sort: Optional[Sort44] = 'full_name',
    direction: Optional[Direction] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
):
    """
    List repositories for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user/repos',
    description=""" Creates a new repository for the authenticated user.

**OAuth scope requirements**

When using [OAuth](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:

*   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
*   `repo` scope to create a private repository. """,
    tags=[
        'repository_management',
        'repository_creation_management',
        'user_repository_management',
    ],
)
def repos_create_for_authenticated_user(body: UserReposPostRequest):
    """
    Create a repository for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/repository_invitations',
    description=""" When authenticating as a user, this endpoint will list all currently open repository invitations for that user. """,
    tags=[
        'repository_invitation_management',
        'organization_management',
        'user_management',
    ],
)
def repos_list_invitations_for_authenticated_user(
    per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List repository invitations for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/user/repository_invitations/{invitation_id}',
    tags=['repository_invitation_management'],
)
def repos_decline_invitation(invitation_id: int):
    """
    Decline a repository invitation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/user/repository_invitations/{invitation_id}',
    tags=['repository_invitation_management'],
)
def repos_accept_invitation(invitation_id: int):
    """
    Accept a repository invitation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/starred',
    description=""" Lists repositories the authenticated user has starred.

You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@2.21/rest/overview/media-types/) via the `Accept` header: """,
    tags=['user_activity_management', 'repository_management'],
)
def activity_list_repos_starred_by_authenticated_user(
    sort: Optional[Sort46] = 'created',
    direction: Optional[Direction] = 'desc',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List repositories starred by the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/user/starred/{owner}/{repo}',
    tags=[
        'repository_management',
        'user_management',
        'repository_subscription_management',
    ],
)
def activity_unstar_repo_for_authenticated_user(owner: str, repo: str = ...):
    """
    Unstar a repository for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/starred/{owner}/{repo}',
    tags=[
        'repository_management',
        'user_management',
        'repository_subscription_management',
    ],
)
def activity_check_repo_is_starred_by_authenticated_user(owner: str, repo: str = ...):
    """
    Check if a repository is starred by the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/user/starred/{owner}/{repo}',
    description=""" Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-verbs)." """,
    tags=['repository_management', 'repository_subscription_management'],
)
def activity_star_repo_for_authenticated_user(owner: str, repo: str = ...):
    """
    Star a repository for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/subscriptions',
    description=""" Lists repositories the authenticated user is watching. """,
    tags=['repository_management', 'user_management'],
)
def activity_list_watched_repos_for_authenticated_user(
    per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List repositories watched by the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/teams',
    description=""" List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/enterprise-server@2.21/apps/building-oauth-apps/). """,
    tags=[
        'organization_management',
        'team_management',
        'organization_member_management',
        'user_management',
    ],
)
def teams_list_for_authenticated_user(
    per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List teams for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users',
    description=""" Lists all users, in the order that they signed up on GitHub Enterprise Server. This list includes personal user accounts and organization accounts.

Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users. """,
    tags=['user_management', 'user_activity_management'],
)
def users_list(since: Optional[int] = None, per_page: Optional[int] = 30):
    """
    List users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}',
    description=""" Provides publicly available information about someone with a GitHub account.

GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub Enterprise Server plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/enterprise-server@2.21/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub Enterprise Server plan information' below"

The `email` key in the following response is the publicly visible email address from your GitHub Enterprise Server [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub Enterprise Server. For more information, see [Authentication](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#authentication).

The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/enterprise-server@2.21/rest/reference/users#emails)". """,
    tags=['user_management', 'user_profile_management', 'user_activity_management'],
)
def users_get_by_username(username: str):
    """
    Get a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/events',
    description=""" If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events. """,
    tags=['user_activity_management', 'activity_feed_management'],
)
def activity_list_events_for_authenticated_user(
    username: str, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List events for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/events/orgs/{org}',
    description=""" This is the user's organization dashboard. You must be authenticated as the user to view this. """,
    tags=[
        'organization_management',
        'user_activity_management',
        'activity_feed_management',
    ],
)
def activity_list_org_events_for_authenticated_user(
    username: str, org: str = ..., per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List organization events for the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/events/public',
    tags=['activity_feed_management', 'user_activity_management'],
)
def activity_list_public_events_for_user(
    username: str, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List public events for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/followers',
    description=""" Lists the people following the specified user. """,
    tags=['user_management', 'user_follow_management', 'user_activity_management'],
)
def users_list_followers_for_user(
    username: str, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List followers of a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/following',
    description=""" Lists the people who the specified user follows. """,
    tags=['user_follow_management', 'user_management', 'user_activity_management'],
)
def users_list_following_for_user(
    username: str, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List the people a user follows
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/following/{target_user}',
    tags=['user_follow_management', 'user_management'],
)
def users_check_following_for_user(username: str, target_user: str = ...):
    """
    Check if a user follows another user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/gists',
    description=""" Lists public gists for the specified user: """,
    tags=['gists_management', 'user_management'],
)
def gists_list_for_user(
    username: str,
    since: Optional[datetime] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List gists for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/gpg_keys',
    description=""" Lists the GPG keys for a user. This information is accessible by anyone. """,
    tags=['user_management', 'user_ssh_key_management'],
)
def users_list_gpg_keys_for_user(
    username: str, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List GPG keys for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/hovercard',
    description=""" Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.

The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:

```shell
 curl -u username:token
  https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
``` """,
    tags=['user_management', 'user_profile_management', 'user_activity_management'],
)
def users_get_context_for_user(
    username: str,
    subject_type: Optional[SubjectType] = None,
    subject_id: Optional[str] = None,
):
    """
    Get contextual information for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/installation',
    description=""" Enables an authenticated GitHub App to find the user’s installation information.

You must use a [JWT](https://docs.github.com/enterprise-server@2.21/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. """,
    tags=['app_management', 'app_installation_management'],
)
def apps_get_user_installation(
    accept: str = 'application/vnd.github.machine-man-preview+json', username: str = ...
):
    """
    Get a user installation for the authenticated app
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/keys',
    description=""" Lists the _verified_ public SSH keys for a user. This is accessible by anyone. """,
    tags=['user_management', 'user_ssh_key_management', 'user_profile_management'],
)
def users_list_public_keys_for_user(
    username: str, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List public keys for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/orgs',
    description=""" List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.

This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/enterprise-server@2.21/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead. """,
    tags=['organization_management', 'orgs_management'],
)
def orgs_list_for_user(
    username: str, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List organizations for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/users/{username}/projects', tags=['user_project_management'])
def projects_list_for_user(
    username: str,
    state: Optional[State33] = 'open',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List user projects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/received_events',
    description=""" These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events. """,
    tags=[
        'user_activity_management',
        'notification_management',
        'activity_feed_management',
    ],
)
def activity_list_received_events_for_user(
    username: str, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List events received by the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/received_events/public',
    tags=['activity_feed_management', 'user_activity_management'],
)
def activity_list_received_public_events_for_user(
    username: str, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List public events received by a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/repos',
    description=""" Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user. """,
    tags=['user_repository_management', 'repository_management'],
)
def repos_list_for_user(
    username: str,
    type: Optional[Type6] = 'owner',
    sort: Optional[Sort48] = 'full_name',
    direction: Optional[Direction] = None,
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List repositories for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{username}/site_admin',
    description=""" You can demote any user account except your own. """,
    tags=['user_management', 'admin_user_management', 'organization_member_management'],
)
def enterprise_admin_demote_site_administrator(username: str):
    """
    Demote a site administrator
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{username}/site_admin',
    description=""" Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-verbs)." """,
    tags=['user_management', 'admin_user_management'],
)
def enterprise_admin_promote_user_to_be_site_administrator(username: str):
    """
    Promote a user to be a site administrator
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/starred',
    description=""" Lists repositories a user has starred.

You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@2.21/rest/overview/media-types/) via the `Accept` header: """,
    tags=[
        'repository_activity_management',
        'user_management',
        'user_repository_management',
    ],
)
def activity_list_repos_starred_by_user(
    username: str,
    sort: Optional[Sort50] = 'created',
    direction: Optional[Direction] = 'desc',
    per_page: Optional[int] = 30,
    page: Optional[int] = 1,
):
    """
    List repositories starred by a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/subscriptions',
    description=""" Lists repositories a user is watching. """,
    tags=[
        'user_management',
        'user_activity_management',
        'repository_management',
        'repository_subscription_management',
    ],
)
def activity_list_repos_watched_by_user(
    username: str, per_page: Optional[int] = 30, page: Optional[int] = 1
):
    """
    List repositories watched by a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{username}/suspended',
    description=""" If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API. """,
    tags=['user_management', 'admin_user_management'],
)
def enterprise_admin_unsuspend_user(
    username: str, body: UsersUsernameSuspendedDeleteRequest = None
):
    """
    Unsuspend a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{username}/suspended',
    description=""" If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.

You can suspend any user account except your own.

Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-verbs)." """,
    tags=['user_management', 'admin_user_management'],
)
def enterprise_admin_suspend_user(
    username: str, body: UsersUsernameSuspendedPutRequest = None
):
    """
    Suspend a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/zen',
    description=""" Get a random sentence from the Zen of GitHub """,
    tags=['meta_information_management'],
)
def meta_get_zen():
    """
    Get the Zen of GitHub
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
